{"version":3,"sources":["../../src/tab-page/TabPage.jsx"],"names":["TabPage","intl","props","activeTabSlug","courseId","courseStatus","metadataModel","toastBodyLink","toastBodyText","toastHeader","state","courseHome","dispatch","courseAccess","number","org","start","title","formatMessage","messages","loading","redirectUrl","label","href","genericMessages","close","header","link","link_text","maxWidth","failure","defaultProps","unitId","propTypes","PropTypes","string","isRequired","intlShape"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nimport Footer from '@edx/frontend-component-footer';\nimport { Toast } from '@edx/paragon';\nimport { LearningHeader as Header } from '@edx/frontend-component-header';\nimport PageLoading from '../generic/PageLoading';\nimport { getAccessDeniedRedirectUrl } from '../shared/access';\nimport { useModel } from '../generic/model-store';\n\nimport genericMessages from '../generic/messages';\nimport messages from './messages';\nimport LoadedTabPage from './LoadedTabPage';\nimport { setCallToActionToast } from '../course-home/data/slice';\nimport LaunchCourseHomeTourButton from '../product-tours/newUserCourseHomeTour/LaunchCourseHomeTourButton';\n\nfunction TabPage({ intl, ...props }) {\n  const {\n    activeTabSlug,\n    courseId,\n    courseStatus,\n    metadataModel,\n  } = props;\n  const {\n    toastBodyLink,\n    toastBodyText,\n    toastHeader,\n  } = useSelector(state => state.courseHome);\n  const dispatch = useDispatch();\n  const {\n    courseAccess,\n    number,\n    org,\n    start,\n    title,\n  } = useModel('courseHomeMeta', courseId);\n\n  if (courseStatus === 'loading') {\n    return (\n      <>\n        <Header />\n        <PageLoading\n          srMessage={intl.formatMessage(messages.loading)}\n        />\n        <Footer />\n      </>\n    );\n  }\n\n  if (courseStatus === 'denied') {\n    const redirectUrl = getAccessDeniedRedirectUrl(courseId, activeTabSlug, courseAccess, start);\n    if (redirectUrl) {\n      return (<Redirect to={redirectUrl} />);\n    }\n  }\n\n  // Either a success state or a denied state that wasn't redirected above (some tabs handle denied states themselves,\n  // like the outline tab handling unenrolled learners)\n  if (courseStatus === 'loaded' || courseStatus === 'denied') {\n    return (\n      <>\n        <Toast\n          action={toastBodyText ? {\n            label: toastBodyText,\n            href: toastBodyLink,\n          } : null}\n          closeLabel={intl.formatMessage(genericMessages.close)}\n          onClose={() => dispatch(setCallToActionToast({ header: '', link: null, link_text: null }))}\n          show={!!(toastHeader)}\n        >\n          {toastHeader}\n        </Toast>\n        {metadataModel === 'courseHomeMeta' && (<LaunchCourseHomeTourButton srOnly />)}\n        <Header\n          courseOrg={org}\n          courseNumber={number}\n          courseTitle={title}\n        />\n        <LoadedTabPage {...props} />\n        <Footer />\n      </>\n    );\n  }\n\n  // courseStatus 'failed' and any other unexpected course status.\n  return (\n    <>\n      <Header />\n      <p className=\"text-center py-5 mx-auto\" style={{ maxWidth: '30em' }}>\n        {intl.formatMessage(messages.failure)}\n      </p>\n      <Footer />\n    </>\n  );\n}\n\nTabPage.defaultProps = {\n  courseId: null,\n  unitId: null,\n};\n\nTabPage.propTypes = {\n  activeTabSlug: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string,\n  courseStatus: PropTypes.string.isRequired,\n  metadataModel: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n};\n\nexport default injectIntl(TabPage);\n"],"file":"TabPage.js"}