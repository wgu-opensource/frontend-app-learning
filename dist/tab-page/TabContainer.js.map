{"version":3,"sources":["../../src/tab-page/TabContainer.jsx"],"names":["TabContainer","props","children","fetch","slice","tab","courseId","courseIdFromUrl","dispatch","courseStatus","state","propTypes","PropTypes","node","isRequired","func","string"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEe,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFJ,KALJ;AAOA,QAAM;AAAEK,IAAAA,QAAQ,EAAEC;AAAZ,MAAgC,gCAAtC;AACA,QAAMC,QAAQ,GAAG,8BAAjB;AACA,wBAAU,MAAM;AACd;AACAA,IAAAA,QAAQ,CAACL,KAAK,CAACI,eAAD,CAAN,CAAR;AACD,GAHD,EAGG,CAACA,eAAD,CAHH,EAV0C,CAe1C;AACA;;AACA,QAAM;AACJD,IAAAA,QADI;AAEJG,IAAAA;AAFI,MAGF,6BAAYC,KAAK,IAAIA,KAAK,CAACN,KAAD,CAA1B,CAHJ;AAKA,sBACE,sBAAC,gBAAD;AACE,IAAA,aAAa,EAAEC,GADjB;AAEE,IAAA,QAAQ,EAAEC,QAFZ;AAGE,IAAA,YAAY,EAAEG,YAHhB;AAIE,IAAA,aAAa,EAAG,GAAEL,KAAM,MAJ1B;AAAA,eAMGE,QAAQ,iBAAI,qBAAC,uCAAD;AAAgB,MAAA,QAAQ,EAAEA;AAA1B,MANf,EAOGJ,QAPH;AAAA,IADF;AAWD;;AAEDF,YAAY,CAACW,SAAb,GAAyB;AACvBT,EAAAA,QAAQ,EAAEU,mBAAUC,IAAV,CAAeC,UADF;AAEvBX,EAAAA,KAAK,EAAES,mBAAUG,IAAV,CAAeD,UAFC;AAGvBV,EAAAA,KAAK,EAAEQ,mBAAUI,MAAV,CAAiBF,UAHD;AAIvBT,EAAAA,GAAG,EAAEO,mBAAUI,MAAV,CAAiBF;AAJC,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { OuterExamTimer } from '@edx/frontend-lib-special-exams';\n\nimport TabPage from './TabPage';\n\nexport default function TabContainer(props) {\n  const {\n    children,\n    fetch,\n    slice,\n    tab,\n  } = props;\n\n  const { courseId: courseIdFromUrl } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // The courseId from the URL is the course we WANT to load.\n    dispatch(fetch(courseIdFromUrl));\n  }, [courseIdFromUrl]);\n\n  // The courseId from the store is the course we HAVE loaded.  If the URL changes,\n  // we don't want the application to adjust to it until it has actually loaded the new data.\n  const {\n    courseId,\n    courseStatus,\n  } = useSelector(state => state[slice]);\n\n  return (\n    <TabPage\n      activeTabSlug={tab}\n      courseId={courseId}\n      courseStatus={courseStatus}\n      metadataModel={`${slice}Meta`}\n    >\n      {courseId && <OuterExamTimer courseId={courseId} />}\n      {children}\n    </TabPage>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  fetch: PropTypes.func.isRequired,\n  slice: PropTypes.string.isRequired,\n  tab: PropTypes.string.isRequired,\n};\n"],"file":"TabContainer.js"}