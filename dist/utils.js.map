{"version":3,"sources":["../src/utils.js"],"names":["executeThunk","thunk","dispatch","getState","Promise","setImmediate","appendBrowserTimezoneToUrl","url","browserTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","urlObject","URL","searchParams","append","href"],"mappings":";;;;;;;AAAA;AACA;AACO,MAAMA,YAAY,GAAG,OAAOC,KAAP,EAAcC,QAAd,EAAwBC,QAAxB,KAAqC;AAC/D,QAAMF,KAAK,CAACC,QAAD,EAAWC,QAAX,CAAX;AACA,QAAM,IAAIC,OAAJ,CAAYC,YAAZ,CAAN;AACD,CAHM,C,CAKP;AACA;;;;;AACO,MAAMC,0BAA0B,GAAIC,GAAD,IAAS;AACjD,QAAMC,eAAe,GAAGC,IAAI,CAACC,cAAL,GAAsBC,eAAtB,GAAwCC,QAAhE;AACA,QAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQP,GAAR,CAAlB;;AACA,MAAIC,eAAJ,EAAqB;AACnBK,IAAAA,SAAS,CAACE,YAAV,CAAuBC,MAAvB,CAA8B,kBAA9B,EAAkDR,eAAlD;AACD;;AACD,SAAOK,SAAS,CAACI,IAAjB;AACD,CAPM","sourcesContent":["// Helper, that is used to forcibly finalize all promises\n// in thunk before running matcher against state.\nexport const executeThunk = async (thunk, dispatch, getState) => {\n  await thunk(dispatch, getState);\n  await new Promise(setImmediate);\n};\n\n// Utility function for appending the browser timezone to the url\n// Can be used on the backend when the user timezone is not set in the user account\nexport const appendBrowserTimezoneToUrl = (url) => {\n  const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  const urlObject = new URL(url);\n  if (browserTimezone) {\n    urlObject.searchParams.append('browser_timezone', browserTimezone);\n  }\n  return urlObject.href;\n};\n"],"file":"utils.js"}