{"version":3,"sources":["../../../../../../src/courseware/course/sidebar/sidebars/discussions/DiscussionsTrigger.jsx"],"names":["ID","DiscussionsTrigger","intl","onClick","unitId","courseId","SidebarContext","dispatch","topic","baseUrl","DISCUSSIONS_MFE_BASE_URL","id","formatMessage","messages","openDiscussionsTrigger","QuestionAnswer","propTypes","intlShape","isRequired","PropTypes","func"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,oCAAa,CAAC,0BAAD,CAAb;AACO,MAAMA,EAAE,GAAG,aAAX;;;AAEP,SAASC,kBAAT,OAGG;AAAA,MAHyB;AAC1BC,IAAAA,IAD0B;AAE1BC,IAAAA;AAF0B,GAGzB;AACD,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA;AAFI,MAGF,uBAAWC,uBAAX,CAHJ;AAIA,QAAMC,QAAQ,GAAG,8BAAjB;AACA,QAAMC,KAAK,GAAG,0BAAS,kBAAT,EAA6BJ,MAA7B,CAAd;AACA,QAAMK,OAAO,GAAG,mCAAYC,wBAA5B;AAEA,wBAAU,MAAM;AACd;AACA,QAAID,OAAJ,EAAa;AACXF,MAAAA,QAAQ,CAAC,uCAA0BF,QAA1B,CAAD,CAAR;AACD;AACF,GALD,EAKG,CAACA,QAAD,EAAWI,OAAX,CALH;;AAMA,MAAI,CAACD,KAAK,CAACG,EAAX,EAAe;AACb,WAAO,IAAP;AACD;;AACD,sBACE,qBAAC,oBAAD;AAAoB,IAAA,OAAO,EAAER,OAA7B;AAAsC,IAAA,SAAS,EAAED,IAAI,CAACU,aAAL,CAAmBC,kBAASC,sBAA5B,CAAjD;AAAA,2BACE,qBAAC,aAAD;AAAM,MAAA,GAAG,EAAEC,qBAAX;AAA2B,MAAA,SAAS,EAAC;AAArC;AADF,IADF;AAKD;;AAEDd,kBAAkB,CAACe,SAAnB,GAA+B;AAC7Bd,EAAAA,IAAI,EAAEe,gBAAUC,UADa;AAE7Bf,EAAAA,OAAO,EAAEgB,mBAAUC,IAAV,CAAeF;AAFK,CAA/B;;eAKe,sBAAWjB,kBAAX,C","sourcesContent":["import { ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Icon } from '@edx/paragon';\nimport { QuestionAnswer } from '@edx/paragon/icons';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useModel } from '../../../../../generic/model-store';\nimport { getCourseDiscussionTopics } from '../../../../data/thunks';\nimport SidebarTriggerBase from '../../common/TriggerBase';\nimport SidebarContext from '../../SidebarContext';\nimport messages from './messages';\n\nensureConfig(['DISCUSSIONS_MFE_BASE_URL']);\nexport const ID = 'DISCUSSIONS';\n\nfunction DiscussionsTrigger({\n  intl,\n  onClick,\n}) {\n  const {\n    unitId,\n    courseId,\n  } = useContext(SidebarContext);\n  const dispatch = useDispatch();\n  const topic = useModel('discussionTopics', unitId);\n  const baseUrl = getConfig().DISCUSSIONS_MFE_BASE_URL;\n\n  useEffect(() => {\n    // Only fetch the topic data if the MFE is configured.\n    if (baseUrl) {\n      dispatch(getCourseDiscussionTopics(courseId));\n    }\n  }, [courseId, baseUrl]);\n  if (!topic.id) {\n    return null;\n  }\n  return (\n    <SidebarTriggerBase onClick={onClick} ariaLabel={intl.formatMessage(messages.openDiscussionsTrigger)}>\n      <Icon src={QuestionAnswer} className=\"m-0 m-auto\" />\n    </SidebarTriggerBase>\n  );\n}\n\nDiscussionsTrigger.propTypes = {\n  intl: intlShape.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(DiscussionsTrigger);\n"],"file":"DiscussionsTrigger.js"}