{"version":3,"sources":["../../../../../../src/courseware/course/sidebar/sidebars/notifications/NotificationTrigger.jsx"],"names":["ID","NotificationTrigger","intl","onClick","courseId","notificationStatus","setNotificationStatus","upgradeNotificationCurrentState","SidebarContext","UpdateUpgradeNotificationLastSeen","handleClick","formatMessage","messages","openNotificationTrigger","propTypes","intlShape","isRequired","PropTypes","func"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEO,MAAMA,EAAE,GAAG,eAAX;;;AAEP,SAASC,mBAAT,OAGG;AAAA,MAH0B;AAC3BC,IAAAA,IAD2B;AAE3BC,IAAAA;AAF2B,GAG1B;AACD,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,kBAFI;AAGJC,IAAAA,qBAHI;AAIJC,IAAAA;AAJI,MAKF,uBAAWC,uBAAX,CALJ;AAOA;AACF;AACA;;AACE,WAASC,iCAAT,GAA6C;AAC3C,QAAIF,+BAAJ,EAAqC;AACnC,UAAI,mCAAiB,+BAA8BH,QAAS,EAAxD,MAA+DG,+BAAnE,EAAoG;AAClGD,QAAAA,qBAAqB,CAAC,QAAD,CAArB;AACA,2CAAiB,sBAAqBF,QAAS,EAA/C,EAAkD,QAAlD;AACA,2CAAiB,+BAA8BA,QAAS,EAAxD,EAA2DG,+BAA3D;AACD;AACF;AACF;;AAED,MAAI,CAAC,mCAAiB,sBAAqBH,QAAS,EAA/C,CAAL,EAAwD;AACtD,uCAAiB,sBAAqBA,QAAS,EAA/C,EAAkD,QAAlD,EADsD,CACO;AAC9D;;AAED,MAAI,CAAC,mCAAiB,mCAAkCA,QAAS,EAA5D,CAAL,EAAqE;AACnE,uCAAiB,mCAAkCA,QAAS,EAA5D,EAA+D,YAA/D;AACD;;AAED,wBAAU,MAAM;AACdK,IAAAA,iCAAiC;AAClC,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAI,uCAAmB,0BAAyBN,QAAS,EAArD,MAA4D,MAAhE,EAAwE;AACtE,6CAAmB,0BAAyBA,QAAS,EAArD,EAAwD,QAAxD;AACD,KAFD,MAEO;AACL,6CAAmB,0BAAyBA,QAAS,EAArD,EAAwD,MAAxD;AACD;;AACDD,IAAAA,OAAO;AACR,GAPD;;AASA,sBACE,qBAAC,oBAAD;AAAoB,IAAA,OAAO,EAAEO,WAA7B;AAA0C,IAAA,SAAS,EAAER,IAAI,CAACS,aAAL,CAAmBC,kBAASC,uBAA5B,CAArD;AAAA,2BACE,qBAAC,yBAAD;AAAkB,MAAA,MAAM,EAAER,kBAA1B;AAA8C,MAAA,iBAAiB,EAAC;AAAhE;AADF,IADF;AAKD;;AAEDJ,mBAAmB,CAACa,SAApB,GAAgC;AAC9BZ,EAAAA,IAAI,EAAEa,gBAAUC,UADc;AAE9Bb,EAAAA,OAAO,EAAEc,mBAAUC,IAAV,CAAeF;AAFM,CAAhC;;eAKe,sBAAWf,mBAAX,C","sourcesContent":["import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect } from 'react';\nimport { getLocalStorage, setLocalStorage } from '../../../../../data/localStorage';\nimport { getSessionStorage, setSessionStorage } from '../../../../../data/sessionStorage';\nimport messages from '../../../messages';\nimport SidebarTriggerBase from '../../common/TriggerBase';\nimport SidebarContext from '../../SidebarContext';\n\nimport NotificationIcon from './NotificationIcon';\n\nexport const ID = 'NOTIFICATIONS';\n\nfunction NotificationTrigger({\n  intl,\n  onClick,\n}) {\n  const {\n    courseId,\n    notificationStatus,\n    setNotificationStatus,\n    upgradeNotificationCurrentState,\n  } = useContext(SidebarContext);\n\n  /* Re-show a red dot beside the notification trigger for each of the 7 UpgradeNotification stages\n   The upgradeNotificationCurrentState prop will be available after UpgradeNotification mounts. Once available,\n  compare with the last state they've seen, and if it's different then set dot back to red */\n  function UpdateUpgradeNotificationLastSeen() {\n    if (upgradeNotificationCurrentState) {\n      if (getLocalStorage(`upgradeNotificationLastSeen.${courseId}`) !== upgradeNotificationCurrentState) {\n        setNotificationStatus('active');\n        setLocalStorage(`notificationStatus.${courseId}`, 'active');\n        setLocalStorage(`upgradeNotificationLastSeen.${courseId}`, upgradeNotificationCurrentState);\n      }\n    }\n  }\n\n  if (!getLocalStorage(`notificationStatus.${courseId}`)) {\n    setLocalStorage(`notificationStatus.${courseId}`, 'active'); // Show red dot on notificationTrigger until seen\n  }\n\n  if (!getLocalStorage(`upgradeNotificationCurrentState.${courseId}`)) {\n    setLocalStorage(`upgradeNotificationCurrentState.${courseId}`, 'initialize');\n  }\n\n  useEffect(() => {\n    UpdateUpgradeNotificationLastSeen();\n  });\n\n  const handleClick = () => {\n    if (getSessionStorage(`notificationTrayStatus.${courseId}`) === 'open') {\n      setSessionStorage(`notificationTrayStatus.${courseId}`, 'closed');\n    } else {\n      setSessionStorage(`notificationTrayStatus.${courseId}`, 'open');\n    }\n    onClick();\n  };\n\n  return (\n    <SidebarTriggerBase onClick={handleClick} ariaLabel={intl.formatMessage(messages.openNotificationTrigger)}>\n      <NotificationIcon status={notificationStatus} notificationColor=\"bg-danger-500\" />\n    </SidebarTriggerBase>\n  );\n}\n\nNotificationTrigger.propTypes = {\n  intl: intlShape.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(NotificationTrigger);\n"],"file":"NotificationTrigger.js"}