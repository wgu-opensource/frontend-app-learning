{"version":3,"sources":["../../../../src/courseware/course/sidebar/SidebarContextProvider.jsx"],"names":["SidebarProvider","courseId","unitId","children","verifiedMode","shouldDisplayFullScreen","width","breakpoints","large","minWidth","shouldDisplaySidebarOpen","medium","showNotificationsOnLoad","initialSidebar","SIDEBARS","NOTIFICATIONS","ID","currentSidebar","setCurrentSidebar","notificationStatus","setNotificationStatus","upgradeNotificationCurrentState","setUpgradeNotificationCurrentState","onNotificationSeen","toggleSidebar","sidebarId","propTypes","PropTypes","string","isRequired","node","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEe,SAASA,eAAT,OAIZ;AAAA,MAJqC;AACtCC,IAAAA,QADsC;AAEtCC,IAAAA,MAFsC;AAGtCC,IAAAA;AAHsC,GAIrC;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAmB,0BAAS,gBAAT,EAA2BH,QAA3B,CAAzB;;AACA,QAAMI,uBAAuB,GAAG,8BAAgBC,KAAhB,GAAwBC,qBAAYC,KAAZ,CAAkBC,QAA1E;;AACA,QAAMC,wBAAwB,GAAG,8BAAgBJ,KAAhB,GAAwBC,qBAAYI,MAAZ,CAAmBF,QAA5E;;AACA,QAAMG,uBAAuB,GAAG,uCAAmB,0BAAyBX,QAAS,EAArD,MAA4D,QAA5F;AACA,QAAMY,cAAc,GAAIT,YAAY,IAAIM,wBAAhB,IAA4CE,uBAA7C,GACnBE,mBAASC,aAAT,CAAuBC,EADJ,GAEnB,IAFJ;AAGA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC,qBAASL,cAAT,CAA5C;AACA,QAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8C,qBAAS,mCAAiB,sBAAqBnB,QAAS,EAA/C,CAAT,CAApD;AACA,QAAM,CAACoB,+BAAD,EAAkCC,kCAAlC,IAAwE,qBAAS,mCAAiB,mCAAkCrB,QAAS,EAA5D,CAAT,CAA9E;AAEA,wBAAU,MAAM;AACd;AACA,QAAIG,YAAY,IAAIa,cAAc,KAAK,IAAnC,IAA2CJ,cAA/C,EAA+D;AAC7DK,MAAAA,iBAAiB,CAACL,cAAD,CAAjB;AACD;AACF,GALD,EAKG,CAACA,cAAD,EAAiBT,YAAjB,CALH;;AAOA,QAAMmB,kBAAkB,GAAG,MAAM;AAC/BH,IAAAA,qBAAqB,CAAC,UAAD,CAArB;AACA,uCAAiB,sBAAqBnB,QAAS,EAA/C,EAAkD,UAAlD;AACD,GAHD;;AAKA,QAAMuB,aAAa,GAAIC,SAAD,IAAe;AACnC;AACAP,IAAAA,iBAAiB,CAACO,SAAS,KAAKR,cAAd,GAA+B,IAA/B,GAAsCQ,SAAvC,CAAjB;AACD,GAHD;;AAKA,sBACE,qBAAC,uBAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAC9BD,MAAAA,aAD8B;AAE9BD,MAAAA,kBAF8B;AAG9BH,MAAAA,qBAH8B;AAI9BH,MAAAA,cAJ8B;AAK9BE,MAAAA,kBAL8B;AAM9BE,MAAAA,+BAN8B;AAO9BC,MAAAA,kCAP8B;AAQ9BZ,MAAAA,wBAR8B;AAS9BL,MAAAA,uBAT8B;AAU9BJ,MAAAA,QAV8B;AAW9BC,MAAAA;AAX8B,KAAhC;AAAA,cAcGC;AAdH,IADF;AAkBD;;AAEDH,eAAe,CAAC0B,SAAhB,GAA4B;AAC1BzB,EAAAA,QAAQ,EAAE0B,mBAAUC,MAAV,CAAiBC,UADD;AAE1B3B,EAAAA,MAAM,EAAEyB,mBAAUC,MAAV,CAAiBC,UAFC;AAG1B1B,EAAAA,QAAQ,EAAEwB,mBAAUG;AAHM,CAA5B;AAMA9B,eAAe,CAAC+B,YAAhB,GAA+B;AAC7B5B,EAAAA,QAAQ,EAAE;AADmB,CAA/B","sourcesContent":["import { breakpoints, useWindowSize } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\nimport { getLocalStorage, setLocalStorage } from '../../../data/localStorage';\nimport { getSessionStorage } from '../../../data/sessionStorage';\nimport { useModel } from '../../../generic/model-store';\nimport SidebarContext from './SidebarContext';\nimport { SIDEBARS } from './sidebars';\n\nexport default function SidebarProvider({\n  courseId,\n  unitId,\n  children,\n}) {\n  const { verifiedMode } = useModel('courseHomeMeta', courseId);\n  const shouldDisplayFullScreen = useWindowSize().width < breakpoints.large.minWidth;\n  const shouldDisplaySidebarOpen = useWindowSize().width > breakpoints.medium.minWidth;\n  const showNotificationsOnLoad = getSessionStorage(`notificationTrayStatus.${courseId}`) !== 'closed';\n  const initialSidebar = (verifiedMode && shouldDisplaySidebarOpen && showNotificationsOnLoad)\n    ? SIDEBARS.NOTIFICATIONS.ID\n    : null;\n  const [currentSidebar, setCurrentSidebar] = useState(initialSidebar);\n  const [notificationStatus, setNotificationStatus] = useState(getLocalStorage(`notificationStatus.${courseId}`));\n  const [upgradeNotificationCurrentState, setUpgradeNotificationCurrentState] = useState(getLocalStorage(`upgradeNotificationCurrentState.${courseId}`));\n\n  useEffect(() => {\n    // As a one-off set initial sidebar if the verified mode data has just loaded\n    if (verifiedMode && currentSidebar === null && initialSidebar) {\n      setCurrentSidebar(initialSidebar);\n    }\n  }, [initialSidebar, verifiedMode]);\n\n  const onNotificationSeen = () => {\n    setNotificationStatus('inactive');\n    setLocalStorage(`notificationStatus.${courseId}`, 'inactive');\n  };\n\n  const toggleSidebar = (sidebarId) => {\n    // Switch to new sidebar or hide the current sidebar\n    setCurrentSidebar(sidebarId === currentSidebar ? null : sidebarId);\n  };\n\n  return (\n    <SidebarContext.Provider value={{\n      toggleSidebar,\n      onNotificationSeen,\n      setNotificationStatus,\n      currentSidebar,\n      notificationStatus,\n      upgradeNotificationCurrentState,\n      setUpgradeNotificationCurrentState,\n      shouldDisplaySidebarOpen,\n      shouldDisplayFullScreen,\n      courseId,\n      unitId,\n    }}\n    >\n      {children}\n    </SidebarContext.Provider>\n  );\n}\n\nSidebarProvider.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  unitId: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nSidebarProvider.defaultProps = {\n  children: null,\n};\n"],"file":"SidebarContextProvider.js"}