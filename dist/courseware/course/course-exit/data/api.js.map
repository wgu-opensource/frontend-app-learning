{"version":3,"sources":["../../../../../src/courseware/course/course-exit/data/api.js"],"names":["filterRecommendationsList","data","uuid","recommendations","enrollments","enrollmentRunIds","map","courseDetails","courseId","filter","recUuid","courseRunKeys","every","key","includes","getCourseRecommendations","courseKey","discoveryApiUrl","DISCOVERY_API_BASE_URL","recommendationsUrl","URL","enrollmentsUrl","LMS_BASE_URL","recommendationsResponse","enrollmentsResponse","Promise","all","get","postUnsubscribeFromGoalReminders","url","post","href","course_id","subscribed_to_reminders"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA,SAASA,yBAAT,cAUE;AAAA,MATA;AACEC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IADI;AAEJC,MAAAA;AAFI;AADR,GASA;AAAA,MAHA;AACEF,IAAAA,IAAI,EAAEG;AADR,GAGA;AACA,QAAMC,gBAAgB,GAAGD,WAAW,CAACE,GAAZ,CAAgB;AAAA,QAAC;AACxCC,MAAAA,aAAa,EAAE;AACbC,QAAAA;AADa;AADyB,KAAD;AAAA,WAInCA,QAJmC;AAAA,GAAhB,CAAzB;AAMA,SAAOL,eAAe,CAACM,MAAhB,CAAuB;AAAA,QAAC;AAAEP,MAAAA,IAAI,EAAEQ,OAAR;AAAiBC,MAAAA;AAAjB,KAAD;AAAA,WAC5BD,OAAO,KAAKR,IAAZ,IAAoBS,aAAa,CAACC,KAAd,CAAqBC,GAAD,IAAS,CAACR,gBAAgB,CAACS,QAAjB,CAA0BD,GAA1B,CAA9B,CADQ;AAAA,GAAvB,CAAP;AAGD;;AAEM,eAAeE,wBAAf,CAAwCC,SAAxC,EAAmD;AACxD,QAAMC,eAAe,GAAG,mCAAYC,sBAApC;;AACA,MAAI,CAACD,eAAL,EAAsB;AACpB,WAAO,EAAP;AACD;;AACD,QAAME,kBAAkB,GAAG,IAAIC,GAAJ,CAAS,GAAEH,eAAgB,kCAAiCD,SAAU,mBAAtE,CAA3B;AACA,QAAMK,cAAc,GAAG,IAAID,GAAJ,CAAS,GAAE,mCAAYE,YAAa,+BAApC,CAAvB;AACA,QAAM,CAACC,uBAAD,EAA0BC,mBAA1B,IAAiD,MAAMC,OAAO,CAACC,GAAR,CAAY,CACvE,wCAA6BC,GAA7B,CAAiCR,kBAAjC,CADuE,EAEvE,wCAA6BQ,GAA7B,CAAiCN,cAAjC,CAFuE,CAAZ,CAA7D;AAIA,SAAOrB,yBAAyB,CAAC,uCAAgBuB,uBAAhB,CAAD,EAA2C,uCAAgBC,mBAAhB,CAA3C,CAAhC;AACD;;AAEM,eAAeI,gCAAf,CAAgDpB,QAAhD,EAA0D;AAC/D,QAAMqB,GAAG,GAAG,IAAIT,GAAJ,CAAS,GAAE,mCAAYE,YAAa,mCAApC,CAAZ;AACA,SAAO,wCAA6BQ,IAA7B,CAAkCD,GAAG,CAACE,IAAtC,EAA4C;AACjDC,IAAAA,SAAS,EAAExB,QADsC;AAEjDyB,IAAAA,uBAAuB,EAAE;AAFwB,GAA5C,CAAP;AAID","sourcesContent":["import { getConfig, camelCaseObject } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nfunction filterRecommendationsList(\n  {\n    data: {\n      uuid,\n      recommendations,\n    },\n  },\n  {\n    data: enrollments,\n  },\n) {\n  const enrollmentRunIds = enrollments.map(({\n    courseDetails: {\n      courseId,\n    },\n  }) => courseId);\n\n  return recommendations.filter(({ uuid: recUuid, courseRunKeys }) => (\n    recUuid !== uuid && courseRunKeys.every((key) => !enrollmentRunIds.includes(key))\n  ));\n}\n\nexport async function getCourseRecommendations(courseKey) {\n  const discoveryApiUrl = getConfig().DISCOVERY_API_BASE_URL;\n  if (!discoveryApiUrl) {\n    return [];\n  }\n  const recommendationsUrl = new URL(`${discoveryApiUrl}/api/v1/course_recommendations/${courseKey}?exclude_utm=true`);\n  const enrollmentsUrl = new URL(`${getConfig().LMS_BASE_URL}/api/enrollment/v1/enrollment`);\n  const [recommendationsResponse, enrollmentsResponse] = await Promise.all([\n    getAuthenticatedHttpClient().get(recommendationsUrl),\n    getAuthenticatedHttpClient().get(enrollmentsUrl),\n  ]);\n  return filterRecommendationsList(camelCaseObject(recommendationsResponse), camelCaseObject(enrollmentsResponse));\n}\n\nexport async function postUnsubscribeFromGoalReminders(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/save_course_goal`);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_id: courseId,\n    subscribed_to_reminders: false,\n  });\n}\n"],"file":"api.js"}