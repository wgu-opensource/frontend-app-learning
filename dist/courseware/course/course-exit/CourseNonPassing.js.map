{"version":3,"sources":["../../../../src/courseware/course/course-exit/CourseNonPassing.jsx"],"names":["CourseNonPassing","intl","courseId","state","courseware","org","tabs","title","administrator","progressTab","find","tab","slug","progressLink","url","formatMessage","messages","endOfCourseTitle","SITE_NAME","endOfCourseHeader","endOfCourseDescription","viewGradesButton","propTypes","intlShape","isRequired"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,SAASA,gBAAT,OAAoC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAe,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAA3B,CAArB;AACA,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA;AAHI,MAIF,0BAAS,gBAAT,EAA2BL,QAA3B,CAJJ;AAKA,QAAM;AAAEM,IAAAA;AAAF,MAAoB,iCAA1B,CAPkC,CASlC;;AACA,QAAMC,WAAW,GAAGH,IAAI,CAACI,IAAL,CAAUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,KAAa,UAA9B,CAApB;AACA,QAAMC,YAAY,GAAGJ,WAAW,IAAIA,WAAW,CAACK,GAAhD;AAEA,wBAAU,MAAM,qBAAST,GAAT,EAAcH,QAAd,EAAwBM,aAAxB,EAAuC,YAAvC,CAAhB,EAAsE,CAACH,GAAD,EAAMH,QAAN,EAAgBM,aAAhB,CAAtE;AAEA,sBACE;AAAA,4BACE,qBAAC,mBAAD;AAAA,6BACE;AAAA,kBAAS,GAAEP,IAAI,CAACc,aAAL,CAAmBC,kBAASC,gBAA5B,CAA8C,MAAKV,KAAM,MAAK,mCAAYW,SAAU;AAA/F;AADF,MADF,eAIE;AAAK,MAAA,SAAS,EAAC,0EAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,kBACIjB,IAAI,CAACc,aAAL,CAAmBC,kBAASG,iBAA5B;AADJ,QADF,eAIE,qBAAC,cAAD;AAAO,QAAA,OAAO,EAAC,SAAf;AAAyB,QAAA,SAAS,EAAC,oBAAnC;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,iCAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,wBAAf;AAAA,sBAA0ClB,IAAI,CAACc,aAAL,CAAmBC,kBAASI,sBAA5B;AAA1C,YADF,EAEGP,YAAY,iBACX,qBAAC,eAAD;AACE,YAAA,OAAO,EAAC,SADV;AAEE,YAAA,SAAS,EAAC,iDAFZ;AAGE,YAAA,IAAI,EAAEA,YAHR;AAIE,YAAA,OAAO,EAAE,MAAM,qBAASR,GAAT,EAAcH,QAAd,EAAwBM,aAAxB,EAAuC,aAAvC,CAJjB;AAAA,sBAMGP,IAAI,CAACc,aAAL,CAAmBC,kBAASK,gBAA5B;AANH,YAHJ;AAAA;AADF,QAJF,eAmBE,qBAAC,0BAAD;AAAmB,QAAA,OAAO,EAAC;AAA3B,QAnBF,eAoBE,qBAAC,0BAAD;AAAmB,QAAA,OAAO,EAAC;AAA3B,QApBF;AAAA,MAJF;AAAA,IADF;AA6BD;;AAEDrB,gBAAgB,CAACsB,SAAjB,GAA6B;AAC3BrB,EAAAA,IAAI,EAAEsB,gBAAUC;AADW,CAA7B;;eAIe,sBAAWxB,gBAAX,C","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Helmet } from 'react-helmet';\nimport { useSelector } from 'react-redux';\nimport { Alert, Button } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport CatalogSuggestion from './CatalogSuggestion';\nimport DashboardFootnote from './DashboardFootnote';\nimport messages from './messages';\nimport { logClick, logVisit } from './utils';\n\nfunction CourseNonPassing({ intl }) {\n  const { courseId } = useSelector(state => state.courseware);\n  const {\n    org,\n    tabs,\n    title,\n  } = useModel('courseHomeMeta', courseId);\n  const { administrator } = getAuthenticatedUser();\n\n  // Get progress tab link for 'view grades' button\n  const progressTab = tabs.find(tab => tab.slug === 'progress');\n  const progressLink = progressTab && progressTab.url;\n\n  useEffect(() => logVisit(org, courseId, administrator, 'nonpassing'), [org, courseId, administrator]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${intl.formatMessage(messages.endOfCourseTitle)} | ${title} | ${getConfig().SITE_NAME}`}</title>\n      </Helmet>\n      <div className=\"row w-100 mx-0 mb-4 px-5 py-4 border border-light justify-content-center\">\n        <div className=\"col-12 p-0 h2 text-center\">\n          { intl.formatMessage(messages.endOfCourseHeader) }\n        </div>\n        <Alert variant=\"primary\" className=\"col col-lg-10 mt-4\">\n          <div className=\"row w-100 m-0 align-items-start\">\n            <div className=\"flex-grow-1 col-sm p-0\">{ intl.formatMessage(messages.endOfCourseDescription) }</div>\n            {progressLink && (\n              <Button\n                variant=\"primary\"\n                className=\"flex-shrink-0 mt-3 mt-sm-0 mb-1 mb-sm-0 ml-sm-5\"\n                href={progressLink}\n                onClick={() => logClick(org, courseId, administrator, 'view_grades')}\n              >\n                {intl.formatMessage(messages.viewGradesButton)}\n              </Button>\n            )}\n          </div>\n        </Alert>\n        <DashboardFootnote variant=\"nonpassing\" />\n        <CatalogSuggestion variant=\"nonpassing\" />\n      </div>\n    </>\n  );\n}\n\nCourseNonPassing.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseNonPassing);\n"],"file":"CourseNonPassing.js"}