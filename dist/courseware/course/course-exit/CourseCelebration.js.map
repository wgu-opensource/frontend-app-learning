{"version":3,"sources":["../../../../src/courseware/course/course-exit/CourseCelebration.jsx"],"names":["LINKEDIN_BLUE","CourseCelebration","intl","wideScreen","width","breakpoints","medium","minWidth","courseId","state","courseware","dispatch","certificateData","end","linkedinAddToProfileUrl","marketingUrl","offer","relatedPrograms","title","verifyIdentityUrl","verificationStatus","org","verifiedMode","canViewCertificate","userTimezone","certStatus","certWebViewUrl","certificateAvailableDate","administrator","dashboardLink","idVerificationSupportLink","profileLink","timezoneFormatArgs","timeZone","buttonPrefix","buttonLocation","buttonText","buttonVariant","buttonEvent","buttonSuffix","certificateImage","certificate","footnote","message","certHeader","visitEvent","formatMessage","messages","certificateHeaderDownloadable","LMS_BASE_URL","viewCertificateButton","backgroundColor","border","faLinkedinIn","linkedinAddToProfileButton","endDate","certAvailableDate","certificateHeaderNotAvailable","certificateNotAvailableBodyAccessCert","requestCertificateButton","certificateHeaderRequestable","requestCertificateBodyText","certificateHeaderUnverified","verificationPending","verifyIdentityButton","certificateHeaderUpgradable","price","SUPPORT_URL_VERIFIED_CERTIFICATE","textDecoration","verifiedCertificateSupportLink","upgradeButton","upgradeUrl","code","percent","percentage","certificateLocked","accessExpirationDate","formatDate","year","month","day","certificateNotAvailableEndDateBody","congratulationsHeader","SITE_NAME","completedCourseHeader","shareMessage","socialMessage","CelebrationMobile","congratulationsImage","CelebrationDesktop","CheckCircle","maxWidth","map","program","progress","slug","url","uuid","propTypes","intlShape","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedinIn } from '@fortawesome/free-brands-svg-icons';\n\nimport {\n  FormattedDate, FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Alert,\n  breakpoints,\n  Button,\n  Hyperlink,\n  useWindowSize,\n} from '@edx/paragon';\nimport { CheckCircle } from '@edx/paragon/icons';\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport CelebrationMobile from './assets/celebration_456x328.gif';\nimport CelebrationDesktop from './assets/celebration_750x540.gif';\nimport certificate from '../../../generic/assets/edX_certificate.png';\nimport certificateLocked from '../../../generic/assets/edX_locked_certificate.png';\nimport { FormattedPricing } from '../../../generic/upgrade-button';\nimport messages from './messages';\nimport { useModel } from '../../../generic/model-store';\nimport { requestCert } from '../../../course-home/data/thunks';\nimport ProgramCompletion from './ProgramCompletion';\nimport DashboardFootnote from './DashboardFootnote';\nimport UpgradeFootnote from './UpgradeFootnote';\nimport SocialIcons from '../../social-share/SocialIcons';\nimport { logClick, logVisit } from './utils';\nimport { DashboardLink, IdVerificationSupportLink, ProfileLink } from '../../../shared/links';\nimport CourseRecommendations from './CourseRecommendations';\n\nconst LINKEDIN_BLUE = '#2867B2';\n\nfunction CourseCelebration({ intl }) {\n  const wideScreen = useWindowSize().width >= breakpoints.medium.minWidth;\n  const { courseId } = useSelector(state => state.courseware);\n  const dispatch = useDispatch();\n  const {\n    certificateData,\n    end,\n    linkedinAddToProfileUrl,\n    marketingUrl,\n    offer,\n    relatedPrograms,\n    title,\n    verifyIdentityUrl,\n    verificationStatus,\n  } = useModel('coursewareMeta', courseId);\n\n  const {\n    org,\n    verifiedMode,\n    canViewCertificate,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    certStatus,\n    certWebViewUrl,\n    certificateAvailableDate,\n  } = certificateData || {};\n\n  const { administrator } = getAuthenticatedUser();\n\n  const dashboardLink = <DashboardLink />;\n  const idVerificationSupportLink = <IdVerificationSupportLink />;\n  const profileLink = <ProfileLink />;\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  let buttonPrefix = null;\n  let buttonLocation;\n  let buttonText;\n  let buttonVariant = 'outline-primary';\n  let buttonEvent = null;\n  let buttonSuffix = null;\n  let certificateImage = certificate;\n  let footnote;\n  let message;\n  let certHeader;\n  let visitEvent = 'celebration_generic';\n  // These cases are taken from the edx-platform `get_cert_data` function found in lms/courseware/views/views.py\n  switch (certStatus) {\n    case 'downloadable':\n      certHeader = intl.formatMessage(messages.certificateHeaderDownloadable);\n      message = (\n        <p>\n          <FormattedMessage\n            id=\"courseCelebration.certificateBody.available\"\n            defaultMessage=\"\n              Showcase your accomplishment on LinkedIn or your resumé today.\n              You can download your certificate now and access it any time from your\n              {dashboardLink} and {profileLink}.\"\n            values={{ dashboardLink, profileLink }}\n            description=\"Recommending an action for learner when course certificate is available\"\n          />\n        </p>\n      );\n      if (certWebViewUrl) {\n        buttonLocation = `${getConfig().LMS_BASE_URL}${certWebViewUrl}`;\n        buttonText = intl.formatMessage(messages.viewCertificateButton);\n      }\n      if (linkedinAddToProfileUrl) {\n        buttonPrefix = (\n          <Button\n            className=\"mr-3\"\n            href={linkedinAddToProfileUrl}\n            onClick={() => logClick(org, courseId, administrator, 'linkedin_add_to_profile')}\n            style={{ backgroundColor: LINKEDIN_BLUE, border: 'none' }}\n          >\n            <FontAwesomeIcon icon={faLinkedinIn} className=\"mr-3\" />\n            {`${intl.formatMessage(messages.linkedinAddToProfileButton)}`}\n          </Button>\n        );\n      }\n      buttonEvent = 'view_cert';\n      visitEvent = 'celebration_with_cert';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      break;\n    case 'earned_but_not_available': {\n      const endDate = <FormattedDate value={end} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      const certAvailableDate = <FormattedDate value={certificateAvailableDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      certHeader = intl.formatMessage(messages.certificateHeaderNotAvailable);\n      message = (\n        <>\n          <p>\n            <FormattedMessage\n              id=\"courseCelebration.certificateBody.notAvailable.endDate.v2\"\n              defaultMessage=\"This course ends on {endDate}. Final grades and any earned certificates are\n              scheduled to be available after {certAvailableDate}.\"\n              values={{ endDate, certAvailableDate }}\n              description=\"This shown for leaner when they are eligible for certifcate but it't not available yet, it could because leaners just finished the course quickly!\"\n            />\n          </p>\n          <p>\n            {intl.formatMessage(messages.certificateNotAvailableBodyAccessCert)}\n          </p>\n        </>\n      );\n      visitEvent = 'celebration_with_unavailable_cert';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      break;\n    }\n    case 'requesting':\n      // The requesting status needs a different button because it does a POST instead of a GET.\n      // So we don't set buttonLocation and instead define a custom button as a buttonPrefix.\n      buttonEvent = 'request_cert';\n      buttonPrefix = (\n        <Button\n          variant={buttonVariant}\n          onClick={() => {\n            logClick(org, courseId, administrator, buttonEvent);\n            dispatch(requestCert(courseId));\n          }}\n        >\n          {intl.formatMessage(messages.requestCertificateButton)}\n        </Button>\n      );\n      certHeader = intl.formatMessage(messages.certificateHeaderRequestable);\n      message = (<p>{intl.formatMessage(messages.requestCertificateBodyText)}</p>);\n      visitEvent = 'celebration_with_requestable_cert';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      break;\n    case 'unverified':\n      certHeader = intl.formatMessage(messages.certificateHeaderUnverified);\n      visitEvent = 'celebration_unverified';\n      footnote = <DashboardFootnote variant={visitEvent} />;\n      if (verificationStatus === 'pending') {\n        message = (<p>{intl.formatMessage(messages.verificationPending)}</p>);\n      } else {\n        buttonText = intl.formatMessage(messages.verifyIdentityButton);\n        buttonEvent = 'verify_id';\n        buttonLocation = verifyIdentityUrl;\n        // todo: check for idVerificationSupportLink null\n        message = (\n          <p>\n            <FormattedMessage\n              id=\"courseCelebration.certificateBody.unverified\"\n              defaultMessage=\"In order to generate a certificate, you must complete ID verification.\n                {idVerificationSupportLink} now.\"\n              values={{ idVerificationSupportLink }}\n              description=\"Its shown when learner are not verified thus it recommends going over the verification process\"\n            />\n          </p>\n        );\n      }\n      break;\n    case 'audit_passing':\n    case 'honor_passing':\n      if (verifiedMode) {\n        certHeader = intl.formatMessage(messages.certificateHeaderUpgradable);\n        message = (\n          <p>\n            <FormattedMessage\n              id=\"courseCelebration.certificateBody.upgradable\"\n              defaultMessage=\"It’s not too late to upgrade. For {price} you will unlock access to all graded\n                assignments in this course. Upon completion, you will receive a verified certificate which is a\n                valuable credential to improve your job prospects and advance your career, or highlight your\n                certificate in school applications.\"\n              values={{ price: <FormattedPricing inline offer={offer} verifiedMode={verifiedMode} /> }}\n              description=\"Body text when the learner needs to upgrade to earn a certifcate and they have passed the course\"\n            />\n            <br />\n            {getConfig().SUPPORT_URL_VERIFIED_CERTIFICATE && (\n              <Hyperlink\n                className=\"text-gray-700\"\n                style={{ textDecoration: 'underline' }}\n                destination={getConfig().SUPPORT_URL_VERIFIED_CERTIFICATE}\n              >\n                {intl.formatMessage(messages.verifiedCertificateSupportLink)}\n              </Hyperlink>\n            )}\n          </p>\n        );\n        buttonText = intl.formatMessage(messages.upgradeButton);\n        buttonEvent = 'upgrade';\n        buttonLocation = verifiedMode.upgradeUrl;\n        buttonVariant = 'primary';\n        if (offer) {\n          buttonSuffix = (\n            <span className=\"ml-2 align-middle\">\n              <FormattedMessage\n                id=\"courseCelebration.upgradeDiscountCodePrompt\"\n                defaultMessage=\"Use code {code} at checkout for {percent}% off!\"\n                values={{\n                  code: (<b>{offer.code}</b>),\n                  percent: offer.percentage,\n                }}\n                description=\"Shown if learner can use a discount code when they upgrade the course\"\n              />\n            </span>\n          );\n        }\n        certificateImage = certificateLocked;\n        visitEvent = 'celebration_upgrade';\n        if (verifiedMode.accessExpirationDate) {\n          footnote = <UpgradeFootnote deadline={verifiedMode.accessExpirationDate} href={verifiedMode.upgradeUrl} />;\n        } else {\n          footnote = <DashboardFootnote variant={visitEvent} />;\n        }\n      } else {\n        visitEvent = 'celebration_audit_no_upgrade';\n      }\n      break;\n    default:\n      if (!canViewCertificate) {\n        //  We reuse the cert event here. Since this default state is so\n        //  Similar to the earned_not_available state, this event name should be fine\n        //  to cover the same cases.\n        visitEvent = 'celebration_with_unavailable_cert';\n        certHeader = intl.formatMessage(messages.certificateHeaderNotAvailable);\n        const endDate = intl.formatDate(end, {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          ...timezoneFormatArgs,\n        });\n        message = (\n          <>\n            <p>\n              {intl.formatMessage(messages.certificateNotAvailableEndDateBody, { endDate })}\n            </p>\n            <p>\n              {intl.formatMessage(messages.certificateNotAvailableBodyAccessCert)}\n            </p>\n          </>\n        );\n      }\n      break;\n  }\n\n  useEffect(() => logVisit(org, courseId, administrator, visitEvent), [org, courseId, administrator, visitEvent]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${intl.formatMessage(messages.congratulationsHeader)} | ${title} | ${getConfig().SITE_NAME}`}</title>\n      </Helmet>\n      <div className=\"row w-100 mx-0 mb-4 px-5 py-4 border border-light\">\n        <div className=\"col-12 p-0 h2 text-center\">\n          {intl.formatMessage(messages.congratulationsHeader)}\n        </div>\n        <div className=\"col-12 p-0 font-weight-normal lead text-center\">\n          {intl.formatMessage(messages.completedCourseHeader)}\n          {marketingUrl && ` ${intl.formatMessage(messages.shareMessage)}`}\n          <SocialIcons\n            analyticsId=\"edx.ui.lms.course_exit.social_share.clicked\"\n            className=\"mt-2\"\n            courseId={courseId}\n            emailSubject={messages.socialMessage}\n            socialMessage={messages.socialMessage}\n          />\n        </div>\n        <div className=\"col-12 mt-3 mb-4 px-0 px-md-5 text-center\">\n          {!wideScreen && (\n            <img\n              src={CelebrationMobile}\n              alt={`${intl.formatMessage(messages.congratulationsImage)}`}\n              className=\"img-fluid\"\n            />\n          )}\n          {wideScreen && (\n            <img\n              src={CelebrationDesktop}\n              alt={`${intl.formatMessage(messages.congratulationsImage)}`}\n              className=\"img-fluid\"\n              style={{ width: '36rem' }}\n            />\n          )}\n        </div>\n        <div className=\"col-12 px-0 px-md-5\">\n          {certHeader && (\n          <Alert variant=\"success\" icon={CheckCircle}>\n            <div className=\"row w-100 m-0\">\n              <div className=\"col order-1 order-md-0 pl-0 pr-0 pr-md-5\">\n                <div className=\"h4\">{certHeader}</div>\n                {message}\n                <div className=\"mt-2\">\n                  {buttonPrefix}\n                  {buttonLocation && (\n                    <Button\n                      variant={buttonVariant}\n                      href={buttonLocation}\n                      className=\"w-xs-100 w-md-auto\"\n                      onClick={() => logClick(org, courseId, administrator, buttonEvent)}\n                    >\n                      {buttonText}\n                    </Button>\n                  )}\n                  {buttonSuffix}\n                </div>\n              </div>\n              {certStatus !== 'unverified' && (\n                <div className=\"col-12 order-0 col-md-3 order-md-1 w-100 mb-3 p-0 text-center\">\n                  <img\n                    src={certificateImage}\n                    alt={`${intl.formatMessage(messages.certificateImage)}`}\n                    className=\"w-100\"\n                    style={{ maxWidth: '13rem' }}\n                  />\n                </div>\n              )}\n            </div>\n          </Alert>\n          )}\n          {relatedPrograms && relatedPrograms.map(program => (\n            <ProgramCompletion\n              key={program.uuid}\n              progress={program.progress}\n              title={program.title}\n              type={program.slug}\n              url={program.url}\n            />\n          ))}\n          {footnote}\n          <CourseRecommendations variant={visitEvent} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nCourseCelebration.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseCelebration);\n"],"file":"CourseCelebration.js"}