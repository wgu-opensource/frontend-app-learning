{"version":3,"file":"utils.js","names":["_analytics","require","_auth","_messages","_interopRequireDefault","_modelStore","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","COURSE_EXIT_MODES","disabled","celebration","nonPassing","inProgress","exports","CELEBRATION_STATUSES","NON_CERTIFICATE_STATUSES","getCourseExitMode","certificateData","hasScheduledContent","isEnrolled","userHasPassingGrade","courseExitPageIsActive","canImmediatelyViewCertificate","authenticatedUser","getAuthenticatedUser","isCelebratoryStatus","isEligibleForCertificate","certStatus","indexOf","GetCourseExitNavigation","courseId","intl","useModel","canViewCertificate","exitMode","exitActive","exitText","formatMessage","messages","nextButtonComplete","nextButtonEnd","logClick","org","administrator","event","extraProperties","sendTrackEvent","org_key","courserun_key","is_staff","logVisit","variant"],"sources":["../../../../src/courseware/course/course-exit/utils.js"],"sourcesContent":["import { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport messages from './messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst COURSE_EXIT_MODES = {\n  disabled: 0,\n  celebration: 1,\n  nonPassing: 2,\n  inProgress: 3,\n};\n\n// These are taken from the edx-platform `get_cert_data` function found in lms/courseware/views/views.py\nconst CELEBRATION_STATUSES = [\n  'audit_passing',\n  'downloadable',\n  'earned_but_not_available',\n  'honor_passing',\n  'requesting',\n  'unverified',\n];\nconst NON_CERTIFICATE_STATUSES = [ // no certificate will be given, though a valid certificateData block is provided\n  'audit_passing',\n  'honor_passing', // provided when honor is configured to not give a certificate\n];\n\nfunction getCourseExitMode(\n  certificateData,\n  hasScheduledContent,\n  isEnrolled,\n  userHasPassingGrade,\n  courseExitPageIsActive = null,\n  canImmediatelyViewCertificate = false,\n) {\n  const authenticatedUser = getAuthenticatedUser();\n\n  if (courseExitPageIsActive === false || !authenticatedUser || !isEnrolled) {\n    return COURSE_EXIT_MODES.disabled;\n  }\n\n  // Set defaults for our status-calculated variables, used when no certificateData is provided.\n  // This happens when `get_cert_data` in edx-platform returns None, which it does if we are\n  // in a certificate-earning mode, but the certificate is not available (maybe they didn't pass\n  // or course is not set up for certificates or something). Audit users will always have a\n  // certificateData sent over.\n  let isCelebratoryStatus = true;\n  let isEligibleForCertificate = true;\n\n  if (certificateData) {\n    const { certStatus } = certificateData;\n    isCelebratoryStatus = CELEBRATION_STATUSES.indexOf(certStatus) !== -1;\n    isEligibleForCertificate = NON_CERTIFICATE_STATUSES.indexOf(certStatus) === -1;\n  }\n\n  if (hasScheduledContent && !userHasPassingGrade) {\n    return COURSE_EXIT_MODES.inProgress;\n  }\n  if (isEligibleForCertificate && !userHasPassingGrade && canImmediatelyViewCertificate) {\n    return COURSE_EXIT_MODES.nonPassing;\n  }\n  if (isCelebratoryStatus) {\n    return COURSE_EXIT_MODES.celebration;\n  }\n  return COURSE_EXIT_MODES.disabled;\n}\n\n// Returns null in order to render the default navigation text\nfunction GetCourseExitNavigation(courseId, intl) {\n  const {\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n  } = useModel('coursewareMeta', courseId);\n  const { canViewCertificate } = useModel('courseHomeMeta', courseId);\n  const exitMode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n    canViewCertificate,\n  );\n  const exitActive = exitMode !== COURSE_EXIT_MODES.disabled;\n\n  let exitText;\n  switch (exitMode) {\n    case COURSE_EXIT_MODES.celebration:\n      exitText = intl.formatMessage(messages.nextButtonComplete);\n      break;\n    case COURSE_EXIT_MODES.nonPassing:\n      exitText = intl.formatMessage(messages.nextButtonEnd);\n      break;\n    default:\n      exitText = null;\n  }\n  return { exitActive, exitText };\n}\n\n// Meant to be used as part of a button's onClick handler.\n// For convenience, you can pass a falsy event and it will be ignored.\nconst logClick = (org, courseId, administrator, event, extraProperties) => {\n  if (!event) {\n    return;\n  }\n\n  sendTrackEvent(`edx.ui.lms.course_exit.${event}.clicked`, {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n    ...extraProperties,\n  });\n};\n\n// Use like the following to call this only once on initial page load:\n// useEffect(() => logVisit(org, courseId, administrator, variant), [org, courseId, administrator, variant]);\n// For convenience, you can pass a falsy variant and it will be ignored.\nconst logVisit = (org, courseId, administrator, variant) => {\n  if (!variant) {\n    return;\n  }\n\n  sendTrackEvent('edx.ui.lms.course_exit.visited', {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n    variant,\n  });\n};\n\nexport {\n  COURSE_EXIT_MODES,\n  getCourseExitMode,\n  GetCourseExitNavigation,\n  logClick,\n  logVisit,\n};\n"],"mappings":"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"}