{"version":3,"sources":["../../../../src/courseware/course/course-exit/utils.js"],"names":["COURSE_EXIT_MODES","disabled","celebration","nonPassing","inProgress","CELEBRATION_STATUSES","NON_CERTIFICATE_STATUSES","getCourseExitMode","certificateData","hasScheduledContent","isEnrolled","userHasPassingGrade","courseExitPageIsActive","canImmediatelyViewCertificate","authenticatedUser","isCelebratoryStatus","isEligibleForCertificate","certStatus","indexOf","getCourseExitNavigation","courseId","intl","canViewCertificate","exitMode","exitActive","exitText","formatMessage","messages","nextButtonComplete","nextButtonEnd","logClick","org","administrator","event","extraProperties","org_key","courserun_key","is_staff","logVisit","variant"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,iBAAiB,GAAG;AACxBC,EAAAA,QAAQ,EAAE,CADc;AAExBC,EAAAA,WAAW,EAAE,CAFW;AAGxBC,EAAAA,UAAU,EAAE,CAHY;AAIxBC,EAAAA,UAAU,EAAE;AAJY,CAA1B,C,CAOA;;;AACA,MAAMC,oBAAoB,GAAG,CAC3B,eAD2B,EAE3B,cAF2B,EAG3B,0BAH2B,EAI3B,eAJ2B,EAK3B,YAL2B,EAM3B,YAN2B,CAA7B;AAQA,MAAMC,wBAAwB,GAAG,CAAE;AACjC,eAD+B,EAE/B,eAF+B,CAEd;AAFc,CAAjC;;AAKA,SAASC,iBAAT,CACEC,eADF,EAEEC,mBAFF,EAGEC,UAHF,EAIEC,mBAJF,EAOE;AAAA,MAFAC,sBAEA,uEAFyB,IAEzB;AAAA,MADAC,6BACA,uEADgC,KAChC;AACA,QAAMC,iBAAiB,GAAG,iCAA1B;;AAEA,MAAIF,sBAAsB,KAAK,KAA3B,IAAoC,CAACE,iBAArC,IAA0D,CAACJ,UAA/D,EAA2E;AACzE,WAAOV,iBAAiB,CAACC,QAAzB;AACD,GALD,CAOA;AACA;AACA;AACA;AACA;;;AACA,MAAIc,mBAAmB,GAAG,IAA1B;AACA,MAAIC,wBAAwB,GAAG,IAA/B;;AAEA,MAAIR,eAAJ,EAAqB;AACnB,UAAM;AAAES,MAAAA;AAAF,QAAiBT,eAAvB;AACAO,IAAAA,mBAAmB,GAAGV,oBAAoB,CAACa,OAArB,CAA6BD,UAA7B,MAA6C,CAAC,CAApE;AACAD,IAAAA,wBAAwB,GAAGV,wBAAwB,CAACY,OAAzB,CAAiCD,UAAjC,MAAiD,CAAC,CAA7E;AACD;;AAED,MAAIR,mBAAmB,IAAI,CAACE,mBAA5B,EAAiD;AAC/C,WAAOX,iBAAiB,CAACI,UAAzB;AACD;;AACD,MAAIY,wBAAwB,IAAI,CAACL,mBAA7B,IAAoDE,6BAAxD,EAAuF;AACrF,WAAOb,iBAAiB,CAACG,UAAzB;AACD;;AACD,MAAIY,mBAAJ,EAAyB;AACvB,WAAOf,iBAAiB,CAACE,WAAzB;AACD;;AACD,SAAOF,iBAAiB,CAACC,QAAzB;AACD,C,CAED;;;AACA,SAASkB,uBAAT,CAAiCC,QAAjC,EAA2CC,IAA3C,EAAiD;AAC/C,QAAM;AACJb,IAAAA,eADI;AAEJC,IAAAA,mBAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,mBAJI;AAKJC,IAAAA;AALI,MAMF,0BAAS,gBAAT,EAA2BQ,QAA3B,CANJ;AAOA,QAAM;AAAEE,IAAAA;AAAF,MAAyB,0BAAS,gBAAT,EAA2BF,QAA3B,CAA/B;AACA,QAAMG,QAAQ,GAAGhB,iBAAiB,CAChCC,eADgC,EAEhCC,mBAFgC,EAGhCC,UAHgC,EAIhCC,mBAJgC,EAKhCC,sBALgC,EAMhCU,kBANgC,CAAlC;AAQA,QAAME,UAAU,GAAGD,QAAQ,KAAKvB,iBAAiB,CAACC,QAAlD;AAEA,MAAIwB,QAAJ;;AACA,UAAQF,QAAR;AACE,SAAKvB,iBAAiB,CAACE,WAAvB;AACEuB,MAAAA,QAAQ,GAAGJ,IAAI,CAACK,aAAL,CAAmBC,kBAASC,kBAA5B,CAAX;AACA;;AACF,SAAK5B,iBAAiB,CAACG,UAAvB;AACEsB,MAAAA,QAAQ,GAAGJ,IAAI,CAACK,aAAL,CAAmBC,kBAASE,aAA5B,CAAX;AACA;;AACF;AACEJ,MAAAA,QAAQ,GAAG,IAAX;AARJ;;AAUA,SAAO;AAAED,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAP;AACD,C,CAED;AACA;;;AACA,MAAMK,QAAQ,GAAG,CAACC,GAAD,EAAMX,QAAN,EAAgBY,aAAhB,EAA+BC,KAA/B,EAAsCC,eAAtC,KAA0D;AACzE,MAAI,CAACD,KAAL,EAAY;AACV;AACD;;AAED,iCAAgB,0BAAyBA,KAAM,UAA/C;AACEE,IAAAA,OAAO,EAAEJ,GADX;AAEEK,IAAAA,aAAa,EAAEhB,QAFjB;AAGEiB,IAAAA,QAAQ,EAAEL;AAHZ,KAIKE,eAJL;AAMD,CAXD,C,CAaA;AACA;AACA;;;;;AACA,MAAMI,QAAQ,GAAG,CAACP,GAAD,EAAMX,QAAN,EAAgBY,aAAhB,EAA+BO,OAA/B,KAA2C;AAC1D,MAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAED,iCAAe,gCAAf,EAAiD;AAC/CJ,IAAAA,OAAO,EAAEJ,GADsC;AAE/CK,IAAAA,aAAa,EAAEhB,QAFgC;AAG/CiB,IAAAA,QAAQ,EAAEL,aAHqC;AAI/CO,IAAAA;AAJ+C,GAAjD;AAMD,CAXD","sourcesContent":["import { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport messages from './messages';\nimport { useModel } from '../../../generic/model-store';\n\nconst COURSE_EXIT_MODES = {\n  disabled: 0,\n  celebration: 1,\n  nonPassing: 2,\n  inProgress: 3,\n};\n\n// These are taken from the edx-platform `get_cert_data` function found in lms/courseware/views/views.py\nconst CELEBRATION_STATUSES = [\n  'audit_passing',\n  'downloadable',\n  'earned_but_not_available',\n  'honor_passing',\n  'requesting',\n  'unverified',\n];\nconst NON_CERTIFICATE_STATUSES = [ // no certificate will be given, though a valid certificateData block is provided\n  'audit_passing',\n  'honor_passing', // provided when honor is configured to not give a certificate\n];\n\nfunction getCourseExitMode(\n  certificateData,\n  hasScheduledContent,\n  isEnrolled,\n  userHasPassingGrade,\n  courseExitPageIsActive = null,\n  canImmediatelyViewCertificate = false,\n) {\n  const authenticatedUser = getAuthenticatedUser();\n\n  if (courseExitPageIsActive === false || !authenticatedUser || !isEnrolled) {\n    return COURSE_EXIT_MODES.disabled;\n  }\n\n  // Set defaults for our status-calculated variables, used when no certificateData is provided.\n  // This happens when `get_cert_data` in edx-platform returns None, which it does if we are\n  // in a certificate-earning mode, but the certificate is not available (maybe they didn't pass\n  // or course is not set up for certificates or something). Audit users will always have a\n  // certificateData sent over.\n  let isCelebratoryStatus = true;\n  let isEligibleForCertificate = true;\n\n  if (certificateData) {\n    const { certStatus } = certificateData;\n    isCelebratoryStatus = CELEBRATION_STATUSES.indexOf(certStatus) !== -1;\n    isEligibleForCertificate = NON_CERTIFICATE_STATUSES.indexOf(certStatus) === -1;\n  }\n\n  if (hasScheduledContent && !userHasPassingGrade) {\n    return COURSE_EXIT_MODES.inProgress;\n  }\n  if (isEligibleForCertificate && !userHasPassingGrade && canImmediatelyViewCertificate) {\n    return COURSE_EXIT_MODES.nonPassing;\n  }\n  if (isCelebratoryStatus) {\n    return COURSE_EXIT_MODES.celebration;\n  }\n  return COURSE_EXIT_MODES.disabled;\n}\n\n// Returns null in order to render the default navigation text\nfunction getCourseExitNavigation(courseId, intl) {\n  const {\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n  } = useModel('coursewareMeta', courseId);\n  const { canViewCertificate } = useModel('courseHomeMeta', courseId);\n  const exitMode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n    canViewCertificate,\n  );\n  const exitActive = exitMode !== COURSE_EXIT_MODES.disabled;\n\n  let exitText;\n  switch (exitMode) {\n    case COURSE_EXIT_MODES.celebration:\n      exitText = intl.formatMessage(messages.nextButtonComplete);\n      break;\n    case COURSE_EXIT_MODES.nonPassing:\n      exitText = intl.formatMessage(messages.nextButtonEnd);\n      break;\n    default:\n      exitText = null;\n  }\n  return { exitActive, exitText };\n}\n\n// Meant to be used as part of a button's onClick handler.\n// For convenience, you can pass a falsy event and it will be ignored.\nconst logClick = (org, courseId, administrator, event, extraProperties) => {\n  if (!event) {\n    return;\n  }\n\n  sendTrackEvent(`edx.ui.lms.course_exit.${event}.clicked`, {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n    ...extraProperties,\n  });\n};\n\n// Use like the following to call this only once on initial page load:\n// useEffect(() => logVisit(org, courseId, administrator, variant), [org, courseId, administrator, variant]);\n// For convenience, you can pass a falsy variant and it will be ignored.\nconst logVisit = (org, courseId, administrator, variant) => {\n  if (!variant) {\n    return;\n  }\n\n  sendTrackEvent('edx.ui.lms.course_exit.visited', {\n    org_key: org,\n    courserun_key: courseId,\n    is_staff: administrator,\n    variant,\n  });\n};\n\nexport {\n  COURSE_EXIT_MODES,\n  getCourseExitMode,\n  getCourseExitNavigation,\n  logClick,\n  logVisit,\n};\n"],"file":"utils.js"}