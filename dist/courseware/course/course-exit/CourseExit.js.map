{"version":3,"sources":["../../../../src/courseware/course/course-exit/CourseExit.jsx"],"names":["CourseExit","intl","courseId","state","courseware","certificateData","courseExitPageIsActive","courseGoals","enrollmentMode","hasScheduledContent","isEnrolled","userHasPassingGrade","isMasquerading","canViewCertificate","mode","body","COURSE_EXIT_MODES","nonPassing","inProgress","celebration","LMS_BASE_URL","formatMessage","messages","viewCoursesButton","propTypes","intlShape","isRequired"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,SAASA,UAAT,OAA8B;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAe,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAA3B,CAArB;AACA,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,mBALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQF,0BAAS,gBAAT,EAA2BT,QAA3B,CARJ;AAUA,QAAM;AACJU,IAAAA,cADI;AAEJC,IAAAA;AAFI,MAGF,0BAAS,gBAAT,EAA2BX,QAA3B,CAHJ;AAKA,QAAMY,IAAI,GAAG,8BACXT,eADW,EAEXI,mBAFW,EAGXC,UAHW,EAIXC,mBAJW,EAKXL,sBALW,EAMXO,kBANW,CAAb,CAjB4B,CA0B5B;AACA;AACA;;AACA,MAAIN,WAAW,IAAIC,cAAc,KAAK,OAAlC,IAA6C,CAACI,cAAlD,EAAkE;AAChE,0BAAU,MAAM;AACd,gDAA6BV,QAA7B;AACD,KAFD,EAEG,EAFH;AAGD;;AAED,MAAIa,IAAI,GAAG,IAAX;;AACA,MAAID,IAAI,KAAKE,yBAAkBC,UAA/B,EAA2C;AACzCF,IAAAA,IAAI,gBAAI,qBAAC,yBAAD,KAAR;AACD,GAFD,MAEO,IAAID,IAAI,KAAKE,yBAAkBE,UAA/B,EAA2C;AAChDH,IAAAA,IAAI,gBAAI,qBAAC,yBAAD,KAAR;AACD,GAFM,MAEA,IAAID,IAAI,KAAKE,yBAAkBG,WAA/B,EAA4C;AACjDJ,IAAAA,IAAI,gBAAI,qBAAC,0BAAD,KAAR;AACD,GAFM,MAEA;AACL,wBAAQ,qBAAC,wBAAD;AAAU,MAAA,EAAE,EAAG,WAAUb,QAAS;AAAlC,MAAR;AACD;;AAED,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,yCAAf;AAAA,6BACE,qBAAC,eAAD;AACE,QAAA,OAAO,EAAC,iBADV;AAEE,QAAA,IAAI,EAAG,GAAE,mCAAYkB,YAAa,YAFpC;AAAA,kBAIGnB,IAAI,CAACoB,aAAL,CAAmBC,kBAASC,iBAA5B;AAJH;AADF,MADF,EASGR,IATH;AAAA,IADF;AAaD;;AAEDf,UAAU,CAACwB,SAAX,GAAuB;AACrBvB,EAAAA,IAAI,EAAEwB,gBAAUC;AADK,CAAvB;;eAIe,sBAAW1B,UAAX,C","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport CourseCelebration from './CourseCelebration';\nimport CourseInProgress from './CourseInProgress';\nimport CourseNonPassing from './CourseNonPassing';\nimport { COURSE_EXIT_MODES, getCourseExitMode } from './utils';\nimport messages from './messages';\nimport { unsubscribeFromGoalReminders } from './data/thunks';\n\nimport { useModel } from '../../../generic/model-store';\n\nfunction CourseExit({ intl }) {\n  const { courseId } = useSelector(state => state.courseware);\n  const {\n    certificateData,\n    courseExitPageIsActive,\n    courseGoals,\n    enrollmentMode,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n  } = useModel('coursewareMeta', courseId);\n\n  const {\n    isMasquerading,\n    canViewCertificate,\n  } = useModel('courseHomeMeta', courseId);\n\n  const mode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    courseExitPageIsActive,\n    canViewCertificate,\n  );\n\n  // Audit users cannot fully complete a course, so we will\n  // unsubscribe them from goal reminders once they reach the course exit page\n  // to avoid spamming them with goal reminder emails\n  if (courseGoals && enrollmentMode === 'audit' && !isMasquerading) {\n    useEffect(() => {\n      unsubscribeFromGoalReminders(courseId);\n    }, []);\n  }\n\n  let body = null;\n  if (mode === COURSE_EXIT_MODES.nonPassing) {\n    body = (<CourseNonPassing />);\n  } else if (mode === COURSE_EXIT_MODES.inProgress) {\n    body = (<CourseInProgress />);\n  } else if (mode === COURSE_EXIT_MODES.celebration) {\n    body = (<CourseCelebration />);\n  } else {\n    return (<Redirect to={`/course/${courseId}`} />);\n  }\n\n  return (\n    <>\n      <div className=\"row w-100 mt-2 mb-4 justify-content-end\">\n        <Button\n          variant=\"outline-primary\"\n          href={`${getConfig().LMS_BASE_URL}/dashboard`}\n        >\n          {intl.formatMessage(messages.viewCoursesButton)}\n        </Button>\n      </div>\n      {body}\n    </>\n  );\n}\n\nCourseExit.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseExit);\n"],"file":"CourseExit.js"}