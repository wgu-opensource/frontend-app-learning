{"version":3,"sources":["../../../../../src/courseware/course/sequence/sequence-navigation/SequenceNavigation.jsx"],"names":["SequenceNavigation","intl","unitId","sequenceId","className","onNavigate","nextSequenceHandler","previousSequenceHandler","goToCourseExitPage","mmp2p","sequence","isFirstUnit","isLastUnit","courseId","sequenceStatus","state","courseware","isLocked","LOADED","gatedContent","undefined","gated","shouldDisplayNotificationTriggerInSequence","width","breakpoints","small","minWidth","renderUnitButtons","unitIds","length","flexBasis","borderBottom","showCompletion","renderNextButton","exitActive","exitText","buttonOnClick","buttonText","formatMessage","messages","nextButton","disabled","nextArrow","ChevronLeft","ChevronRight","prevArrow","previousButton","isEnabled","propTypes","intlShape","isRequired","PropTypes","string","func","shape","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { breakpoints, Button, useWindowSize } from '@edx/paragon';\nimport { ChevronLeft, ChevronRight } from '@edx/paragon/icons';\nimport classNames from 'classnames';\nimport {\n  injectIntl,\n  intlShape,\n  isRtl,\n  getLocale,\n} from '@edx/frontend-platform/i18n';\n\nimport { useSelector } from 'react-redux';\nimport { getCourseExitNavigation } from '../../course-exit';\nimport UnitButton from './UnitButton';\nimport SequenceNavigationTabs from './SequenceNavigationTabs';\nimport { useSequenceNavigationMetadata } from './hooks';\nimport { useModel } from '../../../../generic/model-store';\nimport { LOADED } from '../../../data/slice';\n\nimport messages from './messages';\n/** [MM-P2P] Experiment */\nimport { MMP2PFlyoverTriggerMobile } from '../../../../experiments/mm-p2p';\n\nfunction SequenceNavigation({\n  intl,\n  unitId,\n  sequenceId,\n  className,\n  onNavigate,\n  nextSequenceHandler,\n  previousSequenceHandler,\n  goToCourseExitPage,\n  mmp2p,\n}) {\n  const sequence = useModel('sequences', sequenceId);\n  const { isFirstUnit, isLastUnit } = useSequenceNavigationMetadata(sequenceId, unitId);\n  const {\n    courseId,\n    sequenceStatus,\n  } = useSelector(state => state.courseware);\n  const isLocked = sequenceStatus === LOADED ? (\n    sequence.gatedContent !== undefined && sequence.gatedContent.gated\n  ) : undefined;\n\n  const shouldDisplayNotificationTriggerInSequence = useWindowSize().width < breakpoints.small.minWidth;\n\n  const renderUnitButtons = () => {\n    if (isLocked) {\n      return (\n        <UnitButton unitId={unitId} title=\"\" contentType=\"lock\" isActive onClick={() => {}} />\n      );\n    }\n    if (sequence.unitIds.length === 0 || unitId === null) {\n      return (\n        <div style={{ flexBasis: '100%', minWidth: 0, borderBottom: 'solid 1px #EAEAEA' }} />\n      );\n    }\n    return (\n      <SequenceNavigationTabs\n        unitIds={sequence.unitIds}\n        unitId={unitId}\n        showCompletion={sequence.showCompletion}\n        onNavigate={onNavigate}\n      />\n    );\n  };\n\n  const renderNextButton = () => {\n    const { exitActive, exitText } = getCourseExitNavigation(courseId, intl);\n    const buttonOnClick = isLastUnit ? goToCourseExitPage : nextSequenceHandler;\n    const buttonText = (isLastUnit && exitText) ? exitText : intl.formatMessage(messages.nextButton);\n    const disabled = isLastUnit && !exitActive;\n    const nextArrow = isRtl(getLocale()) ? ChevronLeft : ChevronRight;\n\n    return (\n      <Button variant=\"link\" className=\"next-btn\" onClick={buttonOnClick} disabled={disabled} iconAfter={nextArrow}>\n        {shouldDisplayNotificationTriggerInSequence ? null : buttonText}\n      </Button>\n    );\n  };\n\n  const prevArrow = isRtl(getLocale()) ? ChevronRight : ChevronLeft;\n\n  return sequenceStatus === LOADED && (\n    <nav id=\"courseware-sequenceNavigation\" className={classNames('sequence-navigation', className)} style={{ width: shouldDisplayNotificationTriggerInSequence ? '90%' : null }}>\n      <Button variant=\"link\" className=\"previous-btn\" onClick={previousSequenceHandler} disabled={isFirstUnit} iconBefore={prevArrow}>\n        {shouldDisplayNotificationTriggerInSequence ? null : intl.formatMessage(messages.previousButton)}\n      </Button>\n      {renderUnitButtons()}\n      {renderNextButton()}\n\n      {/** [MM-P2P] Experiment */}\n      { mmp2p.state.isEnabled && <MMP2PFlyoverTriggerMobile options={mmp2p} /> }\n    </nav>\n  );\n}\n\nSequenceNavigation.propTypes = {\n  intl: intlShape.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n  className: PropTypes.string,\n  onNavigate: PropTypes.func.isRequired,\n  nextSequenceHandler: PropTypes.func.isRequired,\n  previousSequenceHandler: PropTypes.func.isRequired,\n  goToCourseExitPage: PropTypes.func.isRequired,\n  /** [MM-P2P] Experiment */\n  mmp2p: PropTypes.shape({\n    state: PropTypes.shape({\n      isEnabled: PropTypes.bool.isRequired,\n    }),\n  }),\n};\n\nSequenceNavigation.defaultProps = {\n  className: null,\n  unitId: null,\n\n  /** [MM-P2P] Experiment */\n  mmp2p: {\n    state: { isEnabled: false },\n  },\n};\n\nexport default injectIntl(SequenceNavigation);\n"],"file":"SequenceNavigation.js"}