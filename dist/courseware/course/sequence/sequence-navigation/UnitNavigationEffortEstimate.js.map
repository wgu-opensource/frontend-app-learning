{"version":3,"file":"UnitNavigationEffortEstimate.js","names":["_react","_interopRequireDefault","require","_propTypes","_reactRedux","_i18n","_effortEstimate","_data","_modelStore","_messages","_jsxRuntime","obj","__esModule","default","UnitNavigationEffortEstimate","_ref","children","intl","sequenceId","unitId","sequenceIds","useSelector","sequenceIdsSelector","sequenceIndex","indexOf","nextSequenceId","length","sequence","useModel","nextSequence","Object","keys","isLastUnitInSequence","unitIds","effortActivities","effortTime","jsxs","className","formatMessage","messages","nextUpButton","title","jsx","block","propTypes","PropTypes","node","intlShape","isRequired","string","defaultProps","_default","injectIntl","exports"],"sources":["../../../../../src/courseware/course/sequence/sequence-navigation/UnitNavigationEffortEstimate.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport EffortEstimate from '../../../../shared/effort-estimate';\nimport { sequenceIdsSelector } from '../../../data';\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from './messages';\n\n// This component exists to peek ahead at the next sequence and grab its estimated effort.\n// If we should be showing the next sequence's effort, we display the title and effort instead of \"Next\".\n\n/**\n * Note: this component is basically ignored and just acts as a pass-through to children components right now because\n * effort estimation is no longer attached to the sequence model. It used to be attached, via the LMS blocks API and\n * its block transformers. But as part of the effort to remove reliance on modulestore blocks on the LMS side, we\n * stopped calling that API and we lost effort estimation in the deal.\n *\n * See https://openedx.atlassian.net/browse/AA-930 for the initiative to refactor Effort Estimation to avoid the\n * modulestore, which would allow us to revive the usefulness of this component again.\n */\n\nconst UnitNavigationEffortEstimate = ({\n  children,\n  intl,\n  sequenceId,\n  unitId,\n}) => {\n  const sequenceIds = useSelector(sequenceIdsSelector);\n  const sequenceIndex = sequenceIds.indexOf(sequenceId);\n  const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n  const sequence = useModel('sequences', sequenceId);\n  const nextSequence = useModel('sequences', nextSequenceId);\n\n  if (!sequence || Object.keys(sequence).length === 0 || !nextSequence || Object.keys(nextSequence).length === 0) {\n    return children;\n  }\n\n  const isLastUnitInSequence = sequence.unitIds.indexOf(unitId) === sequence.unitIds.length - 1;\n  if (!isLastUnitInSequence) {\n    return children;\n  }\n\n  // If we don't have info to show for the next sequence, just bail\n  if (!nextSequence.effortActivities && !nextSequence.effortTime) {\n    return children;\n  }\n\n  // Note: we don't use `children` here - we replace it with the next sequence's title.\n  return (\n    <div className=\"d-inline-block text-wrap\">\n      {intl.formatMessage(messages.nextUpButton, { title: nextSequence.title })}\n      <EffortEstimate className=\"d-block mt-1\" block={nextSequence} />\n    </div>\n  );\n};\n\nUnitNavigationEffortEstimate.propTypes = {\n  children: PropTypes.node,\n  intl: intlShape.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n};\n\nUnitNavigationEffortEstimate.defaultProps = {\n  children: null,\n  unitId: null,\n};\n\nexport default injectIntl(UnitNavigationEffortEstimate);\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AACA,IAAAG,KAAA,GAAAH,OAAA;AAEA,IAAAI,eAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,KAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AAEA,IAAAO,SAAA,GAAAR,sBAAA,CAAAC,OAAA;AAAkC,IAAAQ,WAAA,GAAAR,OAAA;AAAA,SAAAD,uBAAAU,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAMG,4BAA4B,GAAGC,IAAA,IAK/B;EAAA,IALgC;IACpCC,QAAQ;IACRC,IAAI;IACJC,UAAU;IACVC;EACF,CAAC,GAAAJ,IAAA;EACC,MAAMK,WAAW,GAAG,IAAAC,uBAAW,EAACC,yBAAmB,CAAC;EACpD,MAAMC,aAAa,GAAGH,WAAW,CAACI,OAAO,CAACN,UAAU,CAAC;EACrD,MAAMO,cAAc,GAAGF,aAAa,GAAGH,WAAW,CAACM,MAAM,GAAG,CAAC,GAAGN,WAAW,CAACG,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI;EACrG,MAAMI,QAAQ,GAAG,IAAAC,oBAAQ,EAAC,WAAW,EAAEV,UAAU,CAAC;EAClD,MAAMW,YAAY,GAAG,IAAAD,oBAAQ,EAAC,WAAW,EAAEH,cAAc,CAAC;EAE1D,IAAI,CAACE,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACD,MAAM,KAAK,CAAC,IAAI,CAACG,YAAY,IAAIC,MAAM,CAACC,IAAI,CAACF,YAAY,CAAC,CAACH,MAAM,KAAK,CAAC,EAAE;IAC9G,OAAOV,QAAQ;EACjB;EAEA,MAAMgB,oBAAoB,GAAGL,QAAQ,CAACM,OAAO,CAACT,OAAO,CAACL,MAAM,CAAC,KAAKQ,QAAQ,CAACM,OAAO,CAACP,MAAM,GAAG,CAAC;EAC7F,IAAI,CAACM,oBAAoB,EAAE;IACzB,OAAOhB,QAAQ;EACjB;;EAEA;EACA,IAAI,CAACa,YAAY,CAACK,gBAAgB,IAAI,CAACL,YAAY,CAACM,UAAU,EAAE;IAC9D,OAAOnB,QAAQ;EACjB;;EAEA;EACA,oBACE,IAAAN,WAAA,CAAA0B,IAAA;IAAKC,SAAS,EAAC,0BAA0B;IAAArB,QAAA,GACtCC,IAAI,CAACqB,aAAa,CAACC,iBAAQ,CAACC,YAAY,EAAE;MAAEC,KAAK,EAAEZ,YAAY,CAACY;IAAM,CAAC,CAAC,eACzE,IAAA/B,WAAA,CAAAgC,GAAA,EAACpC,eAAA,CAAAO,OAAc;MAACwB,SAAS,EAAC,cAAc;MAACM,KAAK,EAAEd;IAAa,CAAE,CAAC;EAAA,CAC7D,CAAC;AAEV,CAAC;AAEDf,4BAA4B,CAAC8B,SAAS,GAAG;EACvC5B,QAAQ,EAAE6B,kBAAS,CAACC,IAAI;EACxB7B,IAAI,EAAE8B,eAAS,CAACC,UAAU;EAC1B9B,UAAU,EAAE2B,kBAAS,CAACI,MAAM,CAACD,UAAU;EACvC7B,MAAM,EAAE0B,kBAAS,CAACI;AACpB,CAAC;AAEDnC,4BAA4B,CAACoC,YAAY,GAAG;EAC1ClC,QAAQ,EAAE,IAAI;EACdG,MAAM,EAAE;AACV,CAAC;AAAC,IAAAgC,QAAA,GAEa,IAAAC,gBAAU,EAACtC,4BAA4B,CAAC;AAAAuC,OAAA,CAAAxC,OAAA,GAAAsC,QAAA"}