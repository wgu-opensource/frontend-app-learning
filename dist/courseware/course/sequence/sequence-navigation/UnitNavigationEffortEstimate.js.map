{"version":3,"sources":["../../../../../src/courseware/course/sequence/sequence-navigation/UnitNavigationEffortEstimate.jsx"],"names":["UnitNavigationEffortEstimate","children","intl","sequenceId","unitId","sequenceIds","sequenceIdsSelector","sequenceIndex","indexOf","nextSequenceId","length","sequence","nextSequence","Object","keys","isLastUnitInSequence","unitIds","effortActivities","effortTime","formatMessage","messages","nextUpButton","title","propTypes","PropTypes","node","intlShape","isRequired","string","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;;;;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,4BAAT,OAKG;AAAA,MALmC;AACpCC,IAAAA,QADoC;AAEpCC,IAAAA,IAFoC;AAGpCC,IAAAA,UAHoC;AAIpCC,IAAAA;AAJoC,GAKnC;AACD,QAAMC,WAAW,GAAG,6BAAYC,yBAAZ,CAApB;AACA,QAAMC,aAAa,GAAGF,WAAW,CAACG,OAAZ,CAAoBL,UAApB,CAAtB;AACA,QAAMM,cAAc,GAAGF,aAAa,GAAGF,WAAW,CAACK,MAAZ,GAAqB,CAArC,GAAyCL,WAAW,CAACE,aAAa,GAAG,CAAjB,CAApD,GAA0E,IAAjG;AACA,QAAMI,QAAQ,GAAG,0BAAS,WAAT,EAAsBR,UAAtB,CAAjB;AACA,QAAMS,YAAY,GAAG,0BAAS,WAAT,EAAsBH,cAAtB,CAArB;;AAEA,MAAI,CAACE,QAAD,IAAaE,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBD,MAAtB,KAAiC,CAA9C,IAAmD,CAACE,YAApD,IAAoEC,MAAM,CAACC,IAAP,CAAYF,YAAZ,EAA0BF,MAA1B,KAAqC,CAA7G,EAAgH;AAC9G,WAAOT,QAAP;AACD;;AAED,QAAMc,oBAAoB,GAAGJ,QAAQ,CAACK,OAAT,CAAiBR,OAAjB,CAAyBJ,MAAzB,MAAqCO,QAAQ,CAACK,OAAT,CAAiBN,MAAjB,GAA0B,CAA5F;;AACA,MAAI,CAACK,oBAAL,EAA2B;AACzB,WAAOd,QAAP;AACD,GAdA,CAgBD;;;AACA,MAAI,CAACW,YAAY,CAACK,gBAAd,IAAkC,CAACL,YAAY,CAACM,UAApD,EAAgE;AAC9D,WAAOjB,QAAP;AACD,GAnBA,CAqBD;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA,eACGC,IAAI,CAACiB,aAAL,CAAmBC,kBAASC,YAA5B,EAA0C;AAAEC,MAAAA,KAAK,EAAEV,YAAY,CAACU;AAAtB,KAA1C,CADH,eAEE,qBAAC,uBAAD;AAAgB,MAAA,SAAS,EAAC,cAA1B;AAAyC,MAAA,KAAK,EAAEV;AAAhD,MAFF;AAAA,IADF;AAMD;;AAEDZ,4BAA4B,CAACuB,SAA7B,GAAyC;AACvCtB,EAAAA,QAAQ,EAAEuB,mBAAUC,IADmB;AAEvCvB,EAAAA,IAAI,EAAEwB,gBAAUC,UAFuB;AAGvCxB,EAAAA,UAAU,EAAEqB,mBAAUI,MAAV,CAAiBD,UAHU;AAIvCvB,EAAAA,MAAM,EAAEoB,mBAAUI;AAJqB,CAAzC;AAOA5B,4BAA4B,CAAC6B,YAA7B,GAA4C;AAC1C5B,EAAAA,QAAQ,EAAE,IADgC;AAE1CG,EAAAA,MAAM,EAAE;AAFkC,CAA5C;;eAKe,sBAAWJ,4BAAX,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport EffortEstimate from '../../../../shared/effort-estimate';\nimport { sequenceIdsSelector } from '../../../data';\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from './messages';\n\n// This component exists to peek ahead at the next sequence and grab its estimated effort.\n// If we should be showing the next sequence's effort, we display the title and effort instead of \"Next\".\n\n/**\n * Note: this component is basically ignored and just acts as a pass-through to children components right now because\n * effort estimation is no longer attached to the sequence model. It used to be attached, via the LMS blocks API and\n * its block transformers. But as part of the effort to remove reliance on modulestore blocks on the LMS side, we\n * stopped calling that API and we lost effort estimation in the deal.\n *\n * See https://openedx.atlassian.net/browse/AA-930 for the initiative to refactor Effort Estimation to avoid the\n * modulestore, which would allow us to revive the usefulness of this component again.\n */\n\nfunction UnitNavigationEffortEstimate({\n  children,\n  intl,\n  sequenceId,\n  unitId,\n}) {\n  const sequenceIds = useSelector(sequenceIdsSelector);\n  const sequenceIndex = sequenceIds.indexOf(sequenceId);\n  const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n  const sequence = useModel('sequences', sequenceId);\n  const nextSequence = useModel('sequences', nextSequenceId);\n\n  if (!sequence || Object.keys(sequence).length === 0 || !nextSequence || Object.keys(nextSequence).length === 0) {\n    return children;\n  }\n\n  const isLastUnitInSequence = sequence.unitIds.indexOf(unitId) === sequence.unitIds.length - 1;\n  if (!isLastUnitInSequence) {\n    return children;\n  }\n\n  // If we don't have info to show for the next sequence, just bail\n  if (!nextSequence.effortActivities && !nextSequence.effortTime) {\n    return children;\n  }\n\n  // Note: we don't use `children` here - we replace it with the next sequence's title.\n  return (\n    <div className=\"d-inline-block text-wrap\">\n      {intl.formatMessage(messages.nextUpButton, { title: nextSequence.title })}\n      <EffortEstimate className=\"d-block mt-1\" block={nextSequence} />\n    </div>\n  );\n}\n\nUnitNavigationEffortEstimate.propTypes = {\n  children: PropTypes.node,\n  intl: intlShape.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n};\n\nUnitNavigationEffortEstimate.defaultProps = {\n  children: null,\n  unitId: null,\n};\n\nexport default injectIntl(UnitNavigationEffortEstimate);\n"],"file":"UnitNavigationEffortEstimate.js"}