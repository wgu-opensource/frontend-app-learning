{"version":3,"sources":["../../../../src/courseware/course/sequence/Sequence.jsx"],"names":["Sequence","unitId","sequenceId","courseId","unitNavigationHandler","nextSequenceHandler","previousSequenceHandler","intl","mmp2p","course","isStaff","originalUserIsStaff","sequence","unit","sequenceStatus","state","courseware","sequenceMightBeUnit","shouldDisplayNotificationTriggerInSequence","width","breakpoints","small","minWidth","handleNext","nextIndex","unitIds","indexOf","length","newUnitId","handleNavigate","handlePrevious","previousIndex","destinationUnitId","logEvent","eventName","widgetPlacement","targetUnitId","currentIndex","payload","current_tab","id","tab_count","widget_placement","targetIndex","target_tab","receiveMessage","event","type","data","global","location","reload","addEventListener","unitHasLoaded","setUnitHasLoaded","handleUnitLoaded","loading","formatMessage","messages","noContent","loadingSequence","isHiddenAfterDue","gated","gatedContent","undefined","goToCourseExitPage","history","push","defaultContent","isEnabled","flyover","isVisible","canAccessProctoredExams","license","maxWidth","loadFailure","propTypes","PropTypes","string","isRequired","func","intlShape","shape","bool","meta","showLock","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, {\n  useEffect, useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {\n  sendTrackEvent,\n  sendTrackingLogEvent,\n} from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { useSelector } from 'react-redux';\nimport { history } from '@edx/frontend-platform';\nimport SequenceExamWrapper from '@edx/frontend-lib-special-exams';\nimport { breakpoints, useWindowSize } from '@edx/paragon';\n\nimport PageLoading from '../../../generic/PageLoading';\nimport { useModel } from '../../../generic/model-store';\nimport { useSequenceBannerTextAlert, useSequenceEntranceExamAlert } from '../../../alerts/sequence-alerts/hooks';\n\nimport CourseLicense from '../course-license';\nimport Sidebar from '../sidebar/Sidebar';\nimport SidebarTriggers from '../sidebar/SidebarTriggers';\nimport messages from './messages';\nimport HiddenAfterDue from './hidden-after-due';\nimport { SequenceNavigation, UnitNavigation } from './sequence-navigation';\nimport SequenceContent from './SequenceContent';\n\n/** [MM-P2P] Experiment */\nimport { isMobile } from '../../../experiments/mm-p2p/utils';\nimport { MMP2PFlyover, MMP2PFlyoverMobile } from '../../../experiments/mm-p2p';\n\nfunction Sequence({\n  unitId,\n  sequenceId,\n  courseId,\n  unitNavigationHandler,\n  nextSequenceHandler,\n  previousSequenceHandler,\n  intl,\n  mmp2p,\n}) {\n  const course = useModel('coursewareMeta', courseId);\n  const {\n    isStaff,\n    originalUserIsStaff,\n  } = useModel('courseHomeMeta', courseId);\n  const sequence = useModel('sequences', sequenceId);\n  const unit = useModel('units', unitId);\n  const sequenceStatus = useSelector(state => state.courseware.sequenceStatus);\n  const sequenceMightBeUnit = useSelector(state => state.courseware.sequenceMightBeUnit);\n  const shouldDisplayNotificationTriggerInSequence = useWindowSize().width < breakpoints.small.minWidth;\n\n  const handleNext = () => {\n    const nextIndex = sequence.unitIds.indexOf(unitId) + 1;\n    if (nextIndex < sequence.unitIds.length) {\n      const newUnitId = sequence.unitIds[nextIndex];\n      handleNavigate(newUnitId);\n    } else {\n      nextSequenceHandler();\n    }\n  };\n\n  const handlePrevious = () => {\n    const previousIndex = sequence.unitIds.indexOf(unitId) - 1;\n    if (previousIndex >= 0) {\n      const newUnitId = sequence.unitIds[previousIndex];\n      handleNavigate(newUnitId);\n    } else {\n      previousSequenceHandler();\n    }\n  };\n\n  const handleNavigate = (destinationUnitId) => {\n    unitNavigationHandler(destinationUnitId);\n  };\n\n  const logEvent = (eventName, widgetPlacement, targetUnitId) => {\n    // Note: tabs are tracked with a 1-indexed position\n    // as opposed to a 0-index used throughout this MFE\n    const currentIndex = sequence.unitIds.length > 0 ? sequence.unitIds.indexOf(unitId) : 0;\n    const payload = {\n      current_tab: currentIndex + 1,\n      id: unitId,\n      tab_count: sequence.unitIds.length,\n      widget_placement: widgetPlacement,\n    };\n    if (targetUnitId) {\n      const targetIndex = sequence.unitIds.indexOf(targetUnitId);\n      payload.target_tab = targetIndex + 1;\n    }\n    sendTrackEvent(eventName, payload);\n    sendTrackingLogEvent(eventName, payload);\n  };\n\n  useSequenceBannerTextAlert(sequenceId);\n  useSequenceEntranceExamAlert(courseId, sequenceId, intl);\n\n  useEffect(() => {\n    function receiveMessage(event) {\n      const { type } = event.data;\n      if (type === 'entranceExam.passed') {\n        // I know this seems (is) intense. It is implemented this way since we need to refetch the underlying\n        // course blocks that were originally hidden because the Entrance Exam was not passed.\n        global.location.reload();\n      }\n    }\n    global.addEventListener('message', receiveMessage);\n  }, []);\n\n  const [unitHasLoaded, setUnitHasLoaded] = useState(false);\n  const handleUnitLoaded = () => {\n    setUnitHasLoaded(true);\n  };\n\n  // We want hide the unit navigation if we're in the middle of navigating to another unit\n  // but not if other things about the unit change, like the bookmark status.\n  // The array property of this useEffect ensures that we only hide the unit navigation\n  // while navigating to another unit.\n  useEffect(() => {\n    if (unit) {\n      setUnitHasLoaded(false);\n    }\n  }, [(unit || {}).id]);\n\n  // If sequence might be a unit, we want to keep showing a spinner - the courseware container will redirect us when\n  // it knows which sequence to actually go to.\n  const loading = sequenceStatus === 'loading' || (sequenceStatus === 'failed' && sequenceMightBeUnit);\n  if (loading) {\n    if (!sequenceId) {\n      return (<div> {intl.formatMessage(messages.noContent)} </div>);\n    }\n    return (\n      <PageLoading\n        srMessage={intl.formatMessage(messages.loadingSequence)}\n      />\n    );\n  }\n\n  if (sequenceStatus === 'loaded' && sequence.isHiddenAfterDue) {\n    // Shouldn't even be here - these sequences are normally stripped out of the navigation.\n    // But we are here, so render a notice instead of the normal content.\n    return <HiddenAfterDue courseId={courseId} />;\n  }\n\n  const gated = sequence && sequence.gatedContent !== undefined && sequence.gatedContent.gated;\n  const goToCourseExitPage = () => {\n    history.push(`/course/${courseId}/course-end`);\n  };\n\n  const defaultContent = (\n    <div className=\"sequence-container d-inline-flex flex-row\">\n      <div className={classNames('sequence w-100', { 'position-relative': shouldDisplayNotificationTriggerInSequence })}>\n        <SequenceNavigation\n          sequenceId={sequenceId}\n          unitId={unitId}\n          className=\"mb-4\"\n\n          /** [MM-P2P] Experiment */\n          mmp2p={mmp2p}\n\n          nextSequenceHandler={() => {\n            logEvent('edx.ui.lms.sequence.next_selected', 'top');\n            handleNext();\n          }}\n          onNavigate={(destinationUnitId) => {\n            logEvent('edx.ui.lms.sequence.tab_selected', 'top', destinationUnitId);\n            handleNavigate(destinationUnitId);\n          }}\n          previousSequenceHandler={() => {\n            logEvent('edx.ui.lms.sequence.previous_selected', 'top');\n            handlePrevious();\n          }}\n          goToCourseExitPage={() => goToCourseExitPage()}\n        />\n        {shouldDisplayNotificationTriggerInSequence && <SidebarTriggers />}\n\n        <div className=\"unit-container flex-grow-1\">\n          <SequenceContent\n            courseId={courseId}\n            gated={gated}\n            sequenceId={sequenceId}\n            unitId={unitId}\n            unitLoadedHandler={handleUnitLoaded}\n            /** [MM-P2P] Experiment */\n            mmp2p={mmp2p}\n          />\n          {unitHasLoaded && (\n          <UnitNavigation\n            sequenceId={sequenceId}\n            unitId={unitId}\n            onClickPrevious={() => {\n              logEvent('edx.ui.lms.sequence.previous_selected', 'bottom');\n              handlePrevious();\n            }}\n            onClickNext={() => {\n              logEvent('edx.ui.lms.sequence.next_selected', 'bottom');\n              handleNext();\n            }}\n            goToCourseExitPage={() => goToCourseExitPage()}\n          />\n          )}\n        </div>\n      </div>\n      <Sidebar />\n\n      {/** [MM-P2P] Experiment */}\n      {(mmp2p.state.isEnabled && mmp2p.flyover.isVisible) && (\n        isMobile()\n          ? <MMP2PFlyoverMobile options={mmp2p} />\n          : <MMP2PFlyover options={mmp2p} />\n      )}\n    </div>\n  );\n\n  if (sequenceStatus === 'loaded') {\n    return (\n      <div>\n        <SequenceExamWrapper\n          sequence={sequence}\n          courseId={courseId}\n          isStaff={isStaff}\n          originalUserIsStaff={originalUserIsStaff}\n          canAccessProctoredExams={course.canAccessProctoredExams}\n        >\n          {defaultContent}\n        </SequenceExamWrapper>\n        <CourseLicense license={course.license || undefined} />\n      </div>\n    );\n  }\n\n  // sequence status 'failed' and any other unexpected sequence status.\n  return (\n    <p className=\"text-center py-5 mx-auto\" style={{ maxWidth: '30em' }}>\n      {intl.formatMessage(messages.loadFailure)}\n    </p>\n  );\n}\n\nSequence.propTypes = {\n  unitId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  courseId: PropTypes.string.isRequired,\n  unitNavigationHandler: PropTypes.func.isRequired,\n  nextSequenceHandler: PropTypes.func.isRequired,\n  previousSequenceHandler: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n\n  /** [MM-P2P] Experiment */\n  mmp2p: PropTypes.shape({\n    flyover: PropTypes.shape({\n      isVisible: PropTypes.bool.isRequired,\n    }),\n    meta: PropTypes.shape({\n      showLock: PropTypes.bool,\n    }),\n    state: PropTypes.shape({\n      isEnabled: PropTypes.bool.isRequired,\n    }),\n  }),\n};\n\nSequence.defaultProps = {\n  sequenceId: null,\n  unitId: null,\n  /** [MM-P2P] Experiment */\n  mmp2p: {\n    flyover: { isVisible: false },\n    meta: { showLock: false },\n    state: { isEnabled: false },\n  },\n};\n\nexport default injectIntl(Sequence);\n"],"file":"Sequence.js"}