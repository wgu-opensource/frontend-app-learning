{"version":3,"sources":["../../../../src/courseware/course/sequence/SequenceContent.jsx"],"names":["ContentLock","React","lazy","SequenceContent","gated","intl","courseId","sequenceId","unitId","unitLoadedHandler","mmp2p","sequence","global","scrollTo","formatMessage","messages","loadingLockedContent","title","gatedContent","prereqSectionName","prereqId","unit","noContent","format","propTypes","PropTypes","bool","isRequired","string","func","intlShape","shape","flyover","isVisible","meta","showLock","state","isEnabled","defaultProps"],"mappings":"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","sourcesContent":["import React, { Suspense, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PageLoading from '../../../generic/PageLoading';\nimport { useModel } from '../../../generic/model-store';\n\nimport messages from './messages';\nimport Unit from './Unit';\n\nconst ContentLock = React.lazy(() => import('./content-lock'));\n\nfunction SequenceContent({\n  gated,\n  intl,\n  courseId,\n  sequenceId,\n  unitId,\n  unitLoadedHandler,\n  /** [MM-P2P] Experiment */\n  mmp2p,\n}) {\n  const sequence = useModel('sequences', sequenceId);\n\n  // Go back to the top of the page whenever the unit or sequence changes.\n  useEffect(() => {\n    global.scrollTo(0, 0);\n  }, [sequenceId, unitId]);\n\n  if (gated) {\n    return (\n      <Suspense\n        fallback={(\n          <PageLoading\n            srMessage={intl.formatMessage(messages.loadingLockedContent)}\n          />\n        )}\n      >\n        <ContentLock\n          courseId={courseId}\n          sequenceTitle={sequence.title}\n          prereqSectionName={sequence.gatedContent.prereqSectionName}\n          prereqId={sequence.gatedContent.prereqId}\n        />\n      </Suspense>\n    );\n  }\n\n  const unit = useModel('units', unitId);\n  if (!unitId || !unit) {\n    return (\n      <div>\n        {intl.formatMessage(messages.noContent)}\n      </div>\n    );\n  }\n\n  return (\n    <Unit\n      courseId={courseId}\n      format={sequence.format}\n      key={unitId}\n      id={unitId}\n      onLoaded={unitLoadedHandler}\n      /** [MM-P2P] Experiment */\n      mmp2p={mmp2p}\n    />\n  );\n}\n\nSequenceContent.propTypes = {\n  gated: PropTypes.bool.isRequired,\n  courseId: PropTypes.string.isRequired,\n  sequenceId: PropTypes.string.isRequired,\n  unitId: PropTypes.string,\n  unitLoadedHandler: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n  /** [MM-P2P] Experiment */\n  mmp2p: PropTypes.shape({\n    flyover: PropTypes.shape({\n      isVisible: PropTypes.bool.isRequired,\n    }),\n    meta: PropTypes.shape({\n      showLock: PropTypes.bool,\n    }),\n    state: PropTypes.shape({\n      isEnabled: PropTypes.bool.isRequired,\n    }),\n  }),\n};\n\nSequenceContent.defaultProps = {\n  unitId: null,\n  /** [MM-P2P] Experiment */\n  mmp2p: {\n    flyover: { isVisible: false },\n    meta: { showLock: false },\n    state: { isEnabled: false },\n  },\n};\n\nexport default injectIntl(SequenceContent);\n"],"file":"SequenceContent.js"}