{"version":3,"sources":["../../../../../src/courseware/course/content-tools/notes-visibility/NotesVisibility.jsx"],"names":["toggleNotes","iframe","document","getElementById","contentWindow","postMessage","LMS_BASE_URL","NotesVisibility","Component","constructor","props","data","visibility","state","visible","put","visibilityUrl","then","setState","course","notes","id","render","message","handleClick","faPencilAlt","intl","formatMessage","messages","propTypes","intlShape","isRequired","PropTypes","shape","string","bool"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAGA;;;;AAEA;;;;;;;;;;;;AAEA,SAASA,WAAT,GAAuB;AACrB,QAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAf;AACAF,EAAAA,MAAM,CAACG,aAAP,CAAqBC,WAArB,CAAiC,mBAAjC,EAAsD,mCAAYC,YAAlE;AACD;;AAED,MAAMC,eAAN,SAA8BC,gBAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,yCAQL,MAAM;AAClB,YAAMC,IAAI,GAAG;AAAEC,QAAAA,UAAU,EAAE,KAAKC,KAAL,CAAWC;AAAzB,OAAb;AACA,8CAA6BC,GAA7B,CACE,KAAKC,aADP,EAEEL,IAFF,EAGEM,IAHF,CAGO,MAAM;AACX,aAAKC,QAAL,CAAeL,KAAD,KAAY;AAAEC,UAAAA,OAAO,EAAE,CAACD,KAAK,CAACC;AAAlB,SAAZ,CAAd;AACAd,QAAAA,WAAW;AACZ,OAND;AAOD,KAjBkB;;AAEjB,SAAKa,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEJ,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBN;AADjB,KAAb;AAGA,SAAKE,aAAL,GAAsB,GAAE,mCAAYV,YAAa,YAAWI,KAAK,CAACS,MAAN,CAAaE,EAAG,uBAA5E;AACD;;AAaDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,KAAKV,KAAL,CAAWC,OAAX,GAAqB,mBAArB,GAA2C,mBAA3D;AACA,wBACE;AACE,MAAA,SAAS,EAAG,eAAc,KAAKD,KAAL,CAAWC,OAAX,GAAqB,gBAArB,GAAwC,cAAe,SADnF;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,OAAO,EAAE,KAAKU,WAJhB;AAKE,MAAA,SAAS,EAAE,KAAKA,WALlB;AAME,MAAA,QAAQ,EAAC,IANX;AAOE,sBAAc,KAAKX,KAAL,CAAWC,OAAX,GAAqB,MAArB,GAA8B,OAP9C;AAAA,8BASE,qBAAC,iCAAD;AAAiB,QAAA,IAAI,EAAEW,wBAAvB;AAAoC,uBAAY,MAAhD;AAAuD,QAAA,SAAS,EAAC;AAAjE,QATF,EAUG,KAAKf,KAAL,CAAWgB,IAAX,CAAgBC,aAAhB,CAA8BC,kBAASL,OAAT,CAA9B,CAVH;AAAA,MADF;AAcD;;AApCqC;;AAuCxChB,eAAe,CAACsB,SAAhB,GAA4B;AAC1BH,EAAAA,IAAI,EAAEI,gBAAUC,UADU;AAE1BZ,EAAAA,MAAM,EAAEa,mBAAUC,KAAV,CAAgB;AACtBZ,IAAAA,EAAE,EAAEW,mBAAUE,MAAV,CAAiBH,UADC;AAEtBX,IAAAA,KAAK,EAAEY,mBAAUC,KAAV,CAAgB;AACrBnB,MAAAA,OAAO,EAAEkB,mBAAUG;AADE,KAAhB,EAEJJ;AAJmB,GAAhB,EAKLA;AAPuB,CAA5B;;eAUe,sBAAWxB,eAAX,C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport {\n  injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport messages from './messages';\n\nfunction toggleNotes() {\n  const iframe = document.getElementById('unit-iframe');\n  iframe.contentWindow.postMessage('tools.toggleNotes', getConfig().LMS_BASE_URL);\n}\n\nclass NotesVisibility extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: props.course.notes.visible,\n    };\n    this.visibilityUrl = `${getConfig().LMS_BASE_URL}/courses/${props.course.id}/edxnotes/visibility/`;\n  }\n\n  handleClick = () => {\n    const data = { visibility: this.state.visible };\n    getAuthenticatedHttpClient().put(\n      this.visibilityUrl,\n      data,\n    ).then(() => {\n      this.setState((state) => ({ visible: !state.visible }));\n      toggleNotes();\n    });\n  }\n\n  render() {\n    const message = this.state.visible ? 'notes.button.hide' : 'notes.button.show';\n    return (\n      <button\n        className={`trigger btn ${this.state.visible ? 'text-secondary' : 'text-success'}  mx-2 `}\n        role=\"switch\"\n        type=\"button\"\n        onClick={this.handleClick}\n        onKeyDown={this.handleClick}\n        tabIndex=\"-1\"\n        aria-checked={this.state.visible ? 'true' : 'false'}\n      >\n        <FontAwesomeIcon icon={faPencilAlt} aria-hidden=\"true\" className=\"mr-2\" />\n        {this.props.intl.formatMessage(messages[message])}\n      </button>\n    );\n  }\n}\n\nNotesVisibility.propTypes = {\n  intl: intlShape.isRequired,\n  course: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    notes: PropTypes.shape({\n      visible: PropTypes.bool,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default injectIntl(NotesVisibility);\n"],"file":"NotesVisibility.js"}