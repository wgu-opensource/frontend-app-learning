{"version":3,"sources":["../../../../../src/courseware/course/bookmark/data/redux.test.js"],"names":["loggingService","axiosMock","MockAdapter","describe","unitId","store","beforeEach","reset","logError","mockReset","createBookmarkURL","LMS_BASE_URL","it","onPost","networkError","thunks","addBookmark","dispatch","expect","toHaveBeenCalled","history","post","url","toEqual","getState","models","units","objectContaining","bookmarked","bookmarkedUpdateState","reply","deleteBookmarkURL","username","onDelete","removeBookmark","delete"],"mappings":"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","sourcesContent":["import MockAdapter from 'axios-mock-adapter';\n\nimport { getAuthenticatedHttpClient, getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport * as thunks from './thunks';\n\nimport { executeThunk } from '../../../../utils';\n\nimport { initializeMockApp } from '../../../../setupTest';\nimport initializeStore from '../../../../store';\n\nconst { loggingService } = initializeMockApp();\n\nconst axiosMock = new MockAdapter(getAuthenticatedHttpClient());\n\ndescribe('Data layer integration tests', () => {\n  const unitId = 'unitId';\n\n  let store;\n\n  beforeEach(() => {\n    axiosMock.reset();\n    loggingService.logError.mockReset();\n\n    store = initializeStore();\n  });\n\n  describe('Test addBookmark', () => {\n    const createBookmarkURL = `${getConfig().LMS_BASE_URL}/api/bookmarks/v1/bookmarks/`;\n\n    it('Should fail to create bookmark in case of error', async () => {\n      axiosMock.onPost(createBookmarkURL).networkError();\n\n      await executeThunk(thunks.addBookmark(unitId), store.dispatch);\n\n      expect(loggingService.logError).toHaveBeenCalled();\n      expect(axiosMock.history.post[0].url).toEqual(createBookmarkURL);\n      expect(store.getState().models.units[unitId]).toEqual(expect.objectContaining({\n        bookmarked: false,\n        bookmarkedUpdateState: 'failed',\n      }));\n    });\n\n    it('Should create bookmark and update model state', async () => {\n      axiosMock.onPost(createBookmarkURL).reply(201);\n\n      await executeThunk(thunks.addBookmark(unitId), store.dispatch);\n\n      expect(store.getState().models.units[unitId]).toEqual(expect.objectContaining({\n        bookmarked: true,\n        bookmarkedUpdateState: 'loaded',\n      }));\n    });\n  });\n\n  describe('Test removeBookmark', () => {\n    const deleteBookmarkURL = `${getConfig().LMS_BASE_URL}/api/bookmarks/v1/bookmarks/${getAuthenticatedUser().username},${unitId}/`;\n\n    it('Should fail to remove bookmark in case of error', async () => {\n      axiosMock.onDelete(deleteBookmarkURL).networkError();\n\n      await executeThunk(thunks.removeBookmark(unitId), store.dispatch);\n\n      expect(loggingService.logError).toHaveBeenCalled();\n      expect(axiosMock.history.delete[0].url).toEqual(deleteBookmarkURL);\n      expect(store.getState().models.units[unitId]).toEqual(expect.objectContaining({\n        bookmarked: true,\n        bookmarkedUpdateState: 'failed',\n      }));\n    });\n\n    it('Should delete bookmark and update model state', async () => {\n      axiosMock.onDelete(deleteBookmarkURL).reply(201);\n\n      await executeThunk(thunks.removeBookmark(unitId), store.dispatch);\n\n      expect(store.getState().models.units[unitId]).toEqual(expect.objectContaining({\n        bookmarked: false,\n        bookmarkedUpdateState: 'loaded',\n      }));\n    });\n  });\n});\n"],"file":"redux.test.js"}