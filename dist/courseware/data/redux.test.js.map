{"version":3,"sources":["../../../src/courseware/data/redux.test.js"],"names":["loggingService","axiosMock","MockAdapter","describe","courseBaseUrl","LMS_BASE_URL","learningSequencesUrlRegExp","RegExp","sequenceBaseUrl","courseMetadata","Factory","build","courseId","id","courseHomeMetadata","courseBlocks","unitBlocks","sequenceBlocks","sequenceMetadata","sequenceBlock","simpleOutline","courseUrl","courseHomeMetadataUrl","sequenceUrl","item_id","sequenceId","unitId","store","beforeEach","reset","logError","mockReset","it","onGet","networkError","thunks","fetchCourse","dispatch","expect","toHaveBeenCalled","getState","courseware","toEqual","objectContaining","courseStatus","forbiddenCourseMetadata","forbiddenCourseHomeMetadata","course_access","has_access","forbiddenCourseHomeUrl","forbiddenCourseBlocks","forbiddenCourseUrl","reply","state","models","courseHomeMeta","courseAccess","not","toBeUndefined","sequenceStatus","coursewareMeta","marketingUrl","sequences","length","Object","values","sections","forEach","section","sequenceIds","emptyOutline","fetchSequence","sectionMetadata","tag","gatedContent","any","activeUnitIndex","Number","units","complete","bookmarked","Boolean","getCompletionURL","onPost","checkBlockCompletion","history","post","url","toBeTruthy","gotoPositionURL","oldPosition","newPosition","saveSequencePosition","courseMetadataNeedSignature","user_needs_integrity_signature","courseUrlNeedSignature","userNeedsIntegritySignature","integritySignatureUrl","saveIntegritySignature"],"mappings":"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","sourcesContent":["import { Factory } from 'rosie';\nimport MockAdapter from 'axios-mock-adapter';\n\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport * as thunks from './thunks';\n\nimport { appendBrowserTimezoneToUrl, executeThunk } from '../../utils';\n\nimport { buildSimpleCourseBlocks } from '../../shared/data/__factories__/courseBlocks.factory';\nimport { buildOutlineFromBlocks } from './__factories__/learningSequencesOutline.factory';\nimport { initializeMockApp } from '../../setupTest';\nimport initializeStore from '../../store';\n\nconst { loggingService } = initializeMockApp();\n\nconst axiosMock = new MockAdapter(getAuthenticatedHttpClient());\n\ndescribe('Data layer integration tests', () => {\n  const courseBaseUrl = `${getConfig().LMS_BASE_URL}/api/courseware/course`;\n  const learningSequencesUrlRegExp = new RegExp(`${getConfig().LMS_BASE_URL}/api/learning_sequences/v1/course_outline/*`);\n  const sequenceBaseUrl = `${getConfig().LMS_BASE_URL}/api/courseware/sequence`;\n\n  // building minimum set of api responses to test all thunks\n  const courseMetadata = Factory.build('courseMetadata');\n  const courseId = courseMetadata.id;\n  const courseHomeMetadata = Factory.build('courseHomeMetadata');\n  const { courseBlocks, unitBlocks, sequenceBlocks } = buildSimpleCourseBlocks(courseId);\n  const sequenceMetadata = Factory.build(\n    'sequenceMetadata',\n    {},\n    { courseId, unitBlocks, sequenceBlock: sequenceBlocks[0] },\n  );\n  const simpleOutline = buildOutlineFromBlocks(courseBlocks);\n\n  let courseUrl = `${courseBaseUrl}/${courseId}`;\n  courseUrl = appendBrowserTimezoneToUrl(courseUrl);\n\n  const courseHomeMetadataUrl = appendBrowserTimezoneToUrl(\n    `${getConfig().LMS_BASE_URL}/api/course_home/course_metadata/${courseId}`,\n  );\n  const sequenceUrl = `${sequenceBaseUrl}/${sequenceMetadata.item_id}`;\n  const sequenceId = sequenceBlocks[0].id;\n  const unitId = unitBlocks[0].id;\n\n  let store;\n\n  beforeEach(() => {\n    axiosMock.reset();\n    loggingService.logError.mockReset();\n\n    store = initializeStore();\n  });\n\n  describe('Test fetchCourse', () => {\n    it('Should fail to fetch course and blocks if request error happens', async () => {\n      axiosMock.onGet(courseUrl).networkError();\n      axiosMock.onGet(learningSequencesUrlRegExp).networkError();\n\n      await executeThunk(thunks.fetchCourse(courseId), store.dispatch);\n\n      expect(loggingService.logError).toHaveBeenCalled();\n      expect(store.getState().courseware).toEqual(expect.objectContaining({\n        courseId,\n        courseStatus: 'failed',\n      }));\n    });\n\n    it('Should fetch, normalize, and save metadata, but with denied status', async () => {\n      const forbiddenCourseMetadata = Factory.build('courseMetadata');\n      const forbiddenCourseHomeMetadata = Factory.build('courseHomeMetadata', {\n        course_access: {\n          has_access: false,\n        },\n      });\n      const forbiddenCourseHomeUrl = appendBrowserTimezoneToUrl(\n        `${getConfig().LMS_BASE_URL}/api/course_home/course_metadata/${courseId}`,\n      );\n      const forbiddenCourseBlocks = Factory.build('courseBlocks', {\n        courseId: forbiddenCourseMetadata.id,\n      });\n      let forbiddenCourseUrl = `${courseBaseUrl}/${forbiddenCourseMetadata.id}`;\n      forbiddenCourseUrl = appendBrowserTimezoneToUrl(forbiddenCourseUrl);\n\n      axiosMock.onGet(forbiddenCourseHomeUrl).reply(200, forbiddenCourseHomeMetadata);\n      axiosMock.onGet(forbiddenCourseUrl).reply(200, forbiddenCourseMetadata);\n      axiosMock.onGet(learningSequencesUrlRegExp).reply(200, buildOutlineFromBlocks(forbiddenCourseBlocks));\n\n      await executeThunk(thunks.fetchCourse(forbiddenCourseMetadata.id), store.dispatch);\n\n      const state = store.getState();\n\n      expect(state.courseware.courseStatus).toEqual('denied');\n\n      // check that at least one key camel cased, thus course data normalized\n      expect(state.models.courseHomeMeta[forbiddenCourseMetadata.id].courseAccess).not.toBeUndefined();\n    });\n\n    it('Should fetch, normalize, and save metadata', async () => {\n      axiosMock.onGet(courseHomeMetadataUrl).reply(200, courseHomeMetadata);\n      axiosMock.onGet(courseUrl).reply(200, courseMetadata);\n      axiosMock.onGet(learningSequencesUrlRegExp).reply(200, buildOutlineFromBlocks(courseBlocks));\n\n      await executeThunk(thunks.fetchCourse(courseId), store.dispatch);\n\n      const state = store.getState();\n\n      expect(state.courseware.courseStatus).toEqual('loaded');\n      expect(state.courseware.courseId).toEqual(courseId);\n      expect(state.courseware.sequenceStatus).toEqual('loading');\n      expect(state.courseware.sequenceId).toEqual(null);\n\n      // check that at least one key camel cased, thus course data normalized\n      expect(state.models.coursewareMeta[courseId].marketingUrl).not.toBeUndefined();\n    });\n\n    it('Should fetch, normalize, and save metadata; filtering has no effect', async () => {\n      // Very similar to previous test, but pass back an outline for filtering\n      // (even though it won't actually filter down in this case).\n      axiosMock.onGet(courseHomeMetadataUrl).reply(200, courseHomeMetadata);\n      axiosMock.onGet(courseUrl).reply(200, courseMetadata);\n      axiosMock.onGet(learningSequencesUrlRegExp).reply(200, simpleOutline);\n\n      await executeThunk(thunks.fetchCourse(courseId), store.dispatch);\n\n      const state = store.getState();\n\n      expect(state.courseware.courseStatus).toEqual('loaded');\n      expect(state.courseware.courseId).toEqual(courseId);\n      expect(state.courseware.sequenceStatus).toEqual('loading');\n      expect(state.courseware.sequenceId).toEqual(null);\n\n      // check that at least one key camel cased, thus course data normalized\n      expect(state.models.coursewareMeta[courseId].marketingUrl).not.toBeUndefined();\n      expect(state.models.sequences.length === 1);\n\n      Object.values(state.models.sections).forEach(section => expect(section.sequenceIds.length === 1));\n    });\n\n    it('Should fetch, normalize, and save metadata; filtering removes sequence', async () => {\n      // Very similar to previous test, but pass back an outline for filtering\n      // (even though it won't actually filter down in this case).\n      axiosMock.onGet(courseHomeMetadataUrl).reply(200, courseHomeMetadata);\n      axiosMock.onGet(courseUrl).reply(200, courseMetadata);\n\n      // Create an outline with basic matching metadata, but then empty it out...\n      const emptyOutline = buildOutlineFromBlocks(courseBlocks);\n      emptyOutline.sequences = {};\n      emptyOutline.sections = [];\n      axiosMock.onGet(learningSequencesUrlRegExp).reply(200, emptyOutline);\n      await executeThunk(thunks.fetchCourse(courseId), store.dispatch);\n\n      const state = store.getState();\n\n      expect(state.courseware.courseStatus).toEqual('loaded');\n      expect(state.courseware.courseId).toEqual(courseId);\n      expect(state.courseware.sequenceStatus).toEqual('loading');\n      expect(state.courseware.sequenceId).toEqual(null);\n\n      // check that at least one key camel cased, thus course data normalized\n      expect(state.models.coursewareMeta[courseId].marketingUrl).not.toBeUndefined();\n      expect(state.models.sequences === null);\n\n      Object.values(state.models.sections).forEach(section => expect(section.sequenceIds.length === 0));\n    });\n  });\n\n  describe('Test fetchSequence', () => {\n    it('Should result in fetch failure if error occurs', async () => {\n      axiosMock.onGet(sequenceUrl).networkError();\n\n      await executeThunk(thunks.fetchSequence(sequenceId), store.dispatch);\n\n      expect(loggingService.logError).toHaveBeenCalled();\n      expect(store.getState().courseware.sequenceStatus).toEqual('failed');\n    });\n\n    it('Should result in fetch failure if a non-sequential block is returned', async () => {\n      const sectionMetadata = {\n        ...sequenceMetadata,\n        // 'chapter' is the block_type of a Section, which the sequence metadata\n        // API will happily return if requested, since SectionBlock is implemented\n        // as a subclass of SequenceBlock.\n        tag: 'chapter',\n      };\n      axiosMock.onGet(sequenceUrl).reply(200, sectionMetadata);\n\n      await executeThunk(thunks.fetchSequence(sequenceId), store.dispatch);\n\n      expect(loggingService.logError).toHaveBeenCalled();\n      expect(store.getState().courseware.sequenceStatus).toEqual('failed');\n    });\n\n    it('Should fetch and normalize metadata, and then update existing models with sequence metadata', async () => {\n      axiosMock.onGet(courseHomeMetadataUrl).reply(200, courseHomeMetadata);\n      axiosMock.onGet(courseUrl).reply(200, courseMetadata);\n      axiosMock.onGet(learningSequencesUrlRegExp).reply(200, buildOutlineFromBlocks(courseBlocks));\n      axiosMock.onGet(sequenceUrl).reply(200, sequenceMetadata);\n\n      // setting course with blocks before sequence to check that blocks receive\n      // additional information after fetchSequence call.\n      await executeThunk(thunks.fetchCourse(courseId), store.dispatch);\n\n      // ensure that initial state has no additional sequence info\n      let state = store.getState();\n      expect(state.models.sequences).toEqual({\n        [sequenceId]: expect.not.objectContaining({\n          gatedContent: expect.any(Object),\n          activeUnitIndex: expect.any(Number),\n        }),\n      });\n\n      // Update our state variable again.\n      state = store.getState();\n\n      expect(state.courseware.courseStatus).toEqual('loaded');\n      expect(state.courseware.courseId).toEqual(courseId);\n      expect(state.courseware.sequenceStatus).toEqual('loading');\n      expect(state.courseware.sequenceId).toEqual(null);\n\n      await executeThunk(thunks.fetchSequence(sequenceId), store.dispatch);\n\n      // Update our state variable again.\n      state = store.getState();\n\n      // ensure that additional information appeared in store\n      expect(state.models.sequences).toEqual({\n        [sequenceId]: expect.objectContaining({\n          gatedContent: expect.any(Object),\n          activeUnitIndex: expect.any(Number),\n        }),\n      });\n      expect(state.models.units).toEqual({\n        [unitId]: expect.objectContaining({\n          complete: null,\n          bookmarked: expect.any(Boolean),\n        }),\n      });\n\n      expect(state.courseware.courseStatus).toEqual('loaded');\n      expect(state.courseware.courseId).toEqual(courseId);\n      expect(state.courseware.sequenceStatus).toEqual('loaded');\n      expect(state.courseware.sequenceId).toEqual(sequenceId);\n    });\n  });\n\n  describe('Thunks that require fetched sequences', () => {\n    beforeEach(async () => {\n      // thunks tested in this block rely on fact, that store already has\n      // some info about sequence\n      axiosMock.onGet(sequenceUrl).reply(200, sequenceMetadata);\n      await executeThunk(thunks.fetchSequence(sequenceMetadata.item_id), store.dispatch);\n    });\n\n    describe('Test checkBlockCompletion', () => {\n      const getCompletionURL = `${getConfig().LMS_BASE_URL}/courses/${courseId}/xblock/${sequenceId}/handler/get_completion`;\n\n      it('Should fail to check completion and log error', async () => {\n        axiosMock.onPost(getCompletionURL).networkError();\n\n        await executeThunk(\n          thunks.checkBlockCompletion(courseId, sequenceId, unitId),\n          store.dispatch,\n          store.getState,\n        );\n\n        expect(loggingService.logError).toHaveBeenCalled();\n        expect(axiosMock.history.post[0].url).toEqual(getCompletionURL);\n      });\n\n      it('Should update complete field of unit model', async () => {\n        axiosMock.onPost(getCompletionURL).reply(201, { complete: true });\n\n        await executeThunk(\n          thunks.checkBlockCompletion(courseId, sequenceId, unitId),\n          store.dispatch,\n          store.getState,\n        );\n\n        expect(store.getState().models.units[unitId].complete).toBeTruthy();\n      });\n    });\n\n    describe('Test saveSequencePosition', () => {\n      const gotoPositionURL = `${getConfig().LMS_BASE_URL}/courses/${courseId}/xblock/${sequenceId}/handler/goto_position`;\n\n      it('Should change and revert sequence model activeUnitIndex in case of error', async () => {\n        axiosMock.onPost(gotoPositionURL).networkError();\n\n        const oldPosition = store.getState().models.sequences[sequenceId].activeUnitIndex;\n        const newPosition = 123;\n\n        await executeThunk(\n          thunks.saveSequencePosition(courseId, sequenceId, newPosition),\n          store.dispatch,\n          store.getState,\n        );\n\n        expect(loggingService.logError).toHaveBeenCalled();\n        expect(axiosMock.history.post[0].url).toEqual(gotoPositionURL);\n        expect(store.getState().models.sequences[sequenceId].activeUnitIndex).toEqual(oldPosition);\n      });\n\n      it('Should update sequence model activeUnitIndex', async () => {\n        axiosMock.onPost(gotoPositionURL).reply(201, {});\n\n        const newPosition = 123;\n\n        await executeThunk(\n          thunks.saveSequencePosition(courseId, sequenceId, newPosition),\n          store.dispatch,\n          store.getState,\n        );\n\n        expect(axiosMock.history.post[0].url).toEqual(gotoPositionURL);\n        expect(store.getState().models.sequences[sequenceId].activeUnitIndex).toEqual(newPosition);\n      });\n    });\n  });\n\n  describe('test saveIntegritySignature', () => {\n    it('Should update userNeedsIntegritySignature upon success', async () => {\n      const courseMetadataNeedSignature = Factory.build('courseMetadata', {\n        user_needs_integrity_signature: true,\n      });\n\n      let courseUrlNeedSignature = `${courseBaseUrl}/${courseMetadataNeedSignature.id}`;\n      courseUrlNeedSignature = appendBrowserTimezoneToUrl(courseUrlNeedSignature);\n\n      axiosMock.onGet(courseUrlNeedSignature).reply(200, courseMetadataNeedSignature);\n\n      await executeThunk(thunks.fetchCourse(courseMetadataNeedSignature.id), store.dispatch);\n      expect(\n        store.getState().models.coursewareMeta[courseMetadataNeedSignature.id].userNeedsIntegritySignature,\n      ).toEqual(true);\n\n      const integritySignatureUrl = `${getConfig().LMS_BASE_URL}/api/agreements/v1/integrity_signature/${courseMetadataNeedSignature.id}`;\n      axiosMock.onPost(integritySignatureUrl).reply(200, {});\n      await executeThunk(\n        thunks.saveIntegritySignature(courseMetadataNeedSignature.id),\n        store.dispatch,\n        store.getState,\n      );\n      expect(\n        store.getState().models.coursewareMeta[courseMetadataNeedSignature.id].userNeedsIntegritySignature,\n      ).toEqual(false);\n    });\n  });\n});\n"],"file":"redux.test.js"}