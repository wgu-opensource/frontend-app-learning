{"version":3,"sources":["../../../src/courseware/data/thunks.js"],"names":["fetchCourse","courseId","dispatch","Promise","allSettled","then","courseMetadataResult","learningSequencesOutlineResult","courseHomeMetadataResult","status","modelType","model","value","id","courses","sections","sequences","modelsMap","fetchedMetadata","fetchedCourseHomeMetadata","fetchedOutline","response","reason","courseAccess","hasAccess","fetchSequence","sequenceId","sequence","units","blockType","models","error","sequenceMightBeUnit","checkBlockCompletion","unitId","getState","complete","isComplete","saveSequencePosition","activeUnitIndex","initialActiveUnitIndex","saveIntegritySignature","isMasquerading","userNeedsIntegritySignature","getCourseDiscussionTopics","config","provider","topics","idField"],"mappings":"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","sourcesContent":["import { logError, logInfo } from '@edx/frontend-platform/logging';\nimport { getCourseHomeCourseMetadata } from '../../course-home/data/api';\nimport {\n  addModel, addModelsMap, updateModel, updateModels, updateModelsMap,\n} from '../../generic/model-store';\nimport {\n  getBlockCompletion,\n  getCourseDiscussionConfig,\n  getCourseMetadata,\n  getCourseTopics,\n  getLearningSequencesOutline,\n  getSequenceMetadata,\n  postIntegritySignature,\n  postSequencePosition,\n} from './api';\nimport {\n  fetchCourseDenied,\n  fetchCourseFailure,\n  fetchCourseRequest,\n  fetchCourseSuccess,\n  fetchSequenceFailure,\n  fetchSequenceRequest,\n  fetchSequenceSuccess,\n} from './slice';\n\nexport function fetchCourse(courseId) {\n  return async (dispatch) => {\n    dispatch(fetchCourseRequest({ courseId }));\n    Promise.allSettled([\n      getCourseMetadata(courseId),\n      getLearningSequencesOutline(courseId),\n      getCourseHomeCourseMetadata(courseId, 'courseware'),\n    ]).then(([\n      courseMetadataResult,\n      learningSequencesOutlineResult,\n      courseHomeMetadataResult]) => {\n      if (courseMetadataResult.status === 'fulfilled') {\n        dispatch(addModel({\n          modelType: 'coursewareMeta',\n          model: courseMetadataResult.value,\n        }));\n      }\n\n      if (courseHomeMetadataResult.status === 'fulfilled') {\n        dispatch(addModel({\n          modelType: 'courseHomeMeta',\n          model: {\n            id: courseId,\n            ...courseHomeMetadataResult.value,\n          },\n        }));\n      }\n\n      if (learningSequencesOutlineResult.status === 'fulfilled') {\n        const {\n          courses, sections, sequences,\n        } = learningSequencesOutlineResult.value;\n\n        // This updates the course with a sectionIds array from the Learning Sequence data.\n        dispatch(updateModelsMap({\n          modelType: 'coursewareMeta',\n          modelsMap: courses,\n        }));\n        dispatch(addModelsMap({\n          modelType: 'sections',\n          modelsMap: sections,\n        }));\n        // We update for sequences because the sequence metadata may have come back first.\n        dispatch(updateModelsMap({\n          modelType: 'sequences',\n          modelsMap: sequences,\n        }));\n      }\n\n      const fetchedMetadata = courseMetadataResult.status === 'fulfilled';\n      const fetchedCourseHomeMetadata = courseHomeMetadataResult.status === 'fulfilled';\n      const fetchedOutline = learningSequencesOutlineResult.status === 'fulfilled';\n\n      // Log errors for each request if needed. Outline failures may occur\n      // even if the course metadata request is successful\n      if (!fetchedOutline) {\n        const { response } = learningSequencesOutlineResult.reason;\n        if (response && response.status === 403) {\n          // 403 responses are normal - they happen when the learner is logged out.\n          // We'll redirect them in a moment to the outline tab by calling fetchCourseDenied() below.\n          logInfo(learningSequencesOutlineResult.reason);\n        } else {\n          logError(learningSequencesOutlineResult.reason);\n        }\n      }\n      if (!fetchedMetadata) {\n        logError(courseMetadataResult.reason);\n      }\n      if (!fetchedCourseHomeMetadata) {\n        logError(courseHomeMetadataResult.reason);\n      }\n      if (fetchedMetadata && fetchedCourseHomeMetadata) {\n        if (courseHomeMetadataResult.value.courseAccess.hasAccess && fetchedOutline) {\n          // User has access\n          dispatch(fetchCourseSuccess({ courseId }));\n          return;\n        }\n        // User either doesn't have access or only has partial access\n        // (can't access course blocks)\n        dispatch(fetchCourseDenied({ courseId }));\n        return;\n      }\n\n      // Definitely an error happening\n      dispatch(fetchCourseFailure({ courseId }));\n    });\n  };\n}\n\nexport function fetchSequence(sequenceId) {\n  return async (dispatch) => {\n    dispatch(fetchSequenceRequest({ sequenceId }));\n    try {\n      const { sequence, units } = await getSequenceMetadata(sequenceId);\n      if (sequence.blockType !== 'sequential') {\n        // Some other block types (particularly 'chapter') can be returned\n        // by this API. We want to error in that case, since downstream\n        // courseware code is written to render Sequences of Units.\n        logError(\n          `Requested sequence '${sequenceId}' `\n          + `has block type '${sequence.blockType}'; expected block type 'sequential'.`,\n        );\n        dispatch(fetchSequenceFailure({ sequenceId }));\n      } else {\n        dispatch(updateModel({\n          modelType: 'sequences',\n          model: sequence,\n        }));\n        dispatch(updateModels({\n          modelType: 'units',\n          models: units,\n        }));\n        dispatch(fetchSequenceSuccess({ sequenceId }));\n      }\n    } catch (error) {\n      // Some errors are expected - for example, CoursewareContainer may request sequence metadata for a unit and rely\n      // on the request failing to notice that it actually does have a unit (mostly so it doesn't have to know anything\n      // about the opaque key structure). In such cases, the backend gives us a 422.\n      const sequenceMightBeUnit = error?.response?.status === 422;\n      if (!sequenceMightBeUnit) {\n        logError(error);\n      }\n      dispatch(fetchSequenceFailure({ sequenceId, sequenceMightBeUnit }));\n    }\n  };\n}\n\nexport function checkBlockCompletion(courseId, sequenceId, unitId) {\n  return async (dispatch, getState) => {\n    const { models } = getState();\n    if (models.units[unitId].complete) {\n      return {}; // do nothing. Things don't get uncompleted after they are completed.\n    }\n\n    try {\n      const isComplete = await getBlockCompletion(courseId, sequenceId, unitId);\n      dispatch(updateModel({\n        modelType: 'units',\n        model: {\n          id: unitId,\n          complete: isComplete,\n        },\n      }));\n      return isComplete;\n    } catch (error) {\n      logError(error);\n    }\n    return {};\n  };\n}\n\nexport function saveSequencePosition(courseId, sequenceId, activeUnitIndex) {\n  return async (dispatch, getState) => {\n    const { models } = getState();\n    const initialActiveUnitIndex = models.sequences[sequenceId].activeUnitIndex;\n    // Optimistically update the position.\n    dispatch(updateModel({\n      modelType: 'sequences',\n      model: {\n        id: sequenceId,\n        activeUnitIndex,\n      },\n    }));\n    try {\n      await postSequencePosition(courseId, sequenceId, activeUnitIndex);\n      // Update again under the assumption that the above call succeeded, since it doesn't return a\n      // meaningful response.\n      dispatch(updateModel({\n        modelType: 'sequences',\n        model: {\n          id: sequenceId,\n          activeUnitIndex,\n        },\n      }));\n    } catch (error) {\n      logError(error);\n      dispatch(updateModel({\n        modelType: 'sequences',\n        model: {\n          id: sequenceId,\n          activeUnitIndex: initialActiveUnitIndex,\n        },\n      }));\n    }\n  };\n}\n\nexport function saveIntegritySignature(courseId, isMasquerading) {\n  return async (dispatch) => {\n    try {\n      // If the request is made by a staff user masquerading as a specific learner,\n      // don't actually create a signature for them on the backend,\n      // only the modal dialog will be dismissed\n      if (!isMasquerading) {\n        await postIntegritySignature(courseId);\n      }\n      dispatch(updateModel({\n        modelType: 'coursewareMeta',\n        model: {\n          id: courseId,\n          userNeedsIntegritySignature: false,\n        },\n      }));\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n\nexport function getCourseDiscussionTopics(courseId) {\n  return async (dispatch) => {\n    try {\n      const config = await getCourseDiscussionConfig(courseId);\n      // Only load topics for the openedx provider, the legacy provider uses\n      // the xblock\n      if (config.provider === 'openedx') {\n        const topics = await getCourseTopics(courseId);\n        dispatch(updateModels({\n          modelType: 'discussionTopics',\n          models: topics,\n          idField: 'usageKey',\n        }));\n      }\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n"],"file":"thunks.js"}