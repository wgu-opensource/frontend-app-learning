{"version":3,"file":"thunks.js","names":["_logging","require","_api","_modelStore","_api2","_slice","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","fetchCourse","courseId","dispatch","fetchCourseRequest","Promise","allSettled","getCourseMetadata","getLearningSequencesOutline","getCourseHomeCourseMetadata","then","_ref","courseMetadataResult","learningSequencesOutlineResult","courseHomeMetadataResult","status","addModel","modelType","model","id","courses","sections","sequences","updateModelsMap","modelsMap","addModelsMap","fetchedMetadata","fetchedCourseHomeMetadata","fetchedOutline","response","reason","logInfo","logError","courseAccess","hasAccess","fetchCourseSuccess","fetchCourseDenied","fetchCourseFailure","fetchSequence","sequenceId","fetchSequenceRequest","sequence","units","getSequenceMetadata","blockType","fetchSequenceFailure","updateModel","updateModels","models","fetchSequenceSuccess","error","sequenceMightBeUnit","checkBlockCompletion","unitId","getState","complete","isComplete","getBlockCompletion","saveSequencePosition","activeUnitIndex","initialActiveUnitIndex","postSequencePosition","saveIntegritySignature","isMasquerading","postIntegritySignature","userNeedsIntegritySignature","getCourseDiscussionTopics","config","getCourseDiscussionConfig","provider","topics","getCourseTopics","topic","usageKey","idField"],"sources":["../../../src/courseware/data/thunks.js"],"sourcesContent":["import { logError, logInfo } from '@edx/frontend-platform/logging';\nimport { getCourseHomeCourseMetadata } from '../../course-home/data/api';\nimport {\n  addModel, addModelsMap, updateModel, updateModels, updateModelsMap,\n} from '../../generic/model-store';\nimport {\n  getBlockCompletion,\n  getCourseDiscussionConfig,\n  getCourseMetadata,\n  getCourseTopics,\n  getLearningSequencesOutline,\n  getSequenceMetadata,\n  postIntegritySignature,\n  postSequencePosition,\n} from './api';\nimport {\n  fetchCourseDenied,\n  fetchCourseFailure,\n  fetchCourseRequest,\n  fetchCourseSuccess,\n  fetchSequenceFailure,\n  fetchSequenceRequest,\n  fetchSequenceSuccess,\n} from './slice';\n\nexport function fetchCourse(courseId) {\n  return async (dispatch) => {\n    dispatch(fetchCourseRequest({ courseId }));\n    Promise.allSettled([\n      getCourseMetadata(courseId),\n      getLearningSequencesOutline(courseId),\n      getCourseHomeCourseMetadata(courseId, 'courseware'),\n    ]).then(([\n      courseMetadataResult,\n      learningSequencesOutlineResult,\n      courseHomeMetadataResult]) => {\n      if (courseMetadataResult.status === 'fulfilled') {\n        dispatch(addModel({\n          modelType: 'coursewareMeta',\n          model: courseMetadataResult.value,\n        }));\n      }\n\n      if (courseHomeMetadataResult.status === 'fulfilled') {\n        dispatch(addModel({\n          modelType: 'courseHomeMeta',\n          model: {\n            id: courseId,\n            ...courseHomeMetadataResult.value,\n          },\n        }));\n      }\n\n      if (learningSequencesOutlineResult.status === 'fulfilled') {\n        const {\n          courses, sections, sequences,\n        } = learningSequencesOutlineResult.value;\n\n        // This updates the course with a sectionIds array from the Learning Sequence data.\n        dispatch(updateModelsMap({\n          modelType: 'coursewareMeta',\n          modelsMap: courses,\n        }));\n        dispatch(addModelsMap({\n          modelType: 'sections',\n          modelsMap: sections,\n        }));\n        // We update for sequences because the sequence metadata may have come back first.\n        dispatch(updateModelsMap({\n          modelType: 'sequences',\n          modelsMap: sequences,\n        }));\n      }\n\n      const fetchedMetadata = courseMetadataResult.status === 'fulfilled';\n      const fetchedCourseHomeMetadata = courseHomeMetadataResult.status === 'fulfilled';\n      const fetchedOutline = learningSequencesOutlineResult.status === 'fulfilled';\n\n      // Log errors for each request if needed. Outline failures may occur\n      // even if the course metadata request is successful\n      if (!fetchedOutline) {\n        const { response } = learningSequencesOutlineResult.reason;\n        if (response && response.status === 403) {\n          // 403 responses are normal - they happen when the learner is logged out.\n          // We'll redirect them in a moment to the outline tab by calling fetchCourseDenied() below.\n          logInfo(learningSequencesOutlineResult.reason);\n        } else {\n          logError(learningSequencesOutlineResult.reason);\n        }\n      }\n      if (!fetchedMetadata) {\n        logError(courseMetadataResult.reason);\n      }\n      if (!fetchedCourseHomeMetadata) {\n        logError(courseHomeMetadataResult.reason);\n      }\n      if (fetchedMetadata && fetchedCourseHomeMetadata) {\n        if (courseHomeMetadataResult.value.courseAccess.hasAccess && fetchedOutline) {\n          // User has access\n          dispatch(fetchCourseSuccess({ courseId }));\n          return;\n        }\n        // User either doesn't have access or only has partial access\n        // (can't access course blocks)\n        dispatch(fetchCourseDenied({ courseId }));\n        return;\n      }\n\n      // Definitely an error happening\n      dispatch(fetchCourseFailure({ courseId }));\n    });\n  };\n}\n\nexport function fetchSequence(sequenceId) {\n  return async (dispatch) => {\n    dispatch(fetchSequenceRequest({ sequenceId }));\n    try {\n      const { sequence, units } = await getSequenceMetadata(sequenceId);\n      if (sequence.blockType !== 'sequential') {\n        // Some other block types (particularly 'chapter') can be returned\n        // by this API. We want to error in that case, since downstream\n        // courseware code is written to render Sequences of Units.\n        logError(\n          `Requested sequence '${sequenceId}' `\n          + `has block type '${sequence.blockType}'; expected block type 'sequential'.`,\n        );\n        dispatch(fetchSequenceFailure({ sequenceId }));\n      } else {\n        dispatch(updateModel({\n          modelType: 'sequences',\n          model: sequence,\n        }));\n        dispatch(updateModels({\n          modelType: 'units',\n          models: units,\n        }));\n        dispatch(fetchSequenceSuccess({ sequenceId }));\n      }\n    } catch (error) {\n      // Some errors are expected - for example, CoursewareContainer may request sequence metadata for a unit and rely\n      // on the request failing to notice that it actually does have a unit (mostly so it doesn't have to know anything\n      // about the opaque key structure). In such cases, the backend gives us a 422.\n      const sequenceMightBeUnit = error?.response?.status === 422;\n      if (!sequenceMightBeUnit) {\n        logError(error);\n      }\n      dispatch(fetchSequenceFailure({ sequenceId, sequenceMightBeUnit }));\n    }\n  };\n}\n\nexport function checkBlockCompletion(courseId, sequenceId, unitId) {\n  return async (dispatch, getState) => {\n    const { models } = getState();\n    if (models.units[unitId].complete) {\n      return {}; // do nothing. Things don't get uncompleted after they are completed.\n    }\n\n    try {\n      const isComplete = await getBlockCompletion(courseId, sequenceId, unitId);\n      dispatch(updateModel({\n        modelType: 'units',\n        model: {\n          id: unitId,\n          complete: isComplete,\n        },\n      }));\n      return isComplete;\n    } catch (error) {\n      logError(error);\n    }\n    return {};\n  };\n}\n\nexport function saveSequencePosition(courseId, sequenceId, activeUnitIndex) {\n  return async (dispatch, getState) => {\n    const { models } = getState();\n    const initialActiveUnitIndex = models.sequences[sequenceId].activeUnitIndex;\n    // Optimistically update the position.\n    dispatch(updateModel({\n      modelType: 'sequences',\n      model: {\n        id: sequenceId,\n        activeUnitIndex,\n      },\n    }));\n    try {\n      await postSequencePosition(courseId, sequenceId, activeUnitIndex);\n      // Update again under the assumption that the above call succeeded, since it doesn't return a\n      // meaningful response.\n      dispatch(updateModel({\n        modelType: 'sequences',\n        model: {\n          id: sequenceId,\n          activeUnitIndex,\n        },\n      }));\n    } catch (error) {\n      logError(error);\n      dispatch(updateModel({\n        modelType: 'sequences',\n        model: {\n          id: sequenceId,\n          activeUnitIndex: initialActiveUnitIndex,\n        },\n      }));\n    }\n  };\n}\n\nexport function saveIntegritySignature(courseId, isMasquerading) {\n  return async (dispatch) => {\n    try {\n      // If the request is made by a staff user masquerading as a specific learner,\n      // don't actually create a signature for them on the backend,\n      // only the modal dialog will be dismissed\n      if (!isMasquerading) {\n        await postIntegritySignature(courseId);\n      }\n      dispatch(updateModel({\n        modelType: 'coursewareMeta',\n        model: {\n          id: courseId,\n          userNeedsIntegritySignature: false,\n        },\n      }));\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n\nexport function getCourseDiscussionTopics(courseId) {\n  return async (dispatch) => {\n    try {\n      const config = await getCourseDiscussionConfig(courseId);\n      // Only load topics for the openedx provider, the legacy provider uses\n      // the xblock\n      if (config.provider === 'openedx') {\n        const topics = await getCourseTopics(courseId);\n        dispatch(updateModels({\n          modelType: 'discussionTopics',\n          models: topics.filter(topic => topic.usageKey),\n          idField: 'usageKey',\n        }));\n      }\n    } catch (error) {\n      logError(error);\n    }\n  };\n}\n"],"mappings":"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"}