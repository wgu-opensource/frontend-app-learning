{"version":3,"sources":["../../src/courseware/CoursewareContainer.jsx"],"names":["checkResumeRedirect","courseStatus","courseId","sequenceId","firstSequenceId","then","data","sectionId","unitId","history","replace","checkSectionUnitToUnitRedirect","sequenceStatus","section","checkSectionToSequenceRedirect","sequenceIds","checkUnitToSequenceUnitRedirect","sequenceMightBeUnit","routeUnitId","parentId","checkSequenceToSequenceUnitRedirect","sequence","id","unitIds","undefined","length","nextUnitId","activeUnitIndex","checkSequenceUnitMarkerToSequenceUnitRedirect","hasUnits","firstUnitId","lastUnitId","CoursewareContainer","Component","props","saveUnitPosition","indexOf","saveSequencePosition","fetchCourse","fetchSequence","match","params","checkBlockCompletion","push","course","nextSequence","celebrateFirstSection","celebrations","firstSection","previousSequence","componentDidMount","routeCourseId","routeSequenceId","checkFetchCourse","checkFetchSequence","componentDidUpdate","sectionViaSequenceId","checkSaveSequencePosition","render","handleNextSequenceClick","handlePreviousSequenceClick","handleUnitNavigationClick","sequenceShape","PropTypes","shape","string","isRequired","arrayOf","sectionShape","courseShape","bool","propTypes","oneOf","func","defaultProps","currentCourseSelector","state","models","coursewareMeta","courseware","coursesById","currentSequenceSelector","sequences","sequencesById","sequenceIdsSelector","sections","sectionsById","sectionIds","flatMap","previousSequenceSelector","sequenceIndex","previousSequenceId","nextSequenceSelector","nextSequenceId","firstSequenceIdSelector","sectionViaSequenceIdSelector","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { history } from '@edx/frontend-platform';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { defaultMemoize as memoize } from 'reselect';\n\nimport {\n  checkBlockCompletion,\n  fetchCourse,\n  fetchSequence,\n  getResumeBlock,\n  getSequenceForUnitDeprecated,\n  saveSequencePosition,\n} from './data';\nimport { TabPage } from '../tab-page';\n\nimport Course from './course';\nimport { handleNextSectionCelebration } from './course/celebration';\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkResumeRedirect = memoize((courseStatus, courseId, sequenceId, firstSequenceId) => {\n  if (courseStatus === 'loaded' && !sequenceId) {\n    // Note that getResumeBlock is just an API call, not a redux thunk.\n    getResumeBlock(courseId).then((data) => {\n      // This is a replace because we don't want this change saved in the browser's history.\n      if (data.sectionId && data.unitId) {\n        history.replace(`/course/${courseId}/${data.sectionId}/${data.unitId}`);\n      } else if (firstSequenceId) {\n        history.replace(`/course/${courseId}/${firstSequenceId}`);\n      }\n    });\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionUnitToUnitRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && unitId) {\n    history.replace(`/course/${courseId}/${unitId}`);\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionToSequenceRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && !unitId) {\n    // If the section is non-empty, redirect to its first sequence.\n    if (section.sequenceIds && section.sequenceIds[0]) {\n      history.replace(`/course/${courseId}/${section.sequenceIds[0]}`);\n    // Otherwise, just go to the course root, letting the resume redirect take care of things.\n    } else {\n      history.replace(`/course/${courseId}`);\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkUnitToSequenceUnitRedirect = memoize((\n  courseStatus, courseId, sequenceStatus, sequenceMightBeUnit, sequenceId, section, routeUnitId,\n) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && !section && !routeUnitId) {\n    if (sequenceMightBeUnit) {\n      // If the sequence failed to load as a sequence, but it is marked as a possible unit, then we need to look up the\n      // correct parent sequence for it, and redirect there.\n      const unitId = sequenceId; // just for clarity during the rest of this method\n      getSequenceForUnitDeprecated(courseId, unitId).then(\n        parentId => {\n          if (parentId) {\n            history.replace(`/course/${courseId}/${parentId}/${unitId}`);\n          } else {\n            history.replace(`/course/${courseId}`);\n          }\n        },\n        () => { // error case\n          history.replace(`/course/${courseId}`);\n        },\n      );\n    } else {\n      // Invalid sequence that isn't a unit either. Redirect up to main course.\n      history.replace(`/course/${courseId}`);\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceToSequenceUnitRedirect = memoize((courseId, sequenceStatus, sequence, unitId) => {\n  if (sequenceStatus === 'loaded' && sequence.id && !unitId) {\n    if (sequence.unitIds !== undefined && sequence.unitIds.length > 0) {\n      const nextUnitId = sequence.unitIds[sequence.activeUnitIndex];\n      // This is a replace because we don't want this change saved in the browser's history.\n      history.replace(`/course/${courseId}/${sequence.id}/${nextUnitId}`);\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceUnitMarkerToSequenceUnitRedirect = memoize((courseId, sequenceStatus, sequence, unitId) => {\n  if (sequenceStatus !== 'loaded' || !sequence.id) {\n    return;\n  }\n\n  const hasUnits = sequence.unitIds?.length > 0;\n\n  if (unitId === 'first') {\n    if (hasUnits) {\n      const firstUnitId = sequence.unitIds[0];\n      history.replace(`/course/${courseId}/${sequence.id}/${firstUnitId}`);\n    } else {\n      // No units... go to general sequence page\n      history.replace(`/course/${courseId}/${sequence.id}`);\n    }\n  } else if (unitId === 'last') {\n    if (hasUnits) {\n      const lastUnitId = sequence.unitIds[sequence.unitIds.length - 1];\n      history.replace(`/course/${courseId}/${sequence.id}/${lastUnitId}`);\n    } else {\n      // No units... go to general sequence page\n      history.replace(`/course/${courseId}/${sequence.id}`);\n    }\n  }\n});\n\nclass CoursewareContainer extends Component {\n  checkSaveSequencePosition = memoize((unitId) => {\n    const {\n      courseId,\n      sequenceId,\n      sequenceStatus,\n      sequence,\n    } = this.props;\n    if (sequenceStatus === 'loaded' && sequence.saveUnitPosition && unitId) {\n      const activeUnitIndex = sequence.unitIds.indexOf(unitId);\n      this.props.saveSequencePosition(courseId, sequenceId, activeUnitIndex);\n    }\n  });\n\n  checkFetchCourse = memoize((courseId) => {\n    this.props.fetchCourse(courseId);\n  });\n\n  checkFetchSequence = memoize((sequenceId) => {\n    if (sequenceId) {\n      this.props.fetchSequence(sequenceId);\n    }\n  });\n\n  componentDidMount() {\n    const {\n      match: {\n        params: {\n          courseId: routeCourseId,\n          sequenceId: routeSequenceId,\n        },\n      },\n    } = this.props;\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n  }\n\n  componentDidUpdate() {\n    const {\n      courseId,\n      sequenceId,\n      courseStatus,\n      sequenceStatus,\n      sequenceMightBeUnit,\n      sequence,\n      firstSequenceId,\n      sectionViaSequenceId,\n      match: {\n        params: {\n          courseId: routeCourseId,\n          sequenceId: routeSequenceId,\n          unitId: routeUnitId,\n        },\n      },\n    } = this.props;\n\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n\n    // Check if we should save our sequence position.  Only do this when the route unit ID changes.\n    this.checkSaveSequencePosition(routeUnitId);\n\n    // Coerce the route ids into null here because they can be undefined, but the redux ids would be null instead.\n    if (courseId !== (routeCourseId || null) || sequenceId !== (routeSequenceId || null)) {\n      // The non-route ids are pulled from redux state - they are changed at the same time as the status variables.\n      // But the route ids are pulled directly from the route. So if the route changes, and we start a fetch above,\n      // there's a race condition where the route ids are for one course, but the status and the other ids are for a\n      // different course. Since all the logic below depends on the status variables and the route unit id, we'll wait\n      // until the ids match and thus the redux states got updated. So just bail for now.\n      return;\n    }\n\n    // All courseware URLs should normalize to the format /course/:courseId/:sequenceId/:unitId\n    // via the series of redirection rules below.\n    // See docs/decisions/0008-liberal-courseware-path-handling.md for more context.\n    // (It would be ideal to move this logic into the thunks layer and perform\n    //  all URL-changing checks at once. See TNL-8182.)\n\n    // Check resume redirect:\n    //   /course/:courseId -> /course/:courseId/:sequenceId/:unitId\n    // based on sequence/unit where user was last active.\n    checkResumeRedirect(courseStatus, courseId, sequenceId, firstSequenceId);\n\n    // Check section-unit to unit redirect:\n    //    /course/:courseId/:sectionId/:unitId -> /course/:courseId/:unitId\n    // by simply ignoring the :sectionId.\n    // (It may be desirable at some point to be smarter here; for example, we could replace\n    //  :sectionId with the parent sequence of :unitId and/or check whether the :unitId\n    //  is actually within :sectionId. However, the way our Redux store is currently factored,\n    //  the unit's metadata is not available to us if the section isn't loadable.)\n    // Before performing this redirect, we *do* still check that a section is loadable;\n    // otherwise, we could get stuck in a redirect loop, since a sequence that failed to load\n    // would endlessly redirect to itself through `checkSectionUnitToUnitRedirect`\n    // and `checkUnitToSequenceUnitRedirect`.\n    checkSectionUnitToUnitRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId);\n\n    // Check section to sequence redirect:\n    //    /course/:courseId/:sectionId         -> /course/:courseId/:sequenceId\n    // by redirecting to the first sequence within the section.\n    checkSectionToSequenceRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId);\n\n    // Check unit to sequence-unit redirect:\n    //    /course/:courseId/:unitId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID of the parent sequence of :unitId.\n    checkUnitToSequenceUnitRedirect(\n      courseStatus, courseId, sequenceStatus, sequenceMightBeUnit, sequenceId, sectionViaSequenceId, routeUnitId,\n    );\n\n    // Check sequence to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the most-recently-active unit in the sequence, OR\n    // the ID of the first unit the sequence if none is active.\n    checkSequenceToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId);\n\n    // Check sequence-unit marker to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId/first -> /course/:courseId/:sequenceId/:unitId\n    //    /course/:courseId/:sequenceId/last -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the first or last unit in the sequence.\n    // \"Sequence unit marker\" is an invented term used only in this component.\n    checkSequenceUnitMarkerToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId);\n  }\n\n  handleUnitNavigationClick = (nextUnitId) => {\n    const {\n      courseId, sequenceId,\n      match: {\n        params: {\n          unitId: routeUnitId,\n        },\n      },\n    } = this.props;\n\n    this.props.checkBlockCompletion(courseId, sequenceId, routeUnitId);\n    history.push(`/course/${courseId}/${sequenceId}/${nextUnitId}`);\n  }\n\n  handleNextSequenceClick = () => {\n    const {\n      course,\n      courseId,\n      nextSequence,\n      sequence,\n      sequenceId,\n    } = this.props;\n\n    if (nextSequence !== null) {\n      history.push(`/course/${courseId}/${nextSequence.id}/first`);\n\n      const celebrateFirstSection = course && course.celebrations && course.celebrations.firstSection;\n      if (celebrateFirstSection && sequence.sectionId !== nextSequence.sectionId) {\n        handleNextSectionCelebration(sequenceId, nextSequence.id);\n      }\n    }\n  }\n\n  handlePreviousSequenceClick = () => {\n    const { previousSequence, courseId } = this.props;\n    if (previousSequence !== null) {\n      history.push(`/course/${courseId}/${previousSequence.id}/last`);\n    }\n  }\n\n  render() {\n    const {\n      courseStatus,\n      courseId,\n      sequenceId,\n      match: {\n        params: {\n          unitId: routeUnitId,\n        },\n      },\n    } = this.props;\n\n    return (\n      <TabPage\n        activeTabSlug=\"courseware\"\n        courseId={courseId}\n        unitId={routeUnitId}\n        courseStatus={courseStatus}\n        metadataModel=\"coursewareMeta\"\n      >\n        <Course\n          courseId={courseId}\n          sequenceId={sequenceId}\n          unitId={routeUnitId}\n          nextSequenceHandler={this.handleNextSequenceClick}\n          previousSequenceHandler={this.handlePreviousSequenceClick}\n          unitNavigationHandler={this.handleUnitNavigationClick}\n        />\n      </TabPage>\n    );\n  }\n}\n\nconst sequenceShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  unitIds: PropTypes.arrayOf(PropTypes.string),\n  sectionId: PropTypes.string.isRequired,\n});\n\nconst sectionShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  sequenceIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n});\n\nconst courseShape = PropTypes.shape({\n  celebrations: PropTypes.shape({\n    firstSection: PropTypes.bool,\n  }),\n});\n\nCoursewareContainer.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      courseId: PropTypes.string.isRequired,\n      sequenceId: PropTypes.string,\n      unitId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  courseId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  firstSequenceId: PropTypes.string,\n  courseStatus: PropTypes.oneOf(['loaded', 'loading', 'failed', 'denied']).isRequired,\n  sequenceStatus: PropTypes.oneOf(['loaded', 'loading', 'failed']).isRequired,\n  sequenceMightBeUnit: PropTypes.bool.isRequired,\n  nextSequence: sequenceShape,\n  previousSequence: sequenceShape,\n  sectionViaSequenceId: sectionShape,\n  course: courseShape,\n  sequence: sequenceShape,\n  saveSequencePosition: PropTypes.func.isRequired,\n  checkBlockCompletion: PropTypes.func.isRequired,\n  fetchCourse: PropTypes.func.isRequired,\n  fetchSequence: PropTypes.func.isRequired,\n};\n\nCoursewareContainer.defaultProps = {\n  courseId: null,\n  sequenceId: null,\n  firstSequenceId: null,\n  nextSequence: null,\n  previousSequence: null,\n  sectionViaSequenceId: null,\n  course: null,\n  sequence: null,\n};\n\nconst currentCourseSelector = createSelector(\n  (state) => state.models.coursewareMeta || {},\n  (state) => state.courseware.courseId,\n  (coursesById, courseId) => (coursesById[courseId] ? coursesById[courseId] : null),\n);\n\nconst currentSequenceSelector = createSelector(\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequencesById, sequenceId) => (sequencesById[sequenceId] ? sequencesById[sequenceId] : null),\n);\n\nconst sequenceIdsSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections,\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return [];\n    }\n    const { sectionIds = [] } = course;\n    return sectionIds.flatMap(sectionId => sectionsById[sectionId].sequenceIds);\n  },\n);\n\nconst previousSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const previousSequenceId = sequenceIndex > 0 ? sequenceIds[sequenceIndex - 1] : null;\n    return previousSequenceId !== null ? sequencesById[previousSequenceId] : null;\n  },\n);\n\nconst nextSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n    return nextSequenceId !== null ? sequencesById[nextSequenceId] : null;\n  },\n);\n\nconst firstSequenceIdSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections || {},\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return null;\n    }\n    const { sectionIds = [] } = course;\n\n    if (sectionIds.length === 0) {\n      return null;\n    }\n\n    return sectionsById[sectionIds[0]].sequenceIds[0];\n  },\n);\n\nconst sectionViaSequenceIdSelector = createSelector(\n  (state) => state.models.sections || {},\n  (state) => state.courseware.sequenceId,\n  (sectionsById, sequenceId) => (sectionsById[sequenceId] ? sectionsById[sequenceId] : null),\n);\n\nconst mapStateToProps = (state) => {\n  const {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n  } = state.courseware;\n\n  return {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n    course: currentCourseSelector(state),\n    sequence: currentSequenceSelector(state),\n    previousSequence: previousSequenceSelector(state),\n    nextSequence: nextSequenceSelector(state),\n    firstSequenceId: firstSequenceIdSelector(state),\n    sectionViaSequenceId: sectionViaSequenceIdSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps, {\n  checkBlockCompletion,\n  saveSequencePosition,\n  fetchCourse,\n  fetchSequence,\n})(CoursewareContainer);\n"],"file":"CoursewareContainer.js"}