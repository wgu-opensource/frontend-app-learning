{"version":3,"file":"CoursewareContainer.js","names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_reactRedux","_toolkit","_reselect","_data","_tabPage","_course","_celebration","_utils","_jsxRuntime","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","value","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","checkResumeRedirect","memoize","courseStatus","courseId","sequenceId","firstSequenceId","navigate","getResumeBlock","then","data","sectionId","unitId","replace","checkSectionUnitToUnitRedirect","sequenceStatus","section","checkSectionToSequenceRedirect","sequenceIds","checkUnitToSequenceUnitRedirect","sequenceMightBeUnit","routeUnitId","getSequenceForUnitDeprecated","parentId","checkSequenceToSequenceUnitRedirect","sequence","id","unitIds","length","nextUnitId","activeUnitIndex","checkSequenceUnitMarkerToSequenceUnitRedirect","hasUnits","firstUnitId","lastUnitId","CoursewareContainer","Component","constructor","arguments","props","saveUnitPosition","indexOf","saveSequencePosition","fetchCourse","fetchSequence","checkBlockCompletion","course","nextSequence","celebrateFirstSection","celebrations","firstSection","handleNextSectionCelebration","componentDidMount","routeCourseId","routeSequenceId","checkFetchCourse","checkFetchSequence","componentDidUpdate","sectionViaSequenceId","checkSaveSequencePosition","render","jsx","TabPage","activeTabSlug","metadataModel","children","nextSequenceHandler","handleNextSequenceClick","previousSequenceHandler","handlePreviousSequenceClick","unitNavigationHandler","handleUnitNavigationClick","sequenceShape","PropTypes","shape","string","isRequired","arrayOf","any","sectionShape","courseShape","bool","propTypes","oneOf","previousSequence","func","defaultProps","currentCourseSelector","createSelector","state","models","coursewareMeta","courseware","coursesById","currentSequenceSelector","sequences","sequencesById","sequenceIdsSelector","sections","sectionsById","sectionIds","flatMap","previousSequenceSelector","sequenceIndex","previousSequenceId","nextSequenceSelector","nextSequenceId","firstSequenceIdSelector","sectionViaSequenceIdSelector","mapStateToProps","_default","connect","withParamsAndNavigation","exports"],"sources":["../../src/courseware/CoursewareContainer.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { defaultMemoize as memoize } from 'reselect';\n\nimport {\n  checkBlockCompletion,\n  fetchCourse,\n  fetchSequence,\n  getResumeBlock,\n  getSequenceForUnitDeprecated,\n  saveSequencePosition,\n} from './data';\nimport { TabPage } from '../tab-page';\n\nimport Course from './course';\nimport { handleNextSectionCelebration } from './course/celebration';\nimport withParamsAndNavigation from './utils';\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkResumeRedirect = memoize((courseStatus, courseId, sequenceId, firstSequenceId, navigate) => {\n  if (courseStatus === 'loaded' && !sequenceId) {\n    // Note that getResumeBlock is just an API call, not a redux thunk.\n    getResumeBlock(courseId).then((data) => {\n      // This is a replace because we don't want this change saved in the browser's history.\n      if (data.sectionId && data.unitId) {\n        navigate(`/course/${courseId}/${data.sectionId}/${data.unitId}`, { replace: true });\n      } else if (firstSequenceId) {\n        navigate(`/course/${courseId}/${firstSequenceId}`, { replace: true });\n      }\n    });\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionUnitToUnitRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId, navigate) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && unitId) {\n    navigate(`/course/${courseId}/${unitId}`, { replace: true });\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionToSequenceRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId, navigate) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && !unitId) {\n    // If the section is non-empty, redirect to its first sequence.\n    if (section.sequenceIds && section.sequenceIds[0]) {\n      navigate(`/course/${courseId}/${section.sequenceIds[0]}`, { replace: true });\n    // Otherwise, just go to the course root, letting the resume redirect take care of things.\n    } else {\n      navigate(`/course/${courseId}`, { replace: true });\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkUnitToSequenceUnitRedirect = memoize(\n  (courseStatus, courseId, sequenceStatus, sequenceMightBeUnit, sequenceId, section, routeUnitId, navigate) => {\n    if (courseStatus === 'loaded' && sequenceStatus === 'failed' && !section && !routeUnitId) {\n      if (sequenceMightBeUnit) {\n        // If the sequence failed to load as a sequence, but it is marked as a possible unit, then\n        // we need to look up the correct parent sequence for it, and redirect there.\n        const unitId = sequenceId; // just for clarity during the rest of this method\n        getSequenceForUnitDeprecated(courseId, unitId).then(\n          parentId => {\n            if (parentId) {\n              navigate(`/course/${courseId}/${parentId}/${unitId}`, { replace: true });\n            } else {\n              navigate(`/course/${courseId}`, { replace: true });\n            }\n          },\n          () => { // error case\n            navigate(`/course/${courseId}`, { replace: true });\n          },\n        );\n      } else {\n        // Invalid sequence that isn't a unit either. Redirect up to main course.\n        navigate(`/course/${courseId}`, { replace: true });\n      }\n    }\n  },\n);\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceToSequenceUnitRedirect = memoize((courseId, sequenceStatus, sequence, unitId, navigate) => {\n  if (sequenceStatus === 'loaded' && sequence.id && !unitId) {\n    if (sequence.unitIds !== undefined && sequence.unitIds.length > 0) {\n      const nextUnitId = sequence.unitIds[sequence.activeUnitIndex];\n      // This is a replace because we don't want this change saved in the browser's history.\n      navigate(`/course/${courseId}/${sequence.id}/${nextUnitId}`, { replace: true });\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceUnitMarkerToSequenceUnitRedirect = memoize(\n  (courseId, sequenceStatus, sequence, unitId, navigate) => {\n    if (sequenceStatus !== 'loaded' || !sequence.id) {\n      return;\n    }\n\n    const hasUnits = sequence.unitIds?.length > 0;\n\n    if (unitId === 'first') {\n      if (hasUnits) {\n        const firstUnitId = sequence.unitIds[0];\n        navigate(`/course/${courseId}/${sequence.id}/${firstUnitId}`, { replace: true });\n      } else {\n      // No units... go to general sequence page\n        navigate(`/course/${courseId}/${sequence.id}`, { replace: true });\n      }\n    } else if (unitId === 'last') {\n      if (hasUnits) {\n        const lastUnitId = sequence.unitIds[sequence.unitIds.length - 1];\n        navigate(`/course/${courseId}/${sequence.id}/${lastUnitId}`, { replace: true });\n      } else {\n      // No units... go to general sequence page\n        navigate(`/course/${courseId}/${sequence.id}`, { replace: true });\n      }\n    }\n  },\n);\n\nclass CoursewareContainer extends Component {\n  checkSaveSequencePosition = memoize((unitId) => {\n    const {\n      courseId,\n      sequenceId,\n      sequenceStatus,\n      sequence,\n    } = this.props;\n    if (sequenceStatus === 'loaded' && sequence.saveUnitPosition && unitId) {\n      const activeUnitIndex = sequence.unitIds.indexOf(unitId);\n      this.props.saveSequencePosition(courseId, sequenceId, activeUnitIndex);\n    }\n  });\n\n  checkFetchCourse = memoize((courseId) => {\n    this.props.fetchCourse(courseId);\n  });\n\n  checkFetchSequence = memoize((sequenceId) => {\n    if (sequenceId) {\n      this.props.fetchSequence(sequenceId);\n    }\n  });\n\n  componentDidMount() {\n    const {\n      routeCourseId,\n      routeSequenceId,\n    } = this.props;\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n  }\n\n  componentDidUpdate() {\n    const {\n      courseId,\n      sequenceId,\n      courseStatus,\n      sequenceStatus,\n      sequenceMightBeUnit,\n      sequence,\n      firstSequenceId,\n      sectionViaSequenceId,\n      routeCourseId,\n      routeSequenceId,\n      routeUnitId,\n      navigate,\n    } = this.props;\n\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n\n    // Check if we should save our sequence position.  Only do this when the route unit ID changes.\n    this.checkSaveSequencePosition(routeUnitId);\n\n    // Coerce the route ids into null here because they can be undefined, but the redux ids would be null instead.\n    if (courseId !== (routeCourseId || null) || sequenceId !== (routeSequenceId || null)) {\n      // The non-route ids are pulled from redux state - they are changed at the same time as the status variables.\n      // But the route ids are pulled directly from the route. So if the route changes, and we start a fetch above,\n      // there's a race condition where the route ids are for one course, but the status and the other ids are for a\n      // different course. Since all the logic below depends on the status variables and the route unit id, we'll wait\n      // until the ids match and thus the redux states got updated. So just bail for now.\n      return;\n    }\n\n    // All courseware URLs should normalize to the format /course/:courseId/:sequenceId/:unitId\n    // via the series of redirection rules below.\n    // See docs/decisions/0008-liberal-courseware-path-handling.md for more context.\n    // (It would be ideal to move this logic into the thunks layer and perform\n    //  all URL-changing checks at once. See TNL-8182.)\n\n    // Check resume redirect:\n    //   /course/:courseId -> /course/:courseId/:sequenceId/:unitId\n    // based on sequence/unit where user was last active.\n    checkResumeRedirect(courseStatus, courseId, sequenceId, firstSequenceId, navigate);\n\n    // Check section-unit to unit redirect:\n    //    /course/:courseId/:sectionId/:unitId -> /course/:courseId/:unitId\n    // by simply ignoring the :sectionId.\n    // (It may be desirable at some point to be smarter here; for example, we could replace\n    //  :sectionId with the parent sequence of :unitId and/or check whether the :unitId\n    //  is actually within :sectionId. However, the way our Redux store is currently factored,\n    //  the unit's metadata is not available to us if the section isn't loadable.)\n    // Before performing this redirect, we *do* still check that a section is loadable;\n    // otherwise, we could get stuck in a redirect loop, since a sequence that failed to load\n    // would endlessly redirect to itself through `checkSectionUnitToUnitRedirect`\n    // and `checkUnitToSequenceUnitRedirect`.\n    checkSectionUnitToUnitRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId, navigate);\n\n    // Check section to sequence redirect:\n    //    /course/:courseId/:sectionId         -> /course/:courseId/:sequenceId\n    // by redirecting to the first sequence within the section.\n    checkSectionToSequenceRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId, navigate);\n\n    // Check unit to sequence-unit redirect:\n    //    /course/:courseId/:unitId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID of the parent sequence of :unitId.\n    checkUnitToSequenceUnitRedirect((\n      courseStatus, courseId, sequenceStatus, sequenceMightBeUnit,\n      sequenceId, sectionViaSequenceId, routeUnitId, navigate\n    ));\n\n    // Check sequence to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the most-recently-active unit in the sequence, OR\n    // the ID of the first unit the sequence if none is active.\n    checkSequenceToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId, navigate);\n\n    // Check sequence-unit marker to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId/first -> /course/:courseId/:sequenceId/:unitId\n    //    /course/:courseId/:sequenceId/last -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the first or last unit in the sequence.\n    // \"Sequence unit marker\" is an invented term used only in this component.\n    checkSequenceUnitMarkerToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId, navigate);\n  }\n\n  handleUnitNavigationClick = () => {\n    const {\n      courseId,\n      sequenceId,\n      routeUnitId,\n    } = this.props;\n\n    this.props.checkBlockCompletion(courseId, sequenceId, routeUnitId);\n  };\n\n  handleNextSequenceClick = () => {\n    const {\n      course,\n      nextSequence,\n      sequence,\n      sequenceId,\n    } = this.props;\n\n    if (nextSequence !== null) {\n      const celebrateFirstSection = course && course.celebrations && course.celebrations.firstSection;\n      if (celebrateFirstSection && sequence.sectionId !== nextSequence.sectionId) {\n        handleNextSectionCelebration(sequenceId, nextSequence.id);\n      }\n    }\n  };\n\n  handlePreviousSequenceClick = () => {};\n\n  render() {\n    const {\n      courseStatus,\n      courseId,\n      sequenceId,\n      routeUnitId,\n    } = this.props;\n\n    return (\n      <TabPage\n        activeTabSlug=\"courseware\"\n        courseId={courseId}\n        unitId={routeUnitId}\n        courseStatus={courseStatus}\n        metadataModel=\"coursewareMeta\"\n      >\n        <Course\n          courseId={courseId}\n          sequenceId={sequenceId}\n          unitId={routeUnitId}\n          nextSequenceHandler={this.handleNextSequenceClick}\n          previousSequenceHandler={this.handlePreviousSequenceClick}\n          unitNavigationHandler={this.handleUnitNavigationClick}\n        />\n      </TabPage>\n    );\n  }\n}\n\nconst sequenceShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  unitIds: PropTypes.arrayOf(PropTypes.string),\n  sectionId: PropTypes.string.isRequired,\n  saveUnitPosition: PropTypes.any, // eslint-disable-line\n});\n\nconst sectionShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  sequenceIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n});\n\nconst courseShape = PropTypes.shape({\n  celebrations: PropTypes.shape({\n    firstSection: PropTypes.bool,\n  }),\n});\n\nCoursewareContainer.propTypes = {\n  routeCourseId: PropTypes.string.isRequired,\n  routeSequenceId: PropTypes.string,\n  routeUnitId: PropTypes.string,\n  courseId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  firstSequenceId: PropTypes.string,\n  courseStatus: PropTypes.oneOf(['loaded', 'loading', 'failed', 'denied']).isRequired,\n  sequenceStatus: PropTypes.oneOf(['loaded', 'loading', 'failed']).isRequired,\n  sequenceMightBeUnit: PropTypes.bool.isRequired,\n  nextSequence: sequenceShape,\n  previousSequence: sequenceShape,\n  sectionViaSequenceId: sectionShape,\n  course: courseShape,\n  sequence: sequenceShape,\n  saveSequencePosition: PropTypes.func.isRequired,\n  checkBlockCompletion: PropTypes.func.isRequired,\n  fetchCourse: PropTypes.func.isRequired,\n  fetchSequence: PropTypes.func.isRequired,\n  navigate: PropTypes.func.isRequired,\n};\n\nCoursewareContainer.defaultProps = {\n  courseId: null,\n  sequenceId: null,\n  routeSequenceId: null,\n  routeUnitId: null,\n  firstSequenceId: null,\n  nextSequence: null,\n  previousSequence: null,\n  sectionViaSequenceId: null,\n  course: null,\n  sequence: null,\n};\n\nconst currentCourseSelector = createSelector(\n  (state) => state.models.coursewareMeta || {},\n  (state) => state.courseware.courseId,\n  (coursesById, courseId) => (coursesById[courseId] ? coursesById[courseId] : null),\n);\n\nconst currentSequenceSelector = createSelector(\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequencesById, sequenceId) => (sequencesById[sequenceId] ? sequencesById[sequenceId] : null),\n);\n\nconst sequenceIdsSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections,\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return [];\n    }\n    const { sectionIds = [] } = course;\n    return sectionIds.flatMap(sectionId => sectionsById[sectionId].sequenceIds);\n  },\n);\n\nconst previousSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const previousSequenceId = sequenceIndex > 0 ? sequenceIds[sequenceIndex - 1] : null;\n    return previousSequenceId !== null ? sequencesById[previousSequenceId] : null;\n  },\n);\n\nconst nextSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n    return nextSequenceId !== null ? sequencesById[nextSequenceId] : null;\n  },\n);\n\nconst firstSequenceIdSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections || {},\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return null;\n    }\n    const { sectionIds = [] } = course;\n\n    if (sectionIds.length === 0) {\n      return null;\n    }\n\n    return sectionsById[sectionIds[0]].sequenceIds[0];\n  },\n);\n\nconst sectionViaSequenceIdSelector = createSelector(\n  (state) => state.models.sections || {},\n  (state) => state.courseware.sequenceId,\n  (sectionsById, sequenceId) => (sectionsById[sequenceId] ? sectionsById[sequenceId] : null),\n);\n\nconst mapStateToProps = (state) => {\n  const {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n  } = state.courseware;\n\n  return {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n    course: currentCourseSelector(state),\n    sequence: currentSequenceSelector(state),\n    previousSequence: previousSequenceSelector(state),\n    nextSequence: nextSequenceSelector(state),\n    firstSequenceId: firstSequenceIdSelector(state),\n    sectionViaSequenceId: sectionViaSequenceIdSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps, {\n  checkBlockCompletion,\n  saveSequencePosition,\n  fetchCourse,\n  fetchSequence,\n})(withParamsAndNavigation(CoursewareContainer));\n"],"mappings":"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"}