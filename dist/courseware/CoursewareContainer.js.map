{"version":3,"file":"CoursewareContainer.js","names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_reactRedux","_frontendPlatform","_toolkit","_reselect","_data","_tabPage","_course","_celebration","_jsxRuntime","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","value","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","checkResumeRedirect","memoize","courseStatus","courseId","sequenceId","firstSequenceId","getResumeBlock","then","data","sectionId","unitId","history","replace","checkSectionUnitToUnitRedirect","sequenceStatus","section","checkSectionToSequenceRedirect","sequenceIds","checkUnitToSequenceUnitRedirect","sequenceMightBeUnit","routeUnitId","getSequenceForUnitDeprecated","parentId","checkSequenceToSequenceUnitRedirect","sequence","id","unitIds","length","nextUnitId","activeUnitIndex","checkSequenceUnitMarkerToSequenceUnitRedirect","hasUnits","firstUnitId","lastUnitId","CoursewareContainer","Component","constructor","arguments","props","saveUnitPosition","indexOf","saveSequencePosition","fetchCourse","fetchSequence","match","params","checkBlockCompletion","push","course","nextSequence","celebrateFirstSection","celebrations","firstSection","handleNextSectionCelebration","previousSequence","componentDidMount","routeCourseId","routeSequenceId","checkFetchCourse","checkFetchSequence","componentDidUpdate","sectionViaSequenceId","checkSaveSequencePosition","render","jsx","TabPage","activeTabSlug","metadataModel","children","nextSequenceHandler","handleNextSequenceClick","previousSequenceHandler","handlePreviousSequenceClick","unitNavigationHandler","handleUnitNavigationClick","sequenceShape","PropTypes","shape","string","isRequired","arrayOf","any","sectionShape","courseShape","bool","propTypes","oneOf","func","defaultProps","currentCourseSelector","createSelector","state","models","coursewareMeta","courseware","coursesById","currentSequenceSelector","sequences","sequencesById","sequenceIdsSelector","sections","sectionsById","sectionIds","flatMap","previousSequenceSelector","sequenceIndex","previousSequenceId","nextSequenceSelector","nextSequenceId","firstSequenceIdSelector","sectionViaSequenceIdSelector","mapStateToProps","_default","connect","exports"],"sources":["../../src/courseware/CoursewareContainer.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { history } from '@edx/frontend-platform';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { defaultMemoize as memoize } from 'reselect';\n\nimport {\n  checkBlockCompletion,\n  fetchCourse,\n  fetchSequence,\n  getResumeBlock,\n  getSequenceForUnitDeprecated,\n  saveSequencePosition,\n} from './data';\nimport { TabPage } from '../tab-page';\n\nimport Course from './course';\nimport { handleNextSectionCelebration } from './course/celebration';\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkResumeRedirect = memoize((courseStatus, courseId, sequenceId, firstSequenceId) => {\n  if (courseStatus === 'loaded' && !sequenceId) {\n    // Note that getResumeBlock is just an API call, not a redux thunk.\n    getResumeBlock(courseId).then((data) => {\n      // This is a replace because we don't want this change saved in the browser's history.\n      if (data.sectionId && data.unitId) {\n        history.replace(`/course/${courseId}/${data.sectionId}/${data.unitId}`);\n      } else if (firstSequenceId) {\n        history.replace(`/course/${courseId}/${firstSequenceId}`);\n      }\n    });\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionUnitToUnitRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && unitId) {\n    history.replace(`/course/${courseId}/${unitId}`);\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSectionToSequenceRedirect = memoize((courseStatus, courseId, sequenceStatus, section, unitId) => {\n  if (courseStatus === 'loaded' && sequenceStatus === 'failed' && section && !unitId) {\n    // If the section is non-empty, redirect to its first sequence.\n    if (section.sequenceIds && section.sequenceIds[0]) {\n      history.replace(`/course/${courseId}/${section.sequenceIds[0]}`);\n    // Otherwise, just go to the course root, letting the resume redirect take care of things.\n    } else {\n      history.replace(`/course/${courseId}`);\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkUnitToSequenceUnitRedirect = memoize(\n  (courseStatus, courseId, sequenceStatus, sequenceMightBeUnit, sequenceId, section, routeUnitId) => {\n    if (courseStatus === 'loaded' && sequenceStatus === 'failed' && !section && !routeUnitId) {\n      if (sequenceMightBeUnit) {\n        // If the sequence failed to load as a sequence, but it is marked as a possible unit, then\n        // we need to look up the correct parent sequence for it, and redirect there.\n        const unitId = sequenceId; // just for clarity during the rest of this method\n        getSequenceForUnitDeprecated(courseId, unitId).then(\n          parentId => {\n            if (parentId) {\n              history.replace(`/course/${courseId}/${parentId}/${unitId}`);\n            } else {\n              history.replace(`/course/${courseId}`);\n            }\n          },\n          () => { // error case\n            history.replace(`/course/${courseId}`);\n          },\n        );\n      } else {\n        // Invalid sequence that isn't a unit either. Redirect up to main course.\n        history.replace(`/course/${courseId}`);\n      }\n    }\n  },\n);\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceToSequenceUnitRedirect = memoize((courseId, sequenceStatus, sequence, unitId) => {\n  if (sequenceStatus === 'loaded' && sequence.id && !unitId) {\n    if (sequence.unitIds !== undefined && sequence.unitIds.length > 0) {\n      const nextUnitId = sequence.unitIds[sequence.activeUnitIndex];\n      // This is a replace because we don't want this change saved in the browser's history.\n      history.replace(`/course/${courseId}/${sequence.id}/${nextUnitId}`);\n    }\n  }\n});\n\n// Look at where this is called in componentDidUpdate for more info about its usage\nconst checkSequenceUnitMarkerToSequenceUnitRedirect = memoize((courseId, sequenceStatus, sequence, unitId) => {\n  if (sequenceStatus !== 'loaded' || !sequence.id) {\n    return;\n  }\n\n  const hasUnits = sequence.unitIds?.length > 0;\n\n  if (unitId === 'first') {\n    if (hasUnits) {\n      const firstUnitId = sequence.unitIds[0];\n      history.replace(`/course/${courseId}/${sequence.id}/${firstUnitId}`);\n    } else {\n      // No units... go to general sequence page\n      history.replace(`/course/${courseId}/${sequence.id}`);\n    }\n  } else if (unitId === 'last') {\n    if (hasUnits) {\n      const lastUnitId = sequence.unitIds[sequence.unitIds.length - 1];\n      history.replace(`/course/${courseId}/${sequence.id}/${lastUnitId}`);\n    } else {\n      // No units... go to general sequence page\n      history.replace(`/course/${courseId}/${sequence.id}`);\n    }\n  }\n});\n\nclass CoursewareContainer extends Component {\n  checkSaveSequencePosition = memoize((unitId) => {\n    const {\n      courseId,\n      sequenceId,\n      sequenceStatus,\n      sequence,\n    } = this.props;\n    if (sequenceStatus === 'loaded' && sequence.saveUnitPosition && unitId) {\n      const activeUnitIndex = sequence.unitIds.indexOf(unitId);\n      this.props.saveSequencePosition(courseId, sequenceId, activeUnitIndex);\n    }\n  });\n\n  checkFetchCourse = memoize((courseId) => {\n    this.props.fetchCourse(courseId);\n  });\n\n  checkFetchSequence = memoize((sequenceId) => {\n    if (sequenceId) {\n      this.props.fetchSequence(sequenceId);\n    }\n  });\n\n  componentDidMount() {\n    const {\n      match: {\n        params: {\n          courseId: routeCourseId,\n          sequenceId: routeSequenceId,\n        },\n      },\n    } = this.props;\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n  }\n\n  componentDidUpdate() {\n    const {\n      courseId,\n      sequenceId,\n      courseStatus,\n      sequenceStatus,\n      sequenceMightBeUnit,\n      sequence,\n      firstSequenceId,\n      sectionViaSequenceId,\n      match: {\n        params: {\n          courseId: routeCourseId,\n          sequenceId: routeSequenceId,\n          unitId: routeUnitId,\n        },\n      },\n    } = this.props;\n\n    // Load data whenever the course or sequence ID changes.\n    this.checkFetchCourse(routeCourseId);\n    this.checkFetchSequence(routeSequenceId);\n\n    // Check if we should save our sequence position.  Only do this when the route unit ID changes.\n    this.checkSaveSequencePosition(routeUnitId);\n\n    // Coerce the route ids into null here because they can be undefined, but the redux ids would be null instead.\n    if (courseId !== (routeCourseId || null) || sequenceId !== (routeSequenceId || null)) {\n      // The non-route ids are pulled from redux state - they are changed at the same time as the status variables.\n      // But the route ids are pulled directly from the route. So if the route changes, and we start a fetch above,\n      // there's a race condition where the route ids are for one course, but the status and the other ids are for a\n      // different course. Since all the logic below depends on the status variables and the route unit id, we'll wait\n      // until the ids match and thus the redux states got updated. So just bail for now.\n      return;\n    }\n\n    // All courseware URLs should normalize to the format /course/:courseId/:sequenceId/:unitId\n    // via the series of redirection rules below.\n    // See docs/decisions/0008-liberal-courseware-path-handling.md for more context.\n    // (It would be ideal to move this logic into the thunks layer and perform\n    //  all URL-changing checks at once. See TNL-8182.)\n\n    // Check resume redirect:\n    //   /course/:courseId -> /course/:courseId/:sequenceId/:unitId\n    // based on sequence/unit where user was last active.\n    checkResumeRedirect(courseStatus, courseId, sequenceId, firstSequenceId);\n\n    // Check section-unit to unit redirect:\n    //    /course/:courseId/:sectionId/:unitId -> /course/:courseId/:unitId\n    // by simply ignoring the :sectionId.\n    // (It may be desirable at some point to be smarter here; for example, we could replace\n    //  :sectionId with the parent sequence of :unitId and/or check whether the :unitId\n    //  is actually within :sectionId. However, the way our Redux store is currently factored,\n    //  the unit's metadata is not available to us if the section isn't loadable.)\n    // Before performing this redirect, we *do* still check that a section is loadable;\n    // otherwise, we could get stuck in a redirect loop, since a sequence that failed to load\n    // would endlessly redirect to itself through `checkSectionUnitToUnitRedirect`\n    // and `checkUnitToSequenceUnitRedirect`.\n    checkSectionUnitToUnitRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId);\n\n    // Check section to sequence redirect:\n    //    /course/:courseId/:sectionId         -> /course/:courseId/:sequenceId\n    // by redirecting to the first sequence within the section.\n    checkSectionToSequenceRedirect(courseStatus, courseId, sequenceStatus, sectionViaSequenceId, routeUnitId);\n\n    // Check unit to sequence-unit redirect:\n    //    /course/:courseId/:unitId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID of the parent sequence of :unitId.\n    checkUnitToSequenceUnitRedirect((\n      courseStatus, courseId, sequenceStatus, sequenceMightBeUnit, sequenceId, sectionViaSequenceId, routeUnitId\n    ));\n\n    // Check sequence to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the most-recently-active unit in the sequence, OR\n    // the ID of the first unit the sequence if none is active.\n    checkSequenceToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId);\n\n    // Check sequence-unit marker to sequence-unit redirect:\n    //    /course/:courseId/:sequenceId/first -> /course/:courseId/:sequenceId/:unitId\n    //    /course/:courseId/:sequenceId/last -> /course/:courseId/:sequenceId/:unitId\n    // by filling in the ID the first or last unit in the sequence.\n    // \"Sequence unit marker\" is an invented term used only in this component.\n    checkSequenceUnitMarkerToSequenceUnitRedirect(courseId, sequenceStatus, sequence, routeUnitId);\n  }\n\n  handleUnitNavigationClick = (nextUnitId) => {\n    const {\n      courseId, sequenceId,\n      match: {\n        params: {\n          unitId: routeUnitId,\n        },\n      },\n    } = this.props;\n\n    this.props.checkBlockCompletion(courseId, sequenceId, routeUnitId);\n    history.push(`/course/${courseId}/${sequenceId}/${nextUnitId}`);\n  };\n\n  handleNextSequenceClick = () => {\n    const {\n      course,\n      courseId,\n      nextSequence,\n      sequence,\n      sequenceId,\n    } = this.props;\n\n    if (nextSequence !== null) {\n      history.push(`/course/${courseId}/${nextSequence.id}/first`);\n\n      const celebrateFirstSection = course && course.celebrations && course.celebrations.firstSection;\n      if (celebrateFirstSection && sequence.sectionId !== nextSequence.sectionId) {\n        handleNextSectionCelebration(sequenceId, nextSequence.id);\n      }\n    }\n  };\n\n  handlePreviousSequenceClick = () => {\n    const { previousSequence, courseId } = this.props;\n    if (previousSequence !== null) {\n      history.push(`/course/${courseId}/${previousSequence.id}/last`);\n    }\n  };\n\n  render() {\n    const {\n      courseStatus,\n      courseId,\n      sequenceId,\n      match: {\n        params: {\n          unitId: routeUnitId,\n        },\n      },\n    } = this.props;\n\n    return (\n      <TabPage\n        activeTabSlug=\"courseware\"\n        courseId={courseId}\n        unitId={routeUnitId}\n        courseStatus={courseStatus}\n        metadataModel=\"coursewareMeta\"\n      >\n        <Course\n          courseId={courseId}\n          sequenceId={sequenceId}\n          unitId={routeUnitId}\n          nextSequenceHandler={this.handleNextSequenceClick}\n          previousSequenceHandler={this.handlePreviousSequenceClick}\n          unitNavigationHandler={this.handleUnitNavigationClick}\n        />\n      </TabPage>\n    );\n  }\n}\n\nconst sequenceShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  unitIds: PropTypes.arrayOf(PropTypes.string),\n  sectionId: PropTypes.string.isRequired,\n  saveUnitPosition: PropTypes.any, // eslint-disable-line\n});\n\nconst sectionShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  sequenceIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n});\n\nconst courseShape = PropTypes.shape({\n  celebrations: PropTypes.shape({\n    firstSection: PropTypes.bool,\n  }),\n});\n\nCoursewareContainer.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      courseId: PropTypes.string.isRequired,\n      sequenceId: PropTypes.string,\n      unitId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  courseId: PropTypes.string,\n  sequenceId: PropTypes.string,\n  firstSequenceId: PropTypes.string,\n  courseStatus: PropTypes.oneOf(['loaded', 'loading', 'failed', 'denied']).isRequired,\n  sequenceStatus: PropTypes.oneOf(['loaded', 'loading', 'failed']).isRequired,\n  sequenceMightBeUnit: PropTypes.bool.isRequired,\n  nextSequence: sequenceShape,\n  previousSequence: sequenceShape,\n  sectionViaSequenceId: sectionShape,\n  course: courseShape,\n  sequence: sequenceShape,\n  saveSequencePosition: PropTypes.func.isRequired,\n  checkBlockCompletion: PropTypes.func.isRequired,\n  fetchCourse: PropTypes.func.isRequired,\n  fetchSequence: PropTypes.func.isRequired,\n};\n\nCoursewareContainer.defaultProps = {\n  courseId: null,\n  sequenceId: null,\n  firstSequenceId: null,\n  nextSequence: null,\n  previousSequence: null,\n  sectionViaSequenceId: null,\n  course: null,\n  sequence: null,\n};\n\nconst currentCourseSelector = createSelector(\n  (state) => state.models.coursewareMeta || {},\n  (state) => state.courseware.courseId,\n  (coursesById, courseId) => (coursesById[courseId] ? coursesById[courseId] : null),\n);\n\nconst currentSequenceSelector = createSelector(\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequencesById, sequenceId) => (sequencesById[sequenceId] ? sequencesById[sequenceId] : null),\n);\n\nconst sequenceIdsSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections,\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return [];\n    }\n    const { sectionIds = [] } = course;\n    return sectionIds.flatMap(sectionId => sectionsById[sectionId].sequenceIds);\n  },\n);\n\nconst previousSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const previousSequenceId = sequenceIndex > 0 ? sequenceIds[sequenceIndex - 1] : null;\n    return previousSequenceId !== null ? sequencesById[previousSequenceId] : null;\n  },\n);\n\nconst nextSequenceSelector = createSelector(\n  sequenceIdsSelector,\n  (state) => state.models.sequences || {},\n  (state) => state.courseware.sequenceId,\n  (sequenceIds, sequencesById, sequenceId) => {\n    if (!sequenceId || sequenceIds.length === 0) {\n      return null;\n    }\n    const sequenceIndex = sequenceIds.indexOf(sequenceId);\n    const nextSequenceId = sequenceIndex < sequenceIds.length - 1 ? sequenceIds[sequenceIndex + 1] : null;\n    return nextSequenceId !== null ? sequencesById[nextSequenceId] : null;\n  },\n);\n\nconst firstSequenceIdSelector = createSelector(\n  (state) => state.courseware.courseStatus,\n  currentCourseSelector,\n  (state) => state.models.sections || {},\n  (courseStatus, course, sectionsById) => {\n    if (courseStatus !== 'loaded') {\n      return null;\n    }\n    const { sectionIds = [] } = course;\n\n    if (sectionIds.length === 0) {\n      return null;\n    }\n\n    return sectionsById[sectionIds[0]].sequenceIds[0];\n  },\n);\n\nconst sectionViaSequenceIdSelector = createSelector(\n  (state) => state.models.sections || {},\n  (state) => state.courseware.sequenceId,\n  (sectionsById, sequenceId) => (sectionsById[sequenceId] ? sectionsById[sequenceId] : null),\n);\n\nconst mapStateToProps = (state) => {\n  const {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n  } = state.courseware;\n\n  return {\n    courseId,\n    sequenceId,\n    courseStatus,\n    sequenceStatus,\n    sequenceMightBeUnit,\n    course: currentCourseSelector(state),\n    sequence: currentSequenceSelector(state),\n    previousSequence: previousSequenceSelector(state),\n    nextSequence: nextSequenceSelector(state),\n    firstSequenceId: firstSequenceIdSelector(state),\n    sectionViaSequenceId: sectionViaSequenceIdSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps, {\n  checkBlockCompletion,\n  saveSequencePosition,\n  fetchCourse,\n  fetchSequence,\n})(CoursewareContainer);\n"],"mappings":"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"}