{"version":3,"sources":["../../../src/alerts/course-start-alert/CourseStartAlert.jsx"],"names":["DAY_SEC","DAY_MS","YEAR_SEC","CourseStartAlert","payload","courseId","start","startDate","userTimezone","timezoneFormatArgs","timeZone","delta","Date","timeRemaining","Info","courseStartTime","courseStartDate","propTypes","PropTypes","shape","string","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAMA;;AACA;;AAEA;;;;;;;;;;;;AAEA,MAAMA,OAAO,GAAG,KAAK,EAAL,GAAU,EAA1B,C,CAA8B;;AAC9B,MAAMC,MAAM,GAAGD,OAAO,GAAG,IAAzB,C,CAA+B;;AAC/B,MAAME,QAAQ,GAAG,MAAMF,OAAvB,C,CAAgC;;AAEhC,SAASG,gBAAT,OAAuC;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACrC,QAAM;AACJC,IAAAA;AADI,MAEFD,OAFJ;AAIA,QAAM;AACJE,IAAAA,KAAK,EAAEC,SADH;AAEJC,IAAAA;AAFI,MAGF,0BAAS,gBAAT,EAA2BH,QAA3B,CAHJ;AAKA,QAAMI,kBAAkB,GAAGD,YAAY,GAAG;AAAEE,IAAAA,QAAQ,EAAEF;AAAZ,GAAH,GAAgC,EAAvE;AAEA,QAAMG,KAAK,GAAG,IAAIC,IAAJ,CAASL,SAAT,IAAsB,IAAIK,IAAJ,EAApC;AACA,QAAMC,aAAa,gBACjB,qBAAC,2BAAD;AAEE,IAAA,KAAK,EAAEF,KAAK,GAAG,IAFjB;AAGE,IAAA,OAAO,EAAC,MAHV,CAIE;AAJF;AAKE,IAAA,uBAAuB,EAAET;AAL3B,KAMMO,kBANN,GACM,eADN,CADF;;AAWA,MAAIE,KAAK,GAAGV,MAAZ,EAAoB;AAClB,wBACE,qBAAC,cAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAsB,MAAA,IAAI,EAAEa,WAA5B;AAAA,6BACE,qBAAC,sBAAD;AACE,QAAA,EAAE,EAAC,oCADL;AAEE,QAAA,cAAc,EAAC,qDAFjB;AAGE,QAAA,WAAW,EAAC,uDAHd;AAIE,QAAA,MAAM,EAAE;AACNC,UAAAA,eAAe,eACb,qBAAC,mBAAD;AAEE,YAAA,GAAG,EAAC,SAFN;AAGE,YAAA,KAAK,EAAC,OAHR;AAIE,YAAA,IAAI,EAAC,SAJP;AAKE,YAAA,YAAY,EAAC,OALf;AAME,YAAA,KAAK,EAAER;AANT,aAOME,kBAPN,GACM,iBADN,CAFI;AAYNI,UAAAA;AAZM;AAJV;AADF,MADF;AAuBD;;AAED,sBACE,sBAAC,cAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAsB,IAAA,IAAI,EAAEC,WAA5B;AAAA,4BACE;AAAA,6BACE,qBAAC,sBAAD;AACE,QAAA,EAAE,EAAC,iCADL;AAEE,QAAA,cAAc,EAAC,qDAFjB;AAGE,QAAA,WAAW,EAAC,uDAHd;AAIE,QAAA,MAAM,EAAE;AACNE,UAAAA,eAAe,eACb,qBAAC,mBAAD;AAEE,YAAA,GAAG,EAAC,SAFN;AAGE,YAAA,KAAK,EAAC,OAHR;AAIE,YAAA,IAAI,EAAC,SAJP;AAKE,YAAA,KAAK,EAAET;AALT,aAMME,kBANN,GACM,iBADN,CAFI;AAWNI,UAAAA;AAXM;AAJV;AADF,MADF,eAqBE,8BArBF,eAsBE,qBAAC,sBAAD;AACE,MAAA,EAAE,EAAC,qCADL;AAEE,MAAA,cAAc,EAAC,+CAFjB;AAGE,MAAA,WAAW,EAAC;AAHd,MAtBF;AAAA,IADF;AA8BD;;AAEDV,gBAAgB,CAACc,SAAjB,GAA6B;AAC3Bb,EAAAA,OAAO,EAAEc,mBAAUC,KAAV,CAAgB;AACvBd,IAAAA,QAAQ,EAAEa,mBAAUE;AADG,GAAhB,EAENC;AAHwB,CAA7B;eAMelB,gB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FormattedDate,\n  FormattedMessage,\n  FormattedRelativeTime,\n  FormattedTime,\n} from '@edx/frontend-platform/i18n';\nimport { Alert } from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\n\nimport { useModel } from '../../generic/model-store';\n\nconst DAY_SEC = 24 * 60 * 60; // in seconds\nconst DAY_MS = DAY_SEC * 1000; // in ms\nconst YEAR_SEC = 365 * DAY_SEC; // in seconds\n\nfunction CourseStartAlert({ payload }) {\n  const {\n    courseId,\n  } = payload;\n\n  const {\n    start: startDate,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  const delta = new Date(startDate) - new Date();\n  const timeRemaining = (\n    <FormattedRelativeTime\n      key=\"timeRemaining\"\n      value={delta / 1000}\n      numeric=\"auto\"\n      // 1 year interval to help auto format. It won't format without updateIntervalInSeconds.\n      updateIntervalInSeconds={YEAR_SEC}\n      {...timezoneFormatArgs}\n    />\n  );\n\n  if (delta < DAY_MS) {\n    return (\n      <Alert variant=\"info\" icon={Info}>\n        <FormattedMessage\n          id=\"learning.outline.alert.start.short\"\n          defaultMessage=\"Course starts {timeRemaining} at {courseStartTime}.\"\n          description=\"Used when the time remaining is less than a day away.\"\n          values={{\n            courseStartTime: (\n              <FormattedTime\n                key=\"courseStartTime\"\n                day=\"numeric\"\n                month=\"short\"\n                year=\"numeric\"\n                timeZoneName=\"short\"\n                value={startDate}\n                {...timezoneFormatArgs}\n              />\n            ),\n            timeRemaining,\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert variant=\"info\" icon={Info}>\n      <strong>\n        <FormattedMessage\n          id=\"learning.outline.alert.end.long\"\n          defaultMessage=\"Course starts {timeRemaining} on {courseStartDate}.\"\n          description=\"Used when the time remaining is more than a day away.\"\n          values={{\n            courseStartDate: (\n              <FormattedDate\n                key=\"courseStartDate\"\n                day=\"numeric\"\n                month=\"short\"\n                year=\"numeric\"\n                value={startDate}\n                {...timezoneFormatArgs}\n              />\n            ),\n            timeRemaining,\n          }}\n        />\n      </strong>\n      <br />\n      <FormattedMessage\n        id=\"learning.outline.alert.end.calendar\"\n        defaultMessage=\"Donâ€™t forget to add a calendar reminder!\"\n        description=\"It's just a recommendation for learners to set a reminder for the course starting date and is shown when the course starting date is more than a day. \"\n      />\n    </Alert>\n  );\n}\n\nCourseStartAlert.propTypes = {\n  payload: PropTypes.shape({\n    courseId: PropTypes.string,\n  }).isRequired,\n};\n\nexport default CourseStartAlert;\n"],"file":"CourseStartAlert.js"}