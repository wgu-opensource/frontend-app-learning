{"version":3,"sources":["../../../src/alerts/enrollment-alert/hooks.js"],"names":["EnrollmentAlert","React","lazy","useEnrollmentAlert","courseId","authenticatedUser","AppContext","course","outline","enrolledUser","isEnrolled","undefined","privateOutline","courseBlocks","courses","isVisible","payload","canEnroll","enrollAlert","extraText","isStaff","code","Object","values","sort","topic","clientEnrollmentAlert"],"mappings":";;;;;;;AACA;;AAGA;;AAEA;;AACA;;;;;;AAEA,MAAMA,eAAe,gBAAGC,eAAMC,IAAN,CAAW,mEAAa,mBAAb,GAAX,CAAxB;;AAEO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAwB,uBAAWC,kBAAX,CAA9B;AACA,QAAMC,MAAM,GAAG,0BAAS,gBAAT,EAA2BH,QAA3B,CAAf;AACA,QAAMI,OAAO,GAAG,0BAAS,SAAT,EAAoBJ,QAApB,CAAhB;AACA,QAAMK,YAAY,GAAGF,MAAM,IAAIA,MAAM,CAACG,UAAP,KAAsBC,SAAhC,IAA6CJ,MAAM,CAACG,UAAzE;AACA,QAAME,cAAc,GAAGJ,OAAO,IAAIA,OAAO,CAACK,YAAnB,IAAmC,CAACL,OAAO,CAACK,YAAR,CAAqBC,OAAhF;AACA;AACF;AACA;AACA;AACA;AACA;;AACE,QAAMC,SAAS,GAAG,CAACN,YAAD,IAAiBJ,iBAAiB,KAAK,IAAvC,IAA+CO,cAAjE;AACA,QAAMI,OAAO,GAAG;AACdC,IAAAA,SAAS,EAAET,OAAO,IAAIA,OAAO,CAACU,WAAnB,GAAiCV,OAAO,CAACU,WAAR,CAAoBD,SAArD,GAAiE,KAD9D;AAEdb,IAAAA,QAFc;AAGde,IAAAA,SAAS,EAAEX,OAAO,IAAIA,OAAO,CAACU,WAAnB,GAAiCV,OAAO,CAACU,WAAR,CAAoBC,SAArD,GAAiE,EAH9D;AAIdC,IAAAA,OAAO,EAAEb,MAAM,IAAIA,MAAM,CAACa;AAJZ,GAAhB;AAOA,8BAASL,SAAT,EAAoB;AAClBM,IAAAA,IAAI,EAAE,uBADY;AAElBL,IAAAA,OAAO,EAAE,oBAAQ,MAAMA,OAAd,EAAuBM,MAAM,CAACC,MAAP,CAAcP,OAAd,EAAuBQ,IAAvB,EAAvB,CAFS;AAGlBC,IAAAA,KAAK,EAAE;AAHW,GAApB;AAMA,SAAO;AAAEC,IAAAA,qBAAqB,EAAE1B;AAAzB,GAAP;AACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport React, {\n  useContext, useMemo,\n} from 'react';\nimport { AppContext } from '@edx/frontend-platform/react';\n\nimport { useAlert } from '../../generic/user-messages';\nimport { useModel } from '../../generic/model-store';\n\nconst EnrollmentAlert = React.lazy(() => import('./EnrollmentAlert'));\n\nexport function useEnrollmentAlert(courseId) {\n  const { authenticatedUser } = useContext(AppContext);\n  const course = useModel('courseHomeMeta', courseId);\n  const outline = useModel('outline', courseId);\n  const enrolledUser = course && course.isEnrolled !== undefined && course.isEnrolled;\n  const privateOutline = outline && outline.courseBlocks && !outline.courseBlocks.courses;\n  /**\n   * This alert should render if\n   *    1. the user is not enrolled,\n   *    2. the user is authenticated, AND\n   *    3. the course is private.\n   */\n  const isVisible = !enrolledUser && authenticatedUser !== null && privateOutline;\n  const payload = {\n    canEnroll: outline && outline.enrollAlert ? outline.enrollAlert.canEnroll : false,\n    courseId,\n    extraText: outline && outline.enrollAlert ? outline.enrollAlert.extraText : '',\n    isStaff: course && course.isStaff,\n  };\n\n  useAlert(isVisible, {\n    code: 'clientEnrollmentAlert',\n    payload: useMemo(() => payload, Object.values(payload).sort()),\n    topic: 'outline',\n  });\n\n  return { clientEnrollmentAlert: EnrollmentAlert };\n}\n"],"file":"hooks.js"}