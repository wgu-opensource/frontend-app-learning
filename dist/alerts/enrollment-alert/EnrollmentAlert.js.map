{"version":3,"sources":["../../../src/alerts/enrollment-alert/EnrollmentAlert.jsx"],"names":["EnrollmentAlert","intl","payload","canEnroll","courseId","extraText","isStaff","org","enrollClickHandler","loading","formatMessage","messages","success","text","alert","type","icon","WarningFilled","staffAlert","Info","button","textDecoration","enrollNowSentence","faSpinner","propTypes","intlShape","isRequired","PropTypes","shape","bool","string"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA;;AAEA;;AACA;;;;;;AAEA,SAASA,eAAT,OAA4C;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;AAC1C,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA;AAJI,MAKFJ,OALJ;AAOA,QAAM;AACJK,IAAAA;AADI,MAEF,0BAAS,gBAAT,EAA2BH,QAA3B,CAFJ;AAIA,QAAM;AAAEI,IAAAA,kBAAF;AAAsBC,IAAAA;AAAtB,MAAkC,wBACtCL,QADsC,EAEtCG,GAFsC,EAGtCN,IAAI,CAACS,aAAL,CAAmBC,kBAASC,OAA5B,CAHsC,CAAxC;AAMA,MAAIC,IAAI,GAAGZ,IAAI,CAACS,aAAL,CAAmBC,kBAASG,KAA5B,CAAX;AACA,MAAIC,IAAI,GAAG,SAAX;AACA,MAAIC,IAAI,GAAGC,oBAAX;;AACA,MAAIX,OAAJ,EAAa;AACXO,IAAAA,IAAI,GAAGZ,IAAI,CAACS,aAAL,CAAmBC,kBAASO,UAA5B,CAAP;AACAH,IAAAA,IAAI,GAAG,MAAP;AACAC,IAAAA,IAAI,GAAGG,WAAP;AACD,GAJD,MAIO,IAAId,SAAJ,EAAe;AACpBQ,IAAAA,IAAI,GAAI,GAAEA,IAAK,IAAGR,SAAU,EAA5B;AACD;;AAED,QAAMe,MAAM,GAAGjB,SAAS,iBACtB,qBAAC,eAAD;AAAQ,IAAA,QAAQ,EAAEM,OAAlB;AAA2B,IAAA,OAAO,EAAC,MAAnC;AAA0C,IAAA,SAAS,EAAC,6BAApD;AAAkF,IAAA,IAAI,EAAC,IAAvF;AAA4F,IAAA,KAAK,EAAE;AAAEY,MAAAA,cAAc,EAAE;AAAlB,KAAnG;AAAoI,IAAA,OAAO,EAAEb,kBAA7I;AAAA,cACGP,IAAI,CAACS,aAAL,CAAmBC,kBAASW,iBAA5B;AADH,IADF;AAMA,sBACE,qBAAC,cAAD;AAAO,IAAA,OAAO,EAAEP,IAAhB;AAAsB,IAAA,IAAI,EAAEC,IAA5B;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,iBACGH,IADH,EAEGO,MAFH,EAGGX,OAAO,iBAAI,qBAAC,iCAAD;AAAiB,QAAA,IAAI,EAAEc,oBAAvB;AAAkC,QAAA,IAAI;AAAtC,QAHd;AAAA;AADF,IADF;AASD;;AAEDvB,eAAe,CAACwB,SAAhB,GAA4B;AAC1BvB,EAAAA,IAAI,EAAEwB,gBAAUC,UADU;AAE1BxB,EAAAA,OAAO,EAAEyB,mBAAUC,KAAV,CAAgB;AACvBzB,IAAAA,SAAS,EAAEwB,mBAAUE,IADE;AAEvBzB,IAAAA,QAAQ,EAAEuB,mBAAUG,MAFG;AAGvBzB,IAAAA,SAAS,EAAEsB,mBAAUG,MAHE;AAIvBxB,IAAAA,OAAO,EAAEqB,mBAAUE;AAJI,GAAhB,EAKNH;AAPuB,CAA5B;;eAUe,sBAAW1B,eAAX,C","sourcesContent":["import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { Alert, Button } from '@edx/paragon';\nimport { Info, WarningFilled } from '@edx/paragon/icons';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { useModel } from '../../generic/model-store';\n\nimport messages from './messages';\nimport useEnrollClickHandler from './clickHook';\n\nfunction EnrollmentAlert({ intl, payload }) {\n  const {\n    canEnroll,\n    courseId,\n    extraText,\n    isStaff,\n  } = payload;\n\n  const {\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const { enrollClickHandler, loading } = useEnrollClickHandler(\n    courseId,\n    org,\n    intl.formatMessage(messages.success),\n  );\n\n  let text = intl.formatMessage(messages.alert);\n  let type = 'warning';\n  let icon = WarningFilled;\n  if (isStaff) {\n    text = intl.formatMessage(messages.staffAlert);\n    type = 'info';\n    icon = Info;\n  } else if (extraText) {\n    text = `${text} ${extraText}`;\n  }\n\n  const button = canEnroll && (\n    <Button disabled={loading} variant=\"link\" className=\"p-0 border-0 align-top mx-1\" size=\"sm\" style={{ textDecoration: 'underline' }} onClick={enrollClickHandler}>\n      {intl.formatMessage(messages.enrollNowSentence)}\n    </Button>\n  );\n\n  return (\n    <Alert variant={type} icon={icon}>\n      <div className=\"d-flex\">\n        {text}\n        {button}\n        {loading && <FontAwesomeIcon icon={faSpinner} spin />}\n      </div>\n    </Alert>\n  );\n}\n\nEnrollmentAlert.propTypes = {\n  intl: intlShape.isRequired,\n  payload: PropTypes.shape({\n    canEnroll: PropTypes.bool,\n    courseId: PropTypes.string,\n    extraText: PropTypes.string,\n    isStaff: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default injectIntl(EnrollmentAlert);\n"],"file":"EnrollmentAlert.js"}