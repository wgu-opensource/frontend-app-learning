{"version":3,"sources":["../../../src/alerts/sequence-alerts/hooks.js"],"names":["useSequenceBannerTextAlert","sequenceId","sequence","sequenceStatus","state","courseware","bannerText","code","dismissible","text","type","ALERT_TYPES","INFO","topic","useSequenceEntranceExamAlert","courseId","intl","course","entranceExamCurrentScore","entranceExamEnabled","entranceExamId","entranceExamMinimumScorePct","entranceExamPassed","entranceExamData","entranceExamAlertVisible","sectionId","entranceExamText","formatMessage","messages","entranceExamTextPassed","entranceExamTextNotPassing"],"mappings":";;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;AAEA,SAASA,0BAAT,CAAoCC,UAApC,EAAgD;AAC9C,QAAMC,QAAQ,GAAG,0BAAS,WAAT,EAAsBD,UAAtB,CAAjB;AACA,QAAME,cAAc,GAAG,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAAN,CAAiBF,cAAtC,CAAvB,CAF8C,CAI9C;;AACA,8BAASA,cAAc,KAAK,QAAnB,IAA+BD,QAAQ,CAACI,UAAjD,EAA6D;AAC3DC,IAAAA,IAAI,EAAE,IADqD;AAE3DC,IAAAA,WAAW,EAAE,KAF8C;AAG3DC,IAAAA,IAAI,EAAEP,QAAQ,CAACI,UAH4C;AAI3DI,IAAAA,IAAI,EAAEC,0BAAYC,IAJyC;AAK3DC,IAAAA,KAAK,EAAE;AALoD,GAA7D;AAOD;;AAED,SAASC,4BAAT,CAAsCC,QAAtC,EAAgDd,UAAhD,EAA4De,IAA5D,EAAkE;AAChE,QAAMC,MAAM,GAAG,0BAAS,gBAAT,EAA2BF,QAA3B,CAAf;AACA,QAAMb,QAAQ,GAAG,0BAAS,WAAT,EAAsBD,UAAtB,CAAjB;AACA,QAAME,cAAc,GAAG,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAAN,CAAiBF,cAAtC,CAAvB;AACA,QAAM;AACJe,IAAAA,wBADI;AAEJC,IAAAA,mBAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,2BAJI;AAKJC,IAAAA;AALI,MAMFL,MAAM,CAACM,gBAAP,IAA2B,EAN/B;AAOA,QAAMC,wBAAwB,GAAGrB,cAAc,KAAK,QAAnB,IAA+BgB,mBAA/B,IAAsDC,cAAc,KAAKlB,QAAQ,CAACuB,SAAnH;AACA,MAAIC,gBAAJ;;AAEA,MAAIJ,kBAAJ,EAAwB;AACtBI,IAAAA,gBAAgB,GAAGV,IAAI,CAACW,aAAL,CACjBC,kBAASC,sBADQ,EACgB;AAAEX,MAAAA,wBAAwB,EAAEA,wBAAwB,GAAG;AAAvD,KADhB,CAAnB;AAGD,GAJD,MAIO;AACLQ,IAAAA,gBAAgB,GAAGV,IAAI,CAACW,aAAL,CAAmBC,kBAASE,0BAA5B,EAAwD;AACzEZ,MAAAA,wBAAwB,EAAEA,wBAAwB,GAAG,GADoB;AAEzEG,MAAAA,2BAA2B,EAAEA,2BAA2B,GAAG;AAFc,KAAxD,CAAnB;AAID;;AAED,8BAASG,wBAAT,EAAmC;AACjCjB,IAAAA,IAAI,EAAE,IAD2B;AAEjCC,IAAAA,WAAW,EAAE,KAFoB;AAGjCC,IAAAA,IAAI,EAAEiB,gBAH2B;AAIjChB,IAAAA,IAAI,EAAEC,0BAAYC,IAJe;AAKjCC,IAAAA,KAAK,EAAE;AAL0B,GAAnC;AAOD","sourcesContent":["import { useSelector } from 'react-redux';\n\nimport { useModel } from '../../generic/model-store';\nimport { ALERT_TYPES, useAlert } from '../../generic/user-messages';\n\nimport messages from './messages';\n\nfunction useSequenceBannerTextAlert(sequenceId) {\n  const sequence = useModel('sequences', sequenceId);\n  const sequenceStatus = useSelector(state => state.courseware.sequenceStatus);\n\n  // Show Alert that comes along with the sequence\n  useAlert(sequenceStatus === 'loaded' && sequence.bannerText, {\n    code: null,\n    dismissible: false,\n    text: sequence.bannerText,\n    type: ALERT_TYPES.INFO,\n    topic: 'sequence',\n  });\n}\n\nfunction useSequenceEntranceExamAlert(courseId, sequenceId, intl) {\n  const course = useModel('coursewareMeta', courseId);\n  const sequence = useModel('sequences', sequenceId);\n  const sequenceStatus = useSelector(state => state.courseware.sequenceStatus);\n  const {\n    entranceExamCurrentScore,\n    entranceExamEnabled,\n    entranceExamId,\n    entranceExamMinimumScorePct,\n    entranceExamPassed,\n  } = course.entranceExamData || {};\n  const entranceExamAlertVisible = sequenceStatus === 'loaded' && entranceExamEnabled && entranceExamId === sequence.sectionId;\n  let entranceExamText;\n\n  if (entranceExamPassed) {\n    entranceExamText = intl.formatMessage(\n      messages.entranceExamTextPassed, { entranceExamCurrentScore: entranceExamCurrentScore * 100 },\n    );\n  } else {\n    entranceExamText = intl.formatMessage(messages.entranceExamTextNotPassing, {\n      entranceExamCurrentScore: entranceExamCurrentScore * 100,\n      entranceExamMinimumScorePct: entranceExamMinimumScorePct * 100,\n    });\n  }\n\n  useAlert(entranceExamAlertVisible, {\n    code: null,\n    dismissible: false,\n    text: entranceExamText,\n    type: ALERT_TYPES.INFO,\n    topic: 'sequence',\n  });\n}\n\nexport { useSequenceBannerTextAlert, useSequenceEntranceExamAlert };\n"],"file":"hooks.js"}