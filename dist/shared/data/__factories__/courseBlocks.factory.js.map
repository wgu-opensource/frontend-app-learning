{"version":3,"sources":["../../../../src/shared/data/__factories__/courseBlocks.factory.js"],"names":["getIds","attr","blocks","Array","isArray","map","block","id","getBlocks","reduce","acc","Factory","define","option","courseId","build","type","units","children","sequences","sections","course","buildSimpleCourseBlocks","title","options","unitBlocks","sequenceBlocks","sectionBlocks","courseBlock","display_name","courseBlocks","hasScheduledContent","buildMinimalCourseBlocks","effort_activities","effort_time","complete","resume_block","resumeBlock","has_scheduled_content","buildBinaryCourseBlocks","sectionTree","sequenceTree","unitTree","forEach","sectionIndex","sequenceIndex","unitIndex"],"mappings":"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","sourcesContent":["import { Factory } from 'rosie'; // eslint-disable-line import/no-extraneous-dependencies\nimport './block.factory';\n\n// Most of this file can be removed at some point, now that we rarely use course blocks\n// in favor of learning sequences. But for now, these are mostly used to then feed into\n// buildOutlineFromBlocks, which is an awkward flow if we don't really care about the\n// course blocks themselves. A future cleanup to do.\n\n// Generates an Array of block IDs, either from a single block or an array of blocks.\nconst getIds = (attr) => {\n  const blocks = Array.isArray(attr) ? attr : [attr];\n  return blocks.map(block => block.id);\n};\n\n// Generates an Object in { [block.id]: block } format, either from a single block or an array of blocks.\nconst getBlocks = (attr) => {\n  const blocks = Array.isArray(attr) ? attr : [attr];\n  // eslint-disable-next-line no-return-assign,no-sequences\n  return blocks.reduce((acc, block) => (acc[block.id] = block, acc), {});\n};\n\nFactory.define('courseBlocks')\n  .option('courseId', 'course-v1:edX+DemoX+Demo_Course')\n  .option('units', ['courseId'], courseId => [\n    Factory.build(\n      'block',\n      { type: 'vertical' },\n      { courseId },\n    ),\n  ])\n  .option('sequences', ['courseId', 'units'], (courseId, units) => [\n    Factory.build(\n      'block',\n      { type: 'sequential', children: getIds(units) },\n      { courseId },\n    ),\n  ])\n  .option('sections', ['courseId', 'sequences'], (courseId, sequences) => [\n    Factory.build(\n      'block',\n      { type: 'chapter', children: getIds(sequences) },\n      { courseId },\n    ),\n  ])\n  .option('course', ['courseId', 'sections'], (courseId, sections) => Factory.build(\n    'block',\n    { type: 'course', children: getIds(sections) },\n    { courseId },\n  ))\n  .attr(\n    'blocks',\n    ['course', 'sections', 'sequences', 'units'],\n    (course, sections, sequences, units) => ({\n      [course.id]: course,\n      ...getBlocks(sections),\n      ...getBlocks(sequences),\n      ...getBlocks(units),\n    }),\n  )\n  .attr('root', ['course'], course => course.id);\n\n/**\n * Builds a course with a single chapter, sequence, and unit.\n */\nexport function buildSimpleCourseBlocks(courseId, title, options = {}) {\n  const unitBlocks = options.unitBlocks || [Factory.build(\n    'block',\n    { type: 'vertical' },\n    { courseId },\n  )];\n  const sequenceBlocks = options.sequenceBlocks || [Factory.build(\n    'block',\n    { type: 'sequential', children: unitBlocks.map(block => block.id) },\n    { courseId },\n  )];\n  const sectionBlocks = options.sectionBlocks || [Factory.build(\n    'block',\n    { type: 'chapter', children: sequenceBlocks.map(block => block.id) },\n    { courseId },\n  )];\n  const courseBlock = options.courseBlock || Factory.build(\n    'block',\n    { type: 'course', display_name: title, children: sectionBlocks.map(block => block.id) },\n    { courseId },\n  );\n  return {\n    courseBlocks: options.courseBlocks || Factory.build(\n      'courseBlocks',\n      {\n        courseId,\n        hasScheduledContent: options.hasScheduledContent || false,\n        title,\n      },\n      {\n        units: unitBlocks,\n        sequences: sequenceBlocks,\n        sections: sectionBlocks,\n        course: courseBlock,\n      },\n    ),\n    unitBlocks,\n    sequenceBlocks,\n    sectionBlocks,\n    courseBlock,\n  };\n}\n\n/**\n * Builds a course with a single chapter and sequence, but no units.\n */\nexport function buildMinimalCourseBlocks(courseId, title, options = {}) {\n  const sequenceBlocks = options.sequenceBlocks || [Factory.build(\n    'block',\n    {\n      display_name: 'Title of Sequence',\n      effort_activities: 2,\n      effort_time: 15,\n      type: 'sequential',\n    },\n    { courseId },\n  )];\n  const sectionBlocks = options.sectionBlocks || [Factory.build(\n    'block',\n    {\n      type: 'chapter',\n      display_name: 'Title of Section',\n      complete: options.complete || false,\n      resume_block: options.resumeBlock || false,\n      children: sequenceBlocks.map(block => block.id),\n    },\n    { courseId },\n  )];\n  const courseBlock = options.courseBlock || Factory.build(\n    'block',\n    {\n      type: 'course',\n      display_name: title,\n      has_scheduled_content: options.hasScheduledContent || false,\n      children: sectionBlocks.map(block => block.id),\n    },\n    { courseId },\n  );\n  return {\n    courseBlocks: options.courseBlocks || Factory.build(\n      'courseBlocks',\n      { courseId },\n      {\n        sequences: sequenceBlocks,\n        sections: sectionBlocks,\n        course: courseBlock,\n        units: [],\n      },\n    ),\n    unitBlocks: [],\n    sequenceBlocks,\n    sectionBlocks,\n    courseBlock,\n  };\n}\n\n/**\n * Builds a course with two branches at each node. That is:\n *\n *                  Crs\n *                   |\n *        Sec--------+-------Sec\n *         |                  |\n *   Seq---+---Seq      Seq---+---Seq\n *    |         |        |         |\n * U--+--U   U--+--U  U--+--U   U--+--U\n *                          ^\n *\n * Each left branch is indexed 0, and each right branch is indexed 1.\n * So, the caret in the diagram above is pointing to `unitTree[1][0][1]`,\n * whose parent is `sequenceTree[1][0]`, whose parent is `sectionTree[1]`.\n */\nexport function buildBinaryCourseBlocks(courseId, title) {\n  const sectionTree = [];\n  const sequenceTree = [[], []];\n  const unitTree = [[[], []], [[], []]];\n  [0, 1].forEach(sectionIndex => {\n    [0, 1].forEach(sequenceIndex => {\n      [0, 1].forEach(unitIndex => {\n        unitTree[sectionIndex][sequenceIndex][unitIndex] = Factory.build(\n          'block',\n          { type: 'vertical' },\n          { courseId },\n        );\n      });\n      sequenceTree[sectionIndex][sequenceIndex] = Factory.build(\n        'block',\n        { type: 'sequential', children: unitTree[sectionIndex][sequenceIndex].map(block => block.id) },\n        { courseId },\n      );\n    });\n    sectionTree[sectionIndex] = Factory.build(\n      'block',\n      { type: 'chapter', children: sequenceTree[sectionIndex].map(block => block.id) },\n      { courseId },\n    );\n  });\n  const courseBlock = Factory.build(\n    'block',\n    { type: 'course', display_name: title, children: sectionTree.map(block => block.id) },\n    { courseId },\n  );\n  const sectionBlocks = [\n    sectionTree[0],\n    sectionTree[1],\n  ];\n  const sequenceBlocks = [\n    sequenceTree[0][0],\n    sequenceTree[0][1],\n    sequenceTree[1][0],\n    sequenceTree[1][1],\n  ];\n  const unitBlocks = [\n    unitTree[0][0][0],\n    unitTree[0][0][1],\n    unitTree[0][1][0],\n    unitTree[0][1][1],\n    unitTree[1][0][0],\n    unitTree[1][0][1],\n    unitTree[1][1][0],\n    unitTree[1][1][1],\n  ];\n  return {\n    // Expose blocks as a combined list, lists separated by type, and as\n    // trees separated by type. The caller can decide which they want to\n    // work with.\n    courseBlocks: Factory.build(\n      'courseBlocks',\n      { courseId, title },\n      {\n        units: unitBlocks,\n        sequences: sequenceBlocks,\n        sections: sectionBlocks,\n        course: courseBlock,\n      },\n    ),\n    unitBlocks,\n    sequenceBlocks,\n    sectionBlocks,\n    courseBlock,\n    unitTree,\n    sequenceTree,\n    sectionTree,\n  };\n}\n"],"file":"courseBlocks.factory.js"}