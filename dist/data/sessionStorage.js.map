{"version":3,"sources":["../../src/data/sessionStorage.js"],"names":["getSessionStorage","key","global","sessionStorage","rawItem","getItem","JSON","parse","e","setSessionStorage","value","setItem","stringify"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAI;AACF,QAAIC,MAAM,CAACC,cAAX,EAA2B;AACzB,YAAMC,OAAO,GAAGF,MAAM,CAACC,cAAP,CAAsBE,OAAtB,CAA8BJ,GAA9B,CAAhB;;AACA,UAAIG,OAAJ,EAAa;AACX,eAAOE,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAP;AACD;AACF;AACF,GAPD,CAOE,OAAOI,CAAP,EAAU,CACV;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASC,iBAAT,CAA2BR,GAA3B,EAAgCS,KAAhC,EAAuC;AACrC,MAAI;AACF,QAAIR,MAAM,CAACC,cAAX,EAA2B;AACzBD,MAAAA,MAAM,CAACC,cAAP,CAAsBQ,OAAtB,CAA8BV,GAA9B,EAAmCK,IAAI,CAACM,SAAL,CAAeF,KAAf,CAAnC;AACD;AACF,GAJD,CAIE,OAAOF,CAAP,EAAU,CACV;AACD;AACF","sourcesContent":["// This file holds some convenience methods for dealing with sessionStorage. Unlike localStorage that never expires,\n// sessionStorage is cleared when the browser tab is closed since the page session ends\n//\n// NOTE: These storage keys are not namespaced.  That means that it's shared for the current fully\n// qualified domain.  Namespacing could be added, but we'll cross that bridge when we need it.\n\nfunction getSessionStorage(key) {\n  try {\n    if (global.sessionStorage) {\n      const rawItem = global.sessionStorage.getItem(key);\n      if (rawItem) {\n        return JSON.parse(rawItem);\n      }\n    }\n  } catch (e) {\n    // If this fails for some reason, just return null.\n  }\n  return null;\n}\n\nfunction setSessionStorage(key, value) {\n  try {\n    if (global.sessionStorage) {\n      global.sessionStorage.setItem(key, JSON.stringify(value));\n    }\n  } catch (e) {\n    // If this fails, just bail.\n  }\n}\n\nexport {\n  getSessionStorage,\n  setSessionStorage,\n};\n"],"file":"sessionStorage.js"}