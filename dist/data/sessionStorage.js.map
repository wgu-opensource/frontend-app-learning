{"version":3,"file":"sessionStorage.js","names":["getSessionStorage","key","global","sessionStorage","rawItem","getItem","JSON","parse","e","setSessionStorage","value","setItem","stringify"],"sources":["../../src/data/sessionStorage.js"],"sourcesContent":["// This file holds some convenience methods for dealing with sessionStorage. Unlike localStorage that never expires,\n// sessionStorage is cleared when the browser tab is closed since the page session ends\n//\n// NOTE: These storage keys are not namespaced.  That means that it's shared for the current fully\n// qualified domain.  Namespacing could be added, but we'll cross that bridge when we need it.\n\nfunction getSessionStorage(key) {\n  try {\n    if (global.sessionStorage) {\n      const rawItem = global.sessionStorage.getItem(key);\n      if (rawItem) {\n        return JSON.parse(rawItem);\n      }\n    }\n  } catch (e) {\n    // If this fails for some reason, just return null.\n  }\n  return null;\n}\n\nfunction setSessionStorage(key, value) {\n  try {\n    if (global.sessionStorage) {\n      global.sessionStorage.setItem(key, JSON.stringify(value));\n    }\n  } catch (e) {\n    // If this fails, just bail.\n  }\n}\n\nexport {\n  getSessionStorage,\n  setSessionStorage,\n};\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,iBAAiBA,CAACC,GAAG,EAAE;EAC9B,IAAI;IACF,IAAIC,MAAM,CAACC,cAAc,EAAE;MACzB,MAAMC,OAAO,GAAGF,MAAM,CAACC,cAAc,CAACE,OAAO,CAACJ,GAAG,CAAC;MAClD,IAAIG,OAAO,EAAE;QACX,OAAOE,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC;MAC5B;IACF;EACF,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV;EAAA;EAEF,OAAO,IAAI;AACb;AAEA,SAASC,iBAAiBA,CAACR,GAAG,EAAES,KAAK,EAAE;EACrC,IAAI;IACF,IAAIR,MAAM,CAACC,cAAc,EAAE;MACzBD,MAAM,CAACC,cAAc,CAACQ,OAAO,CAACV,GAAG,EAAEK,IAAI,CAACM,SAAS,CAACF,KAAK,CAAC,CAAC;IAC3D;EACF,CAAC,CAAC,OAAOF,CAAC,EAAE;IACV;EAAA;AAEJ"}