{"version":3,"sources":["../../../src/instructor-toolbar/masquerade-widget/MasqueradeWidget.jsx"],"names":["MasqueradeWidget","Component","constructor","props","courseId","state","autoFocus","masquerade","options","shouldShowUserNameInput","masqueradeUsername","componentDidMount","then","data","success","onSuccess","onError","catch","response","console","error","message","onSubmit","payload","clearError","parseAvailableOptions","setState","toggle","show","prevState","undefined","postData","active","available","map","group","groupId","name","role","userName","userPartitionId","groupName","render","specificLearnerInputText","intl","formatMessage","messages","placeholder","errorMessage","propTypes","PropTypes","string","isRequired","intlShape","func","contextType","UserMessagesContext"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Dropdown } from '@edx/paragon';\n\nimport { UserMessagesContext } from '../../generic/user-messages';\n\nimport MasqueradeUserNameInput from './MasqueradeUserNameInput';\nimport MasqueradeWidgetOption from './MasqueradeWidgetOption';\nimport {\n  getMasqueradeOptions,\n  postMasqueradeOptions,\n} from './data/api';\nimport messages from './messages';\n\nclass MasqueradeWidget extends Component {\n  constructor(props) {\n    super(props);\n    this.courseId = props.courseId;\n    this.state = {\n      autoFocus: false,\n      masquerade: 'Staff',\n      options: [],\n      shouldShowUserNameInput: false,\n      masqueradeUsername: null,\n    };\n  }\n\n  componentDidMount() {\n    getMasqueradeOptions(this.courseId).then((data) => {\n      if (data.success) {\n        this.onSuccess(data);\n      } else {\n        // This was explicitly denied by the backend;\n        // assume it's disabled/unavailable.\n        // eslint-disable-next-line no-console\n        this.onError('Unable to get masquerade options');\n      }\n    }).catch((response) => {\n      // There's not much we can do to recover;\n      // if we can't fetch masquerade options,\n      // assume it's disabled/unavailable.\n      // eslint-disable-next-line no-console\n      console.error('Unable to get masquerade options', response);\n    });\n  }\n\n  onError(message) {\n    this.props.onError(message);\n  }\n\n  async onSubmit(payload) {\n    this.clearError();\n    const options = await postMasqueradeOptions(this.courseId, payload);\n    return options;\n  }\n\n  onSuccess(data) {\n    const options = this.parseAvailableOptions(data);\n    this.setState({\n      options,\n    });\n  }\n\n  clearError() {\n    this.props.onError('');\n  }\n\n  toggle(show) {\n    this.setState(prevState => ({\n      autoFocus: true,\n      masquerade: 'Specific Student...',\n      shouldShowUserNameInput: show === undefined ? !prevState.shouldShowUserNameInput : show,\n    }));\n  }\n\n  parseAvailableOptions(postData) {\n    const data = postData || {};\n    const active = data.active || {};\n    const available = data.available || [];\n    const options = available.map((group) => (\n      <MasqueradeWidgetOption\n        groupId={group.groupId}\n        groupName={group.name}\n        key={group.name}\n        role={group.role}\n        selected={active}\n        userName={group.userName}\n        userPartitionId={group.userPartitionId}\n        userNameInputToggle={(...args) => this.toggle(...args)}\n        onSubmit={(payload) => this.onSubmit(payload)}\n      />\n    ));\n    if (active.userName) {\n      this.setState({\n        autoFocus: false,\n        masquerade: 'Specific Student...',\n        masqueradeUsername: active.userName,\n        shouldShowUserNameInput: true,\n      });\n    } else if (active.groupName) {\n      this.setState({ masquerade: active.groupName });\n    } else if (active.role === 'student') {\n      this.setState({ masquerade: 'Learner' });\n    }\n    return options;\n  }\n\n  render() {\n    const {\n      autoFocus,\n      masquerade,\n      options,\n      shouldShowUserNameInput,\n      masqueradeUsername,\n    } = this.state;\n    const specificLearnerInputText = this.props.intl.formatMessage(messages.placeholder);\n    return (\n      <div className=\"flex-grow-1\">\n        <div className=\"row\">\n          <span className=\"col-auto col-form-label pl-3\">View this course as:</span>\n          <Dropdown className=\"flex-shrink-1 mx-1\">\n            <Dropdown.Toggle variant=\"inverse-outline-primary\">\n              {masquerade}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              {options}\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n        {shouldShowUserNameInput && (\n          <div className=\"row mt-2\">\n            <span className=\"col-auto col-form-label pl-3\" id=\"masquerade-search-label\">{`${specificLearnerInputText}:`}</span>\n            <MasqueradeUserNameInput\n              id=\"masquerade-search\"\n              className=\"col-4 form-control\"\n              autoFocus={autoFocus}\n              defaultValue={masqueradeUsername}\n              onError={(errorMessage) => this.onError(errorMessage)}\n              onSubmit={(payload) => this.onSubmit(payload)}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nMasqueradeWidget.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  onError: PropTypes.func.isRequired,\n};\nMasqueradeWidget.contextType = UserMessagesContext;\nexport default injectIntl(MasqueradeWidget);\n"],"file":"MasqueradeWidget.js"}