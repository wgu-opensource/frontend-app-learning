{"version":3,"sources":["../../../src/instructor-toolbar/masquerade-widget/MasqueradeUserNameInput.jsx"],"names":["MasqueradeUserNameInput","Component","onError","props","onKeyPress","event","key","onSubmit","payload","role","user_name","target","value","then","data","success","global","location","reload","error","catch","message","intl","formatMessage","messages","genericError","render","rest","userNameLabel","propTypes","intlShape","isRequired","PropTypes","func"],"mappings":";;;;;;;AAAA;;AAGA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,uBAAN,SAAsCC,gBAAtC,CAAgD;AAC9CC,EAAAA,OAAO,GAAU;AACf,WAAO,KAAKC,KAAL,CAAWD,OAAX,CAAmB,YAAnB,CAAP;AACD;;AAEDE,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzB,aAAO,KAAKC,QAAL,CAAcF,KAAd,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACF,KAAD,EAAQ;AACd,UAAMG,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAE,SADQ;AAEdC,MAAAA,SAAS,EAAEL,KAAK,CAACM,MAAN,CAAaC;AAFV,KAAhB;AAIA,SAAKT,KAAL,CAAWI,QAAX,CAAoBC,OAApB,EAA6BK,IAA7B,CAAmCC,IAAD,IAAU;AAC1C,UAAIA,IAAI,IAAIA,IAAI,CAACC,OAAjB,EAA0B;AACxBC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAFD,MAEO;AACL,cAAMC,KAAK,GAAIL,IAAI,IAAIA,IAAI,CAACK,KAAd,IAAwB,EAAtC;AACA,aAAKjB,OAAL,CAAaiB,KAAb;AACD;AACF,KAPD,EAOGC,KAPH,CAOS,MAAM;AACb,YAAMC,OAAO,GAAG,KAAKlB,KAAL,CAAWmB,IAAX,CAAgBC,aAAhB,CAA8BC,kBAASC,YAAvC,CAAhB;AACA,WAAKvB,OAAL,CAAamB,OAAb;AACD,KAVD;AAWA,WAAO,IAAP;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,wBAKI,KAAKvB,KALT;AAAA,UAAM;AACJmB,MAAAA,IADI;AAEJpB,MAAAA,OAFI;AAGJK,MAAAA;AAHI,KAAN;AAAA,UAIKoB,IAJL;;AAMA,wBACE,qBAAC,cAAD;AACE,yBAAgB,yBADlB;AAEE,MAAA,KAAK,EAAEL,IAAI,CAACC,aAAL,CAAmBC,kBAASI,aAA5B,CAFT;AAGE,MAAA,UAAU,EAAGvB,KAAD,IAAW,KAAKD,UAAL,CAAgBC,KAAhB,CAHzB;AAIE,MAAA,IAAI,EAAC;AAJP,OAKMsB,IALN,EADF;AASD;;AA/C6C;;AAiDhD3B,uBAAuB,CAAC6B,SAAxB,GAAoC;AAClCP,EAAAA,IAAI,EAAEQ,gBAAUC,UADkB;AAElC7B,EAAAA,OAAO,EAAE8B,mBAAUC,IAAV,CAAeF,UAFU;AAGlCxB,EAAAA,QAAQ,EAAEyB,mBAAUC,IAAV,CAAeF;AAHS,CAApC;;eAKe,sBAAW/B,uBAAX,C","sourcesContent":["import React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Input } from '@edx/paragon';\n\nimport messages from './messages';\n\nclass MasqueradeUserNameInput extends Component {\n  onError(...args) {\n    return this.props.onError(...args);\n  }\n\n  onKeyPress(event) {\n    if (event.key === 'Enter') {\n      return this.onSubmit(event);\n    }\n    return true;\n  }\n\n  onSubmit(event) {\n    const payload = {\n      role: 'student',\n      user_name: event.target.value,\n    };\n    this.props.onSubmit(payload).then((data) => {\n      if (data && data.success) {\n        global.location.reload();\n      } else {\n        const error = (data && data.error) || '';\n        this.onError(error);\n      }\n    }).catch(() => {\n      const message = this.props.intl.formatMessage(messages.genericError);\n      this.onError(message);\n    });\n    return true;\n  }\n\n  render() {\n    const {\n      intl,\n      onError,\n      onSubmit,\n      ...rest\n    } = this.props;\n    return (\n      <Input\n        aria-labelledby=\"masquerade-search-label\"\n        label={intl.formatMessage(messages.userNameLabel)}\n        onKeyPress={(event) => this.onKeyPress(event)}\n        type=\"text\"\n        {...rest}\n      />\n    );\n  }\n}\nMasqueradeUserNameInput.propTypes = {\n  intl: intlShape.isRequired,\n  onError: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default injectIntl(MasqueradeUserNameInput);\n"],"file":"MasqueradeUserNameInput.js"}