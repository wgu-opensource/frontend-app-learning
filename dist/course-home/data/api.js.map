{"version":3,"sources":["../../../src/course-home/data/api.js"],"names":["calculateAssignmentTypeGrades","points","assignmentWeight","numDroppable","dropCount","length","lowestScore","Math","min","lowestScoreIndex","indexOf","splice","averageGrade","weightedGrade","reduce","a","b","toFixed","normalizeAssignmentPolicies","assignmentPolicies","sectionScores","gradeByAssignmentType","forEach","assignment","type","grades","Array","numTotal","fill","numAssignmentsCreated","numTotalExpectedAssignments","chapter","subsections","subsection","hasGradedAssignment","showGrades","numPointsPossible","assignmentType","numPointsEarned","shift","push","map","weight","shortLabel","normalizeCourseHomeCourseMetadata","metadata","rootSlug","data","tabs","tab","slug","tabId","title","url","isMasquerading","originalUserIsStaff","isStaff","normalizeOutlineBlocks","courseId","blocks","models","courses","sections","sequences","Object","values","block","id","display_name","sectionIds","children","hasScheduledContent","has_scheduled_content","complete","resumeBlock","resume_block","sequenceIds","description","due","effortActivities","effort_activities","effortTime","effort_time","icon","showLink","lms_web_url","course","isArray","sectionId","section","sequenceId","getCourseHomeCourseMetadata","LMS_BASE_URL","get","getDatesTabData","error","httpErrorStatus","customAttributes","getProgressTabData","targetUserId","camelCasedData","gradingPolicy","gradeRange","grading_policy","grade_range","gradesFeatureIsFullyLocked","completionSummary","lockedCount","gradesFeatureIsPartiallyLocked","learnerHasAccess","global","location","replace","getProctoringInfoData","username","encodeURIComponent","getLiveTabIframe","getTimeOffsetMillis","headerDate","requestTime","responseTime","timeOffsetMillis","undefined","headerTime","Date","parse","roundTripMillis","localTime","getOutlineTabData","now","tabData","headers","accessExpiration","access_expiration","canShowUpgradeSock","can_show_upgrade_sock","certData","cert_data","courseBlocks","course_blocks","courseGoals","course_goals","courseTools","course_tools","datesBannerInfo","dates_banner_info","datesWidget","dates_widget","enableProctoredExams","enable_proctored_exams","enrollAlert","enroll_alert","enrollmentMode","enrollment_mode","handoutsHtml","handouts_html","hasEnded","has_ended","offer","resumeCourse","resume_course","date","userHasPassingGrade","user_has_passing_grade","verifiedMode","verified_mode","welcomeMessageHtml","welcome_message_html","postCourseDeadlines","model","URL","post","href","course_key","research_event_data","deprecatedPostCourseGoals","goalKey","course_id","goal_key","postWeeklyLearningGoal","daysPerWeek","subscribedToReminders","days_per_week","subscribed_to_reminders","postDismissWelcomeMessage","postRequestCert","executePostFromPostEvent","postData","researchEventData","bodyParams","unsubscribeFromCourseGoal","token","then","res"],"mappings":"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","sourcesContent":["import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { logInfo } from '@edx/frontend-platform/logging';\nimport { appendBrowserTimezoneToUrl } from '../../utils';\n\nconst calculateAssignmentTypeGrades = (points, assignmentWeight, numDroppable) => {\n  let dropCount = numDroppable;\n  // Drop the lowest grades\n  while (dropCount && points.length >= dropCount) {\n    const lowestScore = Math.min(...points);\n    const lowestScoreIndex = points.indexOf(lowestScore);\n    points.splice(lowestScoreIndex, 1);\n    dropCount--;\n  }\n  let averageGrade = 0;\n  let weightedGrade = 0;\n  if (points.length) {\n    // Calculate the average grade for the assignment and round it. This rounding is not ideal and does not accurately\n    // reflect what a learner's grade would be, however, we must have parity with the current grading behavior that\n    // exists in edx-platform.\n    averageGrade = (points.reduce((a, b) => a + b, 0) / points.length).toFixed(2);\n    weightedGrade = averageGrade * assignmentWeight;\n  }\n  return { averageGrade, weightedGrade };\n};\n\nfunction normalizeAssignmentPolicies(assignmentPolicies, sectionScores) {\n  const gradeByAssignmentType = {};\n  assignmentPolicies.forEach(assignment => {\n    // Create an array with the number of total assignments and set the scores to 0\n    // as placeholders for assignments that have not yet been released\n    gradeByAssignmentType[assignment.type] = {\n      grades: Array(assignment.numTotal).fill(0),\n      numAssignmentsCreated: 0,\n      numTotalExpectedAssignments: assignment.numTotal,\n    };\n  });\n\n  sectionScores.forEach((chapter) => {\n    chapter.subsections.forEach((subsection) => {\n      if (!(subsection.hasGradedAssignment && subsection.showGrades && subsection.numPointsPossible)) {\n        return;\n      }\n      const {\n        assignmentType,\n        numPointsEarned,\n        numPointsPossible,\n      } = subsection;\n\n      // If a subsection's assignment type does not match an assignment policy in Studio,\n      // we won't be able to include it in this accumulation of grades by assignment type.\n      // This may happen if a course author has removed/renamed an assignment policy in Studio and\n      // neglected to update the subsection's of that assignment type\n      if (!gradeByAssignmentType[assignmentType]) {\n        return;\n      }\n\n      let {\n        numAssignmentsCreated,\n      } = gradeByAssignmentType[assignmentType];\n\n      numAssignmentsCreated++;\n      if (numAssignmentsCreated <= gradeByAssignmentType[assignmentType].numTotalExpectedAssignments) {\n        // Remove a placeholder grade so long as the number of recorded created assignments is less than the number\n        // of expected assignments\n        gradeByAssignmentType[assignmentType].grades.shift();\n      }\n      // Add the graded assignment to the list\n      gradeByAssignmentType[assignmentType].grades.push(numPointsEarned ? numPointsEarned / numPointsPossible : 0);\n      // Record the created assignment\n      gradeByAssignmentType[assignmentType].numAssignmentsCreated = numAssignmentsCreated;\n    });\n  });\n\n  return assignmentPolicies.map((assignment) => {\n    const { averageGrade, weightedGrade } = calculateAssignmentTypeGrades(\n      gradeByAssignmentType[assignment.type].grades,\n      assignment.weight,\n      assignment.numDroppable,\n    );\n\n    return {\n      averageGrade,\n      numDroppable: assignment.numDroppable,\n      shortLabel: assignment.shortLabel,\n      type: assignment.type,\n      weight: assignment.weight,\n      weightedGrade,\n    };\n  });\n}\n\n/**\n * Tweak the metadata for consistency\n * @param metadata the data to normalize\n * @param rootSlug either 'courseware' or 'outline' depending on the context\n * @returns {Object} The normalized metadata\n */\nfunction normalizeCourseHomeCourseMetadata(metadata, rootSlug) {\n  const data = camelCaseObject(metadata);\n  return {\n    ...data,\n    tabs: data.tabs.map(tab => ({\n      // The API uses \"courseware\" as a slug for both courseware and the outline tab.\n      // If needed, we switch it to \"outline\" here for\n      // use within the MFE to differentiate between course home and courseware.\n      slug: tab.tabId === 'courseware' ? rootSlug : tab.tabId,\n      title: tab.title,\n      url: tab.url,\n    })),\n    isMasquerading: data.originalUserIsStaff && !data.isStaff,\n  };\n}\n\nexport function normalizeOutlineBlocks(courseId, blocks) {\n  const models = {\n    courses: {},\n    sections: {},\n    sequences: {},\n  };\n  Object.values(blocks).forEach(block => {\n    switch (block.type) {\n      case 'course':\n        models.courses[block.id] = {\n          id: courseId,\n          title: block.display_name,\n          sectionIds: block.children || [],\n          hasScheduledContent: block.has_scheduled_content,\n        };\n        break;\n\n      case 'chapter':\n        models.sections[block.id] = {\n          complete: block.complete,\n          id: block.id,\n          title: block.display_name,\n          resumeBlock: block.resume_block,\n          sequenceIds: block.children || [],\n        };\n        break;\n\n      case 'sequential':\n        models.sequences[block.id] = {\n          complete: block.complete,\n          description: block.description,\n          due: block.due,\n          effortActivities: block.effort_activities,\n          effortTime: block.effort_time,\n          icon: block.icon,\n          id: block.id,\n          // The presence of a URL for the sequence indicates that we want this sequence to be a clickable\n          // link in the outline (even though we ignore the given url and use an internal <Link> to ourselves).\n          showLink: !!block.lms_web_url,\n          title: block.display_name,\n        };\n        break;\n\n      default:\n        logInfo(`Unexpected course block type: ${block.type} with ID ${block.id}.  Expected block types are course, chapter, and sequential.`);\n    }\n  });\n\n  // Next go through each list and use their child lists to decorate those children with a\n  // reference back to their parent.\n  Object.values(models.courses).forEach(course => {\n    if (Array.isArray(course.sectionIds)) {\n      course.sectionIds.forEach(sectionId => {\n        const section = models.sections[sectionId];\n        section.courseId = course.id;\n      });\n    }\n  });\n\n  Object.values(models.sections).forEach(section => {\n    if (Array.isArray(section.sequenceIds)) {\n      section.sequenceIds.forEach(sequenceId => {\n        if (sequenceId in models.sequences) {\n          models.sequences[sequenceId].sectionId = section.id;\n        } else {\n          logInfo(`Section ${section.id} has child block ${sequenceId}, but that block is not in the list of sequences.`);\n        }\n      });\n    }\n  });\n\n  return models;\n}\n\nexport async function getCourseHomeCourseMetadata(courseId, rootSlug) {\n  let url = `${getConfig().LMS_BASE_URL}/api/course_home/course_metadata/${courseId}`;\n  url = appendBrowserTimezoneToUrl(url);\n  const { data } = await getAuthenticatedHttpClient().get(url);\n  return normalizeCourseHomeCourseMetadata(data, rootSlug);\n}\n\n// For debugging purposes, you might like to see a fully loaded dates tab.\n// Just uncomment the next few lines and the immediate 'return' in the function below\n// import { Factory } from 'rosie';\n// import './__factories__';\nexport async function getDatesTabData(courseId) {\n  // return camelCaseObject(Factory.build('datesTabData'));\n  const url = `${getConfig().LMS_BASE_URL}/api/course_home/dates/${courseId}`;\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    return camelCaseObject(data);\n  } catch (error) {\n    const { httpErrorStatus } = error && error.customAttributes;\n    if (httpErrorStatus === 401) {\n      // The backend sends this for unenrolled and unauthenticated learners, but we handle those cases by examining\n      // courseAccess in the metadata call, so just ignore this status for now.\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport async function getProgressTabData(courseId, targetUserId) {\n  let url = `${getConfig().LMS_BASE_URL}/api/course_home/progress/${courseId}`;\n\n  // If targetUserId is passed in, we will get the progress page data\n  // for the user with the provided id, rather than the requesting user.\n  if (targetUserId) {\n    url += `/${targetUserId}/`;\n  }\n\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    const camelCasedData = camelCaseObject(data);\n\n    camelCasedData.gradingPolicy.assignmentPolicies = normalizeAssignmentPolicies(\n      camelCasedData.gradingPolicy.assignmentPolicies,\n      camelCasedData.sectionScores,\n    );\n\n    // We replace gradingPolicy.gradeRange with the original data to preserve the intended casing for the grade.\n    // For example, if a grade range key is \"A\", we do not want it to be camel cased (i.e. \"A\" would become \"a\")\n    // in order to preserve a course team's desired grade formatting.\n    camelCasedData.gradingPolicy.gradeRange = data.grading_policy.grade_range;\n\n    camelCasedData.gradesFeatureIsFullyLocked = camelCasedData.completionSummary.lockedCount > 0;\n\n    camelCasedData.gradesFeatureIsPartiallyLocked = false;\n    if (camelCasedData.gradesFeatureIsFullyLocked) {\n      camelCasedData.sectionScores.forEach((chapter) => {\n        chapter.subsections.forEach((subsection) => {\n          // If something is eligible to be gated by content type gating and would show up on the progress page\n          if (subsection.assignmentType !== null && subsection.hasGradedAssignment && subsection.showGrades\n            && (subsection.numPointsPossible > 0 || subsection.numPointsEarned > 0)) {\n            // but the learner still has access to it, then we are in a partially locked, rather than fully locked state\n            // since the learner has access to some (but not all) content that would normally be locked\n            if (subsection.learnerHasAccess) {\n              camelCasedData.gradesFeatureIsPartiallyLocked = true;\n              camelCasedData.gradesFeatureIsFullyLocked = false;\n            }\n          }\n        });\n      });\n    }\n\n    return camelCasedData;\n  } catch (error) {\n    const { httpErrorStatus } = error && error.customAttributes;\n    if (httpErrorStatus === 404) {\n      global.location.replace(`${getConfig().LMS_BASE_URL}/courses/${courseId}/progress`);\n      return {};\n    }\n    if (httpErrorStatus === 401) {\n      // The backend sends this for unenrolled and unauthenticated learners, but we handle those cases by examining\n      // courseAccess in the metadata call, so just ignore this status for now.\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport async function getProctoringInfoData(courseId, username) {\n  let url = `${getConfig().LMS_BASE_URL}/api/edx_proctoring/v1/user_onboarding/status?is_learning_mfe=true&course_id=${encodeURIComponent(courseId)}`;\n  if (username) {\n    url += `&username=${encodeURIComponent(username)}`;\n  }\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    return data;\n  } catch (error) {\n    const { httpErrorStatus } = error && error.customAttributes;\n    if (httpErrorStatus === 404) {\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport async function getLiveTabIframe(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/api/course_live/iframe/${courseId}/`;\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url);\n    return data;\n  } catch (error) {\n    const { httpErrorStatus } = error && error.customAttributes;\n    if (httpErrorStatus === 404) {\n      return {};\n    }\n    throw error;\n  }\n}\n\nexport function getTimeOffsetMillis(headerDate, requestTime, responseTime) {\n  // Time offset computation should move down into the HttpClient wrapper to maintain a global time correction reference\n  // Requires 'Access-Control-Expose-Headers: Date' on the server response per https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-expose-headers\n\n  let timeOffsetMillis = 0;\n  if (headerDate !== undefined) {\n    const headerTime = Date.parse(headerDate);\n    const roundTripMillis = requestTime - responseTime;\n    const localTime = responseTime - (roundTripMillis / 2); // Roughly compensate for transit time\n    timeOffsetMillis = headerTime - localTime;\n  }\n\n  return timeOffsetMillis;\n}\n\nexport async function getOutlineTabData(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/api/course_home/outline/${courseId}`;\n  const requestTime = Date.now();\n  const tabData = await getAuthenticatedHttpClient().get(url);\n  const responseTime = Date.now();\n\n  const {\n    data,\n    headers,\n  } = tabData;\n\n  const accessExpiration = camelCaseObject(data.access_expiration);\n  const canShowUpgradeSock = data.can_show_upgrade_sock;\n  const certData = camelCaseObject(data.cert_data);\n  const courseBlocks = data.course_blocks ? normalizeOutlineBlocks(courseId, data.course_blocks.blocks) : {};\n  const courseGoals = camelCaseObject(data.course_goals);\n  const courseTools = camelCaseObject(data.course_tools);\n  const datesBannerInfo = camelCaseObject(data.dates_banner_info);\n  const datesWidget = camelCaseObject(data.dates_widget);\n  const enableProctoredExams = data.enable_proctored_exams;\n  const enrollAlert = camelCaseObject(data.enroll_alert);\n  const enrollmentMode = data.enrollment_mode;\n  const handoutsHtml = data.handouts_html;\n  const hasScheduledContent = data.has_scheduled_content;\n  const hasEnded = data.has_ended;\n  const offer = camelCaseObject(data.offer);\n  const resumeCourse = camelCaseObject(data.resume_course);\n  const timeOffsetMillis = getTimeOffsetMillis(headers && headers.date, requestTime, responseTime);\n  const userHasPassingGrade = data.user_has_passing_grade;\n  const verifiedMode = camelCaseObject(data.verified_mode);\n  const welcomeMessageHtml = data.welcome_message_html;\n\n  return {\n    accessExpiration,\n    canShowUpgradeSock,\n    certData,\n    courseBlocks,\n    courseGoals,\n    courseTools,\n    datesBannerInfo,\n    datesWidget,\n    enrollAlert,\n    enrollmentMode,\n    enableProctoredExams,\n    handoutsHtml,\n    hasScheduledContent,\n    hasEnded,\n    offer,\n    resumeCourse,\n    timeOffsetMillis, // This should move to a global time correction reference\n    userHasPassingGrade,\n    verifiedMode,\n    welcomeMessageHtml,\n  };\n}\n\nexport async function postCourseDeadlines(courseId, model) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_experience/v1/reset_course_deadlines`);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_key: courseId,\n    research_event_data: { location: `${model}-tab` },\n  });\n}\n\nexport async function deprecatedPostCourseGoals(courseId, goalKey) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/save_course_goal`);\n  return getAuthenticatedHttpClient().post(url.href, { course_id: courseId, goal_key: goalKey });\n}\n\nexport async function postWeeklyLearningGoal(courseId, daysPerWeek, subscribedToReminders) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/save_course_goal`);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_id: courseId,\n    days_per_week: daysPerWeek,\n    subscribed_to_reminders: subscribedToReminders,\n  });\n}\n\nexport async function postDismissWelcomeMessage(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/dismiss_welcome_message`);\n  await getAuthenticatedHttpClient().post(url.href, { course_id: courseId });\n}\n\nexport async function postRequestCert(courseId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/courses/${courseId}/generate_user_cert`);\n  await getAuthenticatedHttpClient().post(url.href);\n}\n\nexport async function executePostFromPostEvent(postData, researchEventData) {\n  const url = new URL(postData.url);\n  return getAuthenticatedHttpClient().post(url.href, {\n    course_key: postData.bodyParams.courseId,\n    research_event_data: researchEventData,\n  });\n}\n\nexport async function unsubscribeFromCourseGoal(token) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/course_home/unsubscribe_from_course_goal/${token}`);\n  return getAuthenticatedHttpClient().post(url.href)\n    .then(res => camelCaseObject(res));\n}\n"],"file":"api.js"}