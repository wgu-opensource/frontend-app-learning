{"version":3,"sources":["../../../../src/course-home/outline-tab/widgets/ProctoringInfoPanel.jsx"],"names":["ProctoringInfoPanel","intl","courseId","state","courseHome","username","dispatch","link","setLink","onboardingPastDue","setOnboardingPastDue","showInfoPanel","setShowInfoPanel","status","setStatus","readableStatus","setReadableStatus","releaseDate","setReleaseDate","readableStatuses","notStarted","started","submitted","verified","rejected","error","otherCourseApproved","expiringSoon","expired","getReadableStatusClass","examStatus","readableClass","includes","examStatusCamelCase","isCurrentlySubmitted","SUBMITTED_STATES","isSubmissionRequired","OK_STATES","isNotYetReleased","examReleaseDate","now","Date","getBorderClass","borderClass","isExpired","dateString","today","expirationDateObject","getTime","isExpiringSoon","twentyeightDays","then","response","Object","keys","length","onboarding_status","onboarding_link","expirationDate","expiration_date","onboarding_release_date","onboarding_past_due","catch","finally","onboardingExamButton","formatMessage","messages","proctoringOnboardingButtonNotOpen","formatDate","day","month","year","proctoringOnboardingButtonPastDue","proctoringOnboardingPracticeButton","proctoringOnboardingButton","proctoringInfoPanel","proctoringCurrentStatus","proctoringPanelGeneralInfo","proctoringPanelGeneralInfoSubmitted","proctoringPanelGeneralTime","proctoringReviewRequirementsButton","propTypes","intlShape","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,SAASA,mBAAT,OAAuC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AACrC,QAAM;AACJC,IAAAA;AADI,MAEF,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAA3B,CAFJ;AAGA,QAAM;AACJC,IAAAA;AADI,MAEF,0BAAS,gBAAT,EAA2BH,QAA3B,CAFJ;AAGA,QAAMI,QAAQ,GAAG,8BAAjB;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB,qBAAS,EAAT,CAAxB;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4C,qBAAS,KAAT,CAAlD;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC,qBAAS,KAAT,CAA1C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB,qBAAS,EAAT,CAA5B;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC,qBAAS,EAAT,CAA5C;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC,qBAAS,IAAT,CAAtC;AAEA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,UAAU,EAAE,YADW;AAEvBC,IAAAA,OAAO,EAAE,SAFc;AAGvBC,IAAAA,SAAS,EAAE,WAHY;AAIvBC,IAAAA,QAAQ,EAAE,UAJa;AAKvBC,IAAAA,QAAQ,EAAE,UALa;AAMvBC,IAAAA,KAAK,EAAE,OANgB;AAOvBC,IAAAA,mBAAmB,EAAE,qBAPE;AAQvBC,IAAAA,YAAY,EAAE,cARS;AASvBC,IAAAA,OAAO,EAAE;AATc,GAAzB;;AAYA,WAASC,sBAAT,CAAgCC,UAAhC,EAA4C;AAC1C,QAAIC,aAAa,GAAG,EAApB;;AACA,QAAI,CAAC,SAAD,EAAY,2BAAZ,EAAyC,gBAAzC,EAA2DC,QAA3D,CAAoEF,UAApE,KAAmF,CAACA,UAAxF,EAAoG;AAClGC,MAAAA,aAAa,GAAGZ,gBAAgB,CAACC,UAAjC;AACD,KAFD,MAEO,IAAI,CAAC,SAAD,EAAY,iBAAZ,EAA+BY,QAA/B,CAAwCF,UAAxC,CAAJ,EAAyD;AAC9DC,MAAAA,aAAa,GAAGZ,gBAAgB,CAACE,OAAjC;AACD,KAFM,MAEA,IAAI,CAAC,wBAAD,EAA2B,WAA3B,EAAwCW,QAAxC,CAAiDF,UAAjD,CAAJ,EAAkE;AACvEC,MAAAA,aAAa,GAAGZ,gBAAgB,CAACG,SAAjC;AACD,KAFM,MAEA;AACL,YAAMW,mBAAmB,GAAG,qBAAUH,UAAV,CAA5B;;AACA,UAAIG,mBAAmB,IAAId,gBAA3B,EAA6C;AAC3CY,QAAAA,aAAa,GAAGZ,gBAAgB,CAACc,mBAAD,CAAhC;AACD;AACF;;AACD,WAAOF,aAAP;AACD;;AAED,WAASG,oBAAT,CAA8BJ,UAA9B,EAA0C;AACxC,UAAMK,gBAAgB,GAAG,CAAC,WAAD,EAAc,wBAAd,CAAzB;AACA,WAAOA,gBAAgB,CAACH,QAAjB,CAA0BF,UAA1B,CAAP;AACD;;AAED,WAASM,oBAAT,CAA8BN,UAA9B,EAA0C;AACxC,UAAMO,SAAS,GAAG,CAAClB,gBAAgB,CAACG,SAAlB,EAA6BH,gBAAgB,CAACI,QAA9C,CAAlB;AACA,WAAO,CAACc,SAAS,CAACL,QAAV,CAAmBF,UAAnB,CAAR;AACD;;AAED,WAASQ,gBAAT,CAA0BC,eAA1B,EAA2C;AACzC,QAAI,CAACA,eAAL,EAAsB;AACpB,aAAO,KAAP;AACD;;AACD,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,WAAOD,GAAG,GAAGD,eAAb;AACD;;AAED,WAASG,cAAT,GAA0B;AACxB,QAAIC,WAAW,GAAG,EAAlB;;AACA,QAAI,CAACxB,gBAAgB,CAACG,SAAlB,EAA6BH,gBAAgB,CAACQ,YAA9C,EAA4DK,QAA5D,CAAqEjB,cAArE,CAAJ,EAA0F;AACxF4B,MAAAA,WAAW,GAAG,iCAAd;AACD,KAFD,MAEO,IAAI,CAACxB,gBAAgB,CAACI,QAAlB,EAA4BJ,gBAAgB,CAACO,mBAA7C,EAAkEM,QAAlE,CAA2EjB,cAA3E,CAAJ,EAAgG;AACrG4B,MAAAA,WAAW,GAAG,+BAAd;AACD;;AACD,WAAOA,WAAP;AACD;;AAED,WAASC,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B;AACA,UAAMC,KAAK,GAAG,IAAIL,IAAJ,EAAd;AACA,UAAMM,oBAAoB,GAAG,IAAIN,IAAJ,CAASI,UAAT,CAA7B;AACA,WAAOC,KAAK,IAAIC,oBAAoB,CAACC,OAArB,EAAhB;AACD;;AAED,WAASC,cAAT,CAAwBJ,UAAxB,EAAoC;AAClC;AACA,UAAMK,eAAe,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAA5C;AACA,UAAMJ,KAAK,GAAG,IAAIL,IAAJ,EAAd;AACA,UAAMM,oBAAoB,GAAG,IAAIN,IAAJ,CAASI,UAAT,CAA7B;AACA,WAAOC,KAAK,GAAGC,oBAAoB,CAACC,OAArB,KAAiCE,eAAhD;AACD;;AAED,wBAAU,MAAM;AACd,oCAAsBhD,QAAtB,EAAgCG,QAAhC,EACG8C,IADH,CAEIC,QAAQ,IAAI;AACV,UAAIA,QAAJ,EAAc;AACZ,YAAIC,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,MAAtB,GAA+B,CAAnC,EAAsC;AACpC3C,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AAEDE,QAAAA,SAAS,CAACsC,QAAQ,CAACI,iBAAV,CAAT;AACAhD,QAAAA,OAAO,CAAC4C,QAAQ,CAACK,eAAV,CAAP;AACA,cAAMC,cAAc,GAAGN,QAAQ,CAACO,eAAhC;;AACA,YAAID,cAAc,IAAId,SAAS,CAACc,cAAD,CAA/B,EAAiD;AAC/C1C,UAAAA,iBAAiB,CAACa,sBAAsB,CAAC,SAAD,CAAvB,CAAjB;AACD,SAFD,MAEO,IAAI6B,cAAc,IAAIT,cAAc,CAACS,cAAD,CAApC,EAAsD;AAC3D1C,UAAAA,iBAAiB,CAACa,sBAAsB,CAAC,cAAD,CAAvB,CAAjB;AACD,SAFM,MAEA;AACLb,UAAAA,iBAAiB,CAACa,sBAAsB,CAACuB,QAAQ,CAACI,iBAAV,CAAvB,CAAjB;AACD;;AACDtC,QAAAA,cAAc,CAAC,IAAIuB,IAAJ,CAASW,QAAQ,CAACQ,uBAAlB,CAAD,CAAd;AACAlD,QAAAA,oBAAoB,CAAC0C,QAAQ,CAACS,mBAAV,CAApB;AACD;AACF,KArBL,EAuBGC,KAvBH,CAuBS,MAAM;AACX;AACD,KAzBH,EA0BGC,OA1BH,CA0BW,MAAM;AACbzD,MAAAA,QAAQ,CAAC,yCAAD,CAAR;AACD,KA5BH;AA6BD,GA9BD,EA8BG,EA9BH;AAgCA,MAAI0D,oBAAoB,GAAG,IAA3B;;AAEA,MAAI1B,gBAAgB,CAACrB,WAAD,CAApB,EAAmC;AACjC+C,IAAAA,oBAAoB,gBAClB,qBAAC,eAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,MAAjC;AAAkC,MAAA,QAAQ,MAA1C;AAA2C,uBAAc,MAAzD;AAAA,gBACG/D,IAAI,CAACgE,aAAL,CACCC,kBAASC,iCADV,EAEC;AACElD,QAAAA,WAAW,EAAEhB,IAAI,CAACmE,UAAL,CAAgBnD,WAAhB,EAA6B;AACxCoD,UAAAA,GAAG,EAAE,SADmC;AAExCC,UAAAA,KAAK,EAAE,OAFiC;AAGxCC,UAAAA,IAAI,EAAE;AAHkC,SAA7B;AADf,OAFD;AADH,MADF;AAcD,GAfD,MAeO,IAAI9D,iBAAJ,EAAuB;AAC5BuD,IAAAA,oBAAoB,gBAClB,qBAAC,eAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,MAAjC;AAAkC,MAAA,QAAQ,MAA1C;AAA2C,uBAAc,MAAzD;AAAA,gBACG/D,IAAI,CAACgE,aAAL,CAAmBC,kBAASM,iCAA5B;AADH,MADF;AAKD,GANM,MAMA,IAAI,CAAClC,gBAAgB,CAACrB,WAAD,CAArB,EAAoC;AACzC,QAAIF,cAAc,KAAKI,gBAAgB,CAACO,mBAAxC,EAA6D;AAC3DsC,MAAAA,oBAAoB,gBAClB,qBAAC,eAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,KAAK,MAA/B;AAAgC,QAAA,IAAI,EAAEzD,IAAtC;AAAA,kBACGN,IAAI,CAACgE,aAAL,CAAmBC,kBAASO,kCAA5B;AADH,QADF;AAKD,KAND,MAMO,IAAI1D,cAAc,KAAKI,gBAAgB,CAACO,mBAAxC,EAA6D;AAClEsC,MAAAA,oBAAoB,gBAClB,qBAAC,eAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,KAAK,MAA/B;AAAgC,QAAA,IAAI,EAAEzD,IAAtC;AAAA,kBACGN,IAAI,CAACgE,aAAL,CAAmBC,kBAASQ,0BAA5B;AADH,QADF;AAKD;AACF;;AAED,sBACE;AAAA,cACI/D,aAAa,iBACb;AAAS,MAAA,SAAS,EAAG,6CAA4C+B,cAAc,EAAG,EAAlF;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,IAAd;AAAmB,QAAA,EAAE,EAAC,gCAAtB;AAAA,kBAAwDzC,IAAI,CAACgE,aAAL,CAAmBC,kBAASS,mBAA5B;AAAxD,QADF,eAEE;AAAA,mBACG5D,cAAc,iBACb;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC,IAAb;AAAA,uBACGd,IAAI,CAACgE,aAAL,CAAmBC,kBAASU,uBAA5B,CADH,OAC0D3E,IAAI,CAACgE,aAAL,CAAmBC,kBAAU,GAAEnD,cAAe,kBAA3B,CAAnB,CAD1D;AAAA,YADF,eAIE;AAAA,sBACGd,IAAI,CAACgE,aAAL,CAAmBC,kBAAU,GAAEnD,cAAe,mBAA3B,CAAnB;AADH,YAJF,eAOE;AAAA,sBACGA,cAAc,KAAKI,gBAAgB,CAACO,mBAApC,IAA2DzB,IAAI,CAACgE,aAAL,CAAmBC,kBAAU,GAAEnD,cAAe,kBAA3B,CAAnB;AAD9D,YAPF;AAAA,UAFJ,EAcG,CAAC,CAACI,gBAAgB,CAACI,QAAlB,EAA4BJ,gBAAgB,CAACO,mBAA7C,EAAkEM,QAAlE,CAA2EjB,cAA3E,CAAD,iBACC;AAAA,kCACE;AAAA,uBACG,CAACmB,oBAAoB,CAACrB,MAAD,CAArB,IACCZ,IAAI,CAACgE,aAAL,CAAmBC,kBAASW,0BAA5B,CAFJ,EAIG3C,oBAAoB,CAACrB,MAAD,CAApB,IACCZ,IAAI,CAACgE,aAAL,CAAmBC,kBAASY,mCAA5B,CALJ;AAAA,YADF,eASE;AAAA,sBAAI7E,IAAI,CAACgE,aAAL,CAAmBC,kBAASa,0BAA5B;AAAJ,YATF;AAAA,UAfJ,EA2BG3C,oBAAoB,CAACrB,cAAD,CAApB,IACCiD,oBA5BJ,eA8BE,qBAAC,eAAD;AAAQ,UAAA,OAAO,EAAC,iBAAhB;AAAkC,UAAA,KAAK,MAAvC;AAAwC,UAAA,IAAI,EAAC,yFAA7C;AAAA,oBACG/D,IAAI,CAACgE,aAAL,CAAmBC,kBAASc,kCAA5B;AADH,UA9BF;AAAA,QAFF;AAAA;AAFJ,IADF;AA2CD;;AAEDhF,mBAAmB,CAACiF,SAApB,GAAgC;AAC9BhF,EAAAA,IAAI,EAAEiF,gBAAUC;AADc,CAAhC;;eAIe,sBAAWnF,mBAAX,C","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport camelCase from 'lodash.camelcase';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\n\nimport messages from '../messages';\nimport { getProctoringInfoData } from '../../data/api';\nimport { fetchProctoringInfoResolved } from '../../data/slice';\nimport { useModel } from '../../../generic/model-store';\n\nfunction ProctoringInfoPanel({ intl }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    username,\n  } = useModel('courseHomeMeta', courseId);\n  const dispatch = useDispatch();\n\n  const [link, setLink] = useState('');\n  const [onboardingPastDue, setOnboardingPastDue] = useState(false);\n  const [showInfoPanel, setShowInfoPanel] = useState(false);\n  const [status, setStatus] = useState('');\n  const [readableStatus, setReadableStatus] = useState('');\n  const [releaseDate, setReleaseDate] = useState(null);\n\n  const readableStatuses = {\n    notStarted: 'notStarted',\n    started: 'started',\n    submitted: 'submitted',\n    verified: 'verified',\n    rejected: 'rejected',\n    error: 'error',\n    otherCourseApproved: 'otherCourseApproved',\n    expiringSoon: 'expiringSoon',\n    expired: 'expired',\n  };\n\n  function getReadableStatusClass(examStatus) {\n    let readableClass = '';\n    if (['created', 'download_software_clicked', 'ready_to_start'].includes(examStatus) || !examStatus) {\n      readableClass = readableStatuses.notStarted;\n    } else if (['started', 'ready_to_submit'].includes(examStatus)) {\n      readableClass = readableStatuses.started;\n    } else if (['second_review_required', 'submitted'].includes(examStatus)) {\n      readableClass = readableStatuses.submitted;\n    } else {\n      const examStatusCamelCase = camelCase(examStatus);\n      if (examStatusCamelCase in readableStatuses) {\n        readableClass = readableStatuses[examStatusCamelCase];\n      }\n    }\n    return readableClass;\n  }\n\n  function isCurrentlySubmitted(examStatus) {\n    const SUBMITTED_STATES = ['submitted', 'second_review_required'];\n    return SUBMITTED_STATES.includes(examStatus);\n  }\n\n  function isSubmissionRequired(examStatus) {\n    const OK_STATES = [readableStatuses.submitted, readableStatuses.verified];\n    return !OK_STATES.includes(examStatus);\n  }\n\n  function isNotYetReleased(examReleaseDate) {\n    if (!examReleaseDate) {\n      return false;\n    }\n    const now = new Date();\n    return now < examReleaseDate;\n  }\n\n  function getBorderClass() {\n    let borderClass = '';\n    if ([readableStatuses.submitted, readableStatuses.expiringSoon].includes(readableStatus)) {\n      borderClass = 'proctoring-onboarding-submitted';\n    } else if ([readableStatuses.verified, readableStatuses.otherCourseApproved].includes(readableStatus)) {\n      borderClass = 'proctoring-onboarding-success';\n    }\n    return borderClass;\n  }\n\n  function isExpired(dateString) {\n    // Returns true if the expiration date has passed\n    const today = new Date();\n    const expirationDateObject = new Date(dateString);\n    return today >= expirationDateObject.getTime();\n  }\n\n  function isExpiringSoon(dateString) {\n    // Returns true if the expiration date is within 28 days\n    const twentyeightDays = 28 * 24 * 60 * 60 * 1000;\n    const today = new Date();\n    const expirationDateObject = new Date(dateString);\n    return today > expirationDateObject.getTime() - twentyeightDays;\n  }\n\n  useEffect(() => {\n    getProctoringInfoData(courseId, username)\n      .then(\n        response => {\n          if (response) {\n            if (Object.keys(response).length > 0) {\n              setShowInfoPanel(true);\n            }\n\n            setStatus(response.onboarding_status);\n            setLink(response.onboarding_link);\n            const expirationDate = response.expiration_date;\n            if (expirationDate && isExpired(expirationDate)) {\n              setReadableStatus(getReadableStatusClass('expired'));\n            } else if (expirationDate && isExpiringSoon(expirationDate)) {\n              setReadableStatus(getReadableStatusClass('expiringSoon'));\n            } else {\n              setReadableStatus(getReadableStatusClass(response.onboarding_status));\n            }\n            setReleaseDate(new Date(response.onboarding_release_date));\n            setOnboardingPastDue(response.onboarding_past_due);\n          }\n        },\n      )\n      .catch(() => {\n        /* Do nothing. API throws 404 when class does not have proctoring */\n      })\n      .finally(() => {\n        dispatch(fetchProctoringInfoResolved());\n      });\n  }, []);\n\n  let onboardingExamButton = null;\n\n  if (isNotYetReleased(releaseDate)) {\n    onboardingExamButton = (\n      <Button variant=\"secondary\" block disabled aria-disabled=\"true\">\n        {intl.formatMessage(\n          messages.proctoringOnboardingButtonNotOpen,\n          {\n            releaseDate: intl.formatDate(releaseDate, {\n              day: 'numeric',\n              month: 'short',\n              year: 'numeric',\n            }),\n          },\n        )}\n      </Button>\n    );\n  } else if (onboardingPastDue) {\n    onboardingExamButton = (\n      <Button variant=\"secondary\" block disabled aria-disabled=\"true\">\n        {intl.formatMessage(messages.proctoringOnboardingButtonPastDue)}\n      </Button>\n    );\n  } else if (!isNotYetReleased(releaseDate)) {\n    if (readableStatus === readableStatuses.otherCourseApproved) {\n      onboardingExamButton = (\n        <Button variant=\"primary\" block href={link}>\n          {intl.formatMessage(messages.proctoringOnboardingPracticeButton)}\n        </Button>\n      );\n    } else if (readableStatus !== readableStatuses.otherCourseApproved) {\n      onboardingExamButton = (\n        <Button variant=\"primary\" block href={link}>\n          {intl.formatMessage(messages.proctoringOnboardingButton)}\n        </Button>\n      );\n    }\n  }\n\n  return (\n    <>\n      { showInfoPanel && (\n        <section className={`mb-4 p-3 outline-sidebar-proctoring-panel ${getBorderClass()}`}>\n          <h2 className=\"h4\" id=\"outline-sidebar-upgrade-header\">{intl.formatMessage(messages.proctoringInfoPanel)}</h2>\n          <div>\n            {readableStatus && (\n              <>\n                <p className=\"h6\">\n                  {intl.formatMessage(messages.proctoringCurrentStatus)} {intl.formatMessage(messages[`${readableStatus}ProctoringStatus`])}\n                </p>\n                <p>\n                  {intl.formatMessage(messages[`${readableStatus}ProctoringMessage`])}\n                </p>\n                <p>\n                  {readableStatus === readableStatuses.otherCourseApproved && intl.formatMessage(messages[`${readableStatus}ProctoringDetail`])}\n                </p>\n              </>\n            )}\n            {![readableStatuses.verified, readableStatuses.otherCourseApproved].includes(readableStatus) && (\n              <>\n                <p>\n                  {!isCurrentlySubmitted(status) && (\n                    intl.formatMessage(messages.proctoringPanelGeneralInfo)\n                  )}\n                  {isCurrentlySubmitted(status) && (\n                    intl.formatMessage(messages.proctoringPanelGeneralInfoSubmitted)\n                  )}\n                </p>\n                <p>{intl.formatMessage(messages.proctoringPanelGeneralTime)}</p>\n              </>\n            )}\n            {isSubmissionRequired(readableStatus) && (\n              onboardingExamButton\n            )}\n            <Button variant=\"outline-primary\" block href=\"https://support.edx.org/hc/en-us/sections/115004169247-Taking-Timed-and-Proctored-Exams\">\n              {intl.formatMessage(messages.proctoringReviewRequirementsButton)}\n            </Button>\n          </div>\n        </section>\n      )}\n    </>\n  );\n}\n\nProctoringInfoPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ProctoringInfoPanel);\n"],"file":"ProctoringInfoPanel.js"}