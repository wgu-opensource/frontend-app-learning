{"version":3,"sources":["../../../../src/course-home/outline-tab/widgets/WeeklyLearningGoalCard.jsx"],"names":["WeeklyLearningGoalCard","daysPerWeek","subscribedToReminders","intl","courseId","state","courseHome","isMasquerading","org","administrator","daysPerWeekGoal","setDaysPerWeekGoal","isGetReminderSelected","setGetReminderSelected","location","handleSelect","days","triggeredFromEmail","selectReminders","org_key","courserun_key","is_staff","num_days","reminder_selected","handleSubscribeToReminders","event","isGetReminderChecked","target","checked","currentParams","URLSearchParams","search","weeklyGoal","Number","get","includes","delete","history","replace","toString","formatMessage","messages","setWeeklyGoal","setWeeklyGoalDetail","setGoalReminder","Email","goalReminderDetail","propTypes","PropTypes","number","bool","intlShape","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Form, Card, Icon } from '@edx/paragon';\nimport { history } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Email } from '@edx/paragon/icons';\nimport { useSelector } from 'react-redux';\nimport messages from '../messages';\nimport LearningGoalButton from './LearningGoalButton';\nimport { saveWeeklyLearningGoal } from '../../data';\nimport { useModel } from '../../../generic/model-store';\nimport './FlagButton.scss';\n\nfunction WeeklyLearningGoalCard({\n  daysPerWeek,\n  subscribedToReminders,\n  intl,\n}) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isMasquerading,\n    org,\n  } = useModel('courseHomeMeta', courseId);\n\n  const { administrator } = getAuthenticatedUser();\n\n  const [daysPerWeekGoal, setDaysPerWeekGoal] = useState(daysPerWeek);\n  // eslint-disable-next-line react/prop-types\n  const [isGetReminderSelected, setGetReminderSelected] = useState(subscribedToReminders);\n  const location = useLocation();\n\n  function handleSelect(days, triggeredFromEmail = false) {\n    // Set the subscription button if this is the first time selecting a goal\n    const selectReminders = daysPerWeekGoal === null ? true : isGetReminderSelected;\n    setGetReminderSelected(selectReminders);\n    setDaysPerWeekGoal(days);\n    if (!isMasquerading) { // don't save goal updates while masquerading\n      saveWeeklyLearningGoal(courseId, days, selectReminders);\n      sendTrackEvent('edx.ui.lms.goal.days-per-week.changed', {\n        org_key: org,\n        courserun_key: courseId,\n        is_staff: administrator,\n        num_days: days,\n        reminder_selected: selectReminders,\n      });\n      if (triggeredFromEmail) {\n        sendTrackEvent('welcome.email.clicked.setgoal', {});\n      }\n    }\n  }\n\n  function handleSubscribeToReminders(event) {\n    const isGetReminderChecked = event.target.checked;\n    setGetReminderSelected(isGetReminderChecked);\n    if (!isMasquerading) { // don't save goal updates while masquerading\n      saveWeeklyLearningGoal(courseId, daysPerWeekGoal, isGetReminderChecked);\n      sendTrackEvent('edx.ui.lms.goal.reminder-selected.changed', {\n        org_key: org,\n        courserun_key: courseId,\n        is_staff: administrator,\n        num_days: daysPerWeekGoal,\n        reminder_selected: isGetReminderChecked,\n      });\n    }\n  }\n\n  useEffect(() => {\n    const currentParams = new URLSearchParams(location.search);\n    const weeklyGoal = Number(currentParams.get('weekly_goal'));\n    if ([1, 3, 5].includes(weeklyGoal)) {\n      handleSelect(weeklyGoal, true);\n\n      // Deleting the weekly_goal query param as it only needs to be set once\n      // whenever passed in query params.\n      currentParams.delete('weekly_goal');\n      history.replace({\n        search: currentParams.toString(),\n      });\n    }\n  }, [location.search]);\n\n  return (\n    <Card\n      id=\"courseHome-weeklyLearningGoal\"\n      className=\"row w-100 m-0 mb-3 raised-card\"\n      data-testid=\"weekly-learning-goal-card\"\n    >\n      <Card.Header\n        size=\"sm\"\n        title={(<div id=\"set-weekly-goal-header\">{intl.formatMessage(messages.setWeeklyGoal)}</div>)}\n        subtitle={intl.formatMessage(messages.setWeeklyGoalDetail)}\n      />\n      <Card.Section className=\"text-gray-700 small\">\n        <div\n          role=\"radiogroup\"\n          aria-labelledby=\"set-weekly-goal-header\"\n          className=\"flag-button-container m-0 p-0\"\n        >\n          <LearningGoalButton\n            level=\"casual\"\n            isSelected={daysPerWeekGoal === 1}\n            handleSelect={handleSelect}\n          />\n          <LearningGoalButton\n            level=\"regular\"\n            isSelected={daysPerWeekGoal === 3}\n            handleSelect={handleSelect}\n          />\n          <LearningGoalButton\n            level=\"intense\"\n            isSelected={daysPerWeekGoal === 5}\n            handleSelect={handleSelect}\n          />\n        </div>\n        <div className=\"d-flex pt-3\">\n          <Form.Switch\n            checked={isGetReminderSelected}\n            onChange={(event) => handleSubscribeToReminders(event)}\n            disabled={!daysPerWeekGoal}\n          >\n            <small>{intl.formatMessage(messages.setGoalReminder)}</small>\n          </Form.Switch>\n        </div>\n      </Card.Section>\n      {isGetReminderSelected && (\n        <Card.Section muted>\n          <div className=\"row w-100 m-0 small align-center\">\n            <div className=\"d-flex align-items-center pr-1\">\n              <Icon\n                className=\"text-primary-500\"\n                src={Email}\n              />\n            </div>\n            <div className=\"col\">\n              {intl.formatMessage(messages.goalReminderDetail)}\n            </div>\n          </div>\n        </Card.Section>\n      )}\n    </Card>\n  );\n}\n\nWeeklyLearningGoalCard.propTypes = {\n  daysPerWeek: PropTypes.number,\n  subscribedToReminders: PropTypes.bool,\n  intl: intlShape.isRequired,\n};\n\nWeeklyLearningGoalCard.defaultProps = {\n  daysPerWeek: null,\n  subscribedToReminders: false,\n};\nexport default injectIntl(WeeklyLearningGoalCard);\n"],"file":"WeeklyLearningGoalCard.js"}