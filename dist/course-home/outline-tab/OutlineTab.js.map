{"version":3,"sources":["../../../src/course-home/outline-tab/OutlineTab.jsx"],"names":["OutlineTab","intl","courseId","proctoringPanelStatus","state","courseHome","isSelfPaced","org","title","userTimezone","accessExpiration","courseBlocks","courses","sections","courseGoals","selectedGoal","weeklyLearningGoalEnabled","datesBannerInfo","datesWidget","courseDateBlocks","enableProctoredExams","offer","timeOffsetMillis","verifiedMode","marketingUrl","expandAll","setExpandAll","eventProperties","org_key","courserun_key","courseStartAlert","courseEndAlert","certificateAvailableAlert","privateCourseAlert","scheduledContentAlert","rootCourseId","Object","keys","hasDeadlines","some","x","dateType","logUpgradeToShiftDatesLinkClick","linkCategory","linkName","linkType","pageName","isEnterpriseUser","authenticatedUser","userRoleNames","roles","map","role","split","includes","MMP2P","learnerType","location","currentParams","URLSearchParams","search","startCourse","get","delete","history","replace","toString","isEnabled","fetchOutlineTab","formatMessage","messages","collapseAll","sectionIds","sectionId","resumeBlock","daysPerWeek","subscribedToReminders","contentTypeGatingEnabled","propTypes","intlShape","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { history } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { AlertList } from '../../generic/user-messages';\n\nimport CourseDates from './widgets/CourseDates';\nimport CourseHandouts from './widgets/CourseHandouts';\nimport StartOrResumeCourseCard from './widgets/StartOrResumeCourseCard';\nimport WeeklyLearningGoalCard from './widgets/WeeklyLearningGoalCard';\nimport CourseTools from './widgets/CourseTools';\nimport { fetchOutlineTab } from '../data';\nimport messages from './messages';\nimport Section from './Section';\nimport ShiftDatesAlert from '../suggested-schedule-messaging/ShiftDatesAlert';\nimport UpgradeNotification from '../../generic/upgrade-notification/UpgradeNotification';\nimport UpgradeToShiftDatesAlert from '../suggested-schedule-messaging/UpgradeToShiftDatesAlert';\nimport useCertificateAvailableAlert from './alerts/certificate-status-alert';\nimport useCourseEndAlert from './alerts/course-end-alert';\nimport useCourseStartAlert from '../../alerts/course-start-alert';\nimport usePrivateCourseAlert from './alerts/private-course-alert';\nimport useScheduledContentAlert from './alerts/scheduled-content-alert';\nimport { useModel } from '../../generic/model-store';\nimport WelcomeMessage from './widgets/WelcomeMessage';\nimport ProctoringInfoPanel from './widgets/ProctoringInfoPanel';\nimport AccountActivationAlert from '../../alerts/logistration-alert/AccountActivationAlert';\n\n/** [MM-P2P] Experiment */\nimport { initHomeMMP2P, MMP2PFlyover } from '../../experiments/mm-p2p';\n\nfunction OutlineTab({ intl }) {\n  const {\n    courseId,\n    proctoringPanelStatus,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isSelfPaced,\n    org,\n    title,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    accessExpiration,\n    courseBlocks: {\n      courses,\n      sections,\n    },\n    courseGoals: {\n      selectedGoal,\n      weeklyLearningGoalEnabled,\n    } = {},\n    datesBannerInfo,\n    datesWidget: {\n      courseDateBlocks,\n    },\n    enableProctoredExams,\n    offer,\n    timeOffsetMillis,\n    verifiedMode,\n  } = useModel('outline', courseId);\n\n  const {\n    marketingUrl,\n  } = useModel('coursewareMeta', courseId);\n\n  const [expandAll, setExpandAll] = useState(false);\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  // Below the course title alerts (appearing in the order listed here)\n  const courseStartAlert = useCourseStartAlert(courseId);\n  const courseEndAlert = useCourseEndAlert(courseId);\n  const certificateAvailableAlert = useCertificateAvailableAlert(courseId);\n  const privateCourseAlert = usePrivateCourseAlert(courseId);\n  const scheduledContentAlert = useScheduledContentAlert(courseId);\n\n  const rootCourseId = courses && Object.keys(courses)[0];\n\n  const hasDeadlines = courseDateBlocks && courseDateBlocks.some(x => x.dateType === 'assignment-due-date');\n\n  const logUpgradeToShiftDatesLinkClick = () => {\n    sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n      ...eventProperties,\n      linkCategory: 'personalized_learner_schedules',\n      linkName: 'course_home_upgrade_shift_dates',\n      linkType: 'button',\n      pageName: 'course_home',\n    });\n  };\n\n  const isEnterpriseUser = () => {\n    const authenticatedUser = getAuthenticatedUser();\n    const userRoleNames = authenticatedUser ? authenticatedUser.roles.map(role => role.split(':')[0]) : [];\n\n    return userRoleNames.includes('enterprise_learner');\n  };\n\n  /** [[MM-P2P] Experiment */\n  const MMP2P = initHomeMMP2P(courseId);\n\n  /** show post enrolment survey to only B2C learners */\n  const learnerType = isEnterpriseUser() ? 'enterprise_learner' : 'b2c_learner';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const currentParams = new URLSearchParams(location.search);\n    const startCourse = currentParams.get('start_course');\n    if (startCourse === '1') {\n      sendTrackEvent('welcome.email.clicked.startcourse', {});\n\n      // Deleting the course_start query param as it only needs to be set once\n      // whenever passed in query params.\n      currentParams.delete('start_course');\n      history.replace({\n        search: currentParams.toString(),\n      });\n    }\n  }, [location.search]);\n\n  return (\n    <>\n      <div data-learner-type={learnerType} className=\"row w-100 mx-0 my-3 justify-content-between\">\n        <div className=\"col-12 col-sm-auto p-0\">\n          <div role=\"heading\" aria-level=\"1\" className=\"h2\">{title}</div>\n        </div>\n      </div>\n      {/** [MM-P2P] Experiment (className for optimizely trigger) */}\n      <div className=\"row course-outline-tab\">\n        <AccountActivationAlert />\n        <div className=\"col-12\">\n          <AlertList\n            topic=\"outline-private-alerts\"\n            customAlerts={{\n              ...privateCourseAlert,\n            }}\n          />\n        </div>\n        <div className=\"col col-12 col-md-8\">\n          { /** [MM-P2P] Experiment (the conditional) */ }\n          { !MMP2P.state.isEnabled\n            && (\n            <AlertList\n              topic=\"outline-course-alerts\"\n              className=\"mb-3\"\n              customAlerts={{\n                ...certificateAvailableAlert,\n                ...courseEndAlert,\n                ...courseStartAlert,\n                ...scheduledContentAlert,\n              }}\n            />\n            )}\n          {isSelfPaced && hasDeadlines && !MMP2P.state.isEnabled && (\n            <>\n              <ShiftDatesAlert model=\"outline\" fetch={fetchOutlineTab} />\n              <UpgradeToShiftDatesAlert model=\"outline\" logUpgradeLinkClick={logUpgradeToShiftDatesLinkClick} />\n            </>\n          )}\n          <StartOrResumeCourseCard />\n          <WelcomeMessage courseId={courseId} />\n          {rootCourseId && (\n            <>\n              <div className=\"row w-100 m-0 mb-3 justify-content-end\">\n                <div className=\"col-12 col-md-auto p-0\">\n                  <Button variant=\"outline-primary\" block onClick={() => { setExpandAll(!expandAll); }}>\n                    {expandAll ? intl.formatMessage(messages.collapseAll) : intl.formatMessage(messages.expandAll)}\n                  </Button>\n                </div>\n              </div>\n              <ol id=\"courseHome-outline\" className=\"list-unstyled\">\n                {courses[rootCourseId].sectionIds.map((sectionId) => (\n                  <Section\n                    key={sectionId}\n                    courseId={courseId}\n                    defaultOpen={sections[sectionId].resumeBlock}\n                    expand={expandAll}\n                    section={sections[sectionId]}\n                  />\n                ))}\n              </ol>\n            </>\n          )}\n        </div>\n        {rootCourseId && (\n          <div className=\"col col-12 col-md-4\">\n            <ProctoringInfoPanel />\n            { /** Defer showing the goal widget until the ProctoringInfoPanel has resolved or has been determined as\n             disabled to avoid components bouncing around too much as screen is rendered */ }\n            {(!enableProctoredExams || proctoringPanelStatus === 'loaded') && weeklyLearningGoalEnabled && (\n              <WeeklyLearningGoalCard\n                daysPerWeek={selectedGoal && 'daysPerWeek' in selectedGoal ? selectedGoal.daysPerWeek : null}\n                subscribedToReminders={selectedGoal && 'subscribedToReminders' in selectedGoal ? selectedGoal.subscribedToReminders : false}\n              />\n            )}\n            <CourseTools />\n            { /** [MM-P2P] Experiment (conditional) */ }\n            { MMP2P.state.isEnabled\n              ? <MMP2PFlyover isStatic options={MMP2P} />\n              : (\n                <UpgradeNotification\n                  offer={offer}\n                  verifiedMode={verifiedMode}\n                  accessExpiration={accessExpiration}\n                  contentTypeGatingEnabled={datesBannerInfo.contentTypeGatingEnabled}\n                  marketingUrl={marketingUrl}\n                  upsellPageName=\"course_home\"\n                  userTimezone={userTimezone}\n                  shouldDisplayBorder\n                  timeOffsetMillis={timeOffsetMillis}\n                  courseId={courseId}\n                  org={org}\n                />\n              )}\n            <CourseDates\n              /** [MM-P2P] Experiment */\n              mmp2p={MMP2P}\n            />\n            <CourseHandouts />\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nOutlineTab.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(OutlineTab);\n"],"file":"OutlineTab.js"}