{"version":3,"sources":["../../../src/course-home/outline-tab/Section.jsx"],"names":["Section","courseId","defaultOpen","expand","intl","section","complete","sequenceIds","title","courseBlocks","sequences","open","setOpen","sectionTitle","fasCheckCircle","formatMessage","messages","completedSection","farCheckCircle","incompleteSection","openSection","faPlus","genericMessages","close","faMinus","map","sequenceId","index","propTypes","PropTypes","string","isRequired","bool","intlShape","shape"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Collapsible, IconButton } from '@edx/paragon';\nimport { faCheckCircle as fasCheckCircle, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { faCheckCircle as farCheckCircle } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport SequenceLink from './SequenceLink';\nimport { useModel } from '../../generic/model-store';\n\nimport genericMessages from '../../generic/messages';\nimport messages from './messages';\n\nfunction Section({\n  courseId,\n  defaultOpen,\n  expand,\n  intl,\n  section,\n}) {\n  const {\n    complete,\n    sequenceIds,\n    title,\n  } = section;\n  const {\n    courseBlocks: {\n      sequences,\n    },\n  } = useModel('outline', courseId);\n\n  const [open, setOpen] = useState(defaultOpen);\n\n  useEffect(() => {\n    setOpen(expand);\n  }, [expand]);\n\n  useEffect(() => {\n    setOpen(defaultOpen);\n  }, []);\n\n  const sectionTitle = (\n    <div className=\"row w-100 m-0\">\n      <div className=\"col-auto p-0\">\n        {complete ? (\n          <FontAwesomeIcon\n            icon={fasCheckCircle}\n            fixedWidth\n            className=\"float-left mt-1 text-success\"\n            aria-hidden=\"true\"\n            title={intl.formatMessage(messages.completedSection)}\n          />\n        ) : (\n          <FontAwesomeIcon\n            icon={farCheckCircle}\n            fixedWidth\n            className=\"float-left mt-1 text-gray-400\"\n            aria-hidden=\"true\"\n            title={intl.formatMessage(messages.incompleteSection)}\n          />\n        )}\n      </div>\n      <div className=\"col-10 ml-3 p-0 font-weight-bold text-dark-500\">\n        <span className=\"align-middle\">{title}</span>\n        <span className=\"sr-only\">\n          , {intl.formatMessage(complete ? messages.completedSection : messages.incompleteSection)}\n        </span>\n      </div>\n    </div>\n  );\n\n  return (\n    <li>\n      <Collapsible\n        className=\"mb-2\"\n        styling=\"card-lg\"\n        title={sectionTitle}\n        open={open}\n        onToggle={() => { setOpen(!open); }}\n        iconWhenClosed={(\n          <IconButton\n            alt={intl.formatMessage(messages.openSection)}\n            icon={faPlus}\n            onClick={() => { setOpen(true); }}\n            size=\"sm\"\n          />\n        )}\n        iconWhenOpen={(\n          <IconButton\n            alt={intl.formatMessage(genericMessages.close)}\n            icon={faMinus}\n            onClick={() => { setOpen(false); }}\n            size=\"sm\"\n          />\n        )}\n      >\n        <ol className=\"list-unstyled\">\n          {sequenceIds.map((sequenceId, index) => (\n            <SequenceLink\n              key={sequenceId}\n              id={sequenceId}\n              courseId={courseId}\n              sequence={sequences[sequenceId]}\n              first={index === 0}\n            />\n          ))}\n        </ol>\n      </Collapsible>\n    </li>\n  );\n}\n\nSection.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  defaultOpen: PropTypes.bool.isRequired,\n  expand: PropTypes.bool.isRequired,\n  intl: intlShape.isRequired,\n  section: PropTypes.shape().isRequired,\n};\n\nexport default injectIntl(Section);\n"],"file":"Section.js"}