{"version":3,"sources":["../../../../../src/course-home/outline-tab/alerts/course-end-alert/hooks.js"],"names":["CourseEndAlert","React","lazy","WARNING_PERIOD_MS","useCourseEndAlert","courseId","isEnrolled","datesWidget","courseDateBlocks","userTimezone","endBlock","find","b","dateType","endDate","Date","date","delta","isVisible","payload","description","code","Object","values","sort","topic","clientCourseEndAlert"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,cAAc,gBAAGC,eAAMC,IAAN,CAAW,mEAAa,kBAAb,GAAX,CAAvB,C,CAEA;;;AACA,MAAMC,iBAAiB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAA9C,C,CAAoD;;AAE7C,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AAC1C,QAAM;AACJC,IAAAA;AADI,MAEF,0BAAS,gBAAT,EAA2BD,QAA3B,CAFJ;AAGA,QAAM;AACJE,IAAAA,WAAW,EAAE;AACXC,MAAAA;AADW,KADT;AAIJC,IAAAA;AAJI,MAKF,0BAAS,SAAT,EAAoBJ,QAApB,CALJ;AAOA,QAAMK,QAAQ,GAAGF,gBAAgB,CAACG,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAe,iBAA1C,CAAjB;AACA,QAAMC,OAAO,GAAGJ,QAAQ,GAAG,IAAIK,IAAJ,CAASL,QAAQ,CAACM,IAAlB,CAAH,GAA6B,IAArD;AACA,QAAMC,KAAK,GAAGP,QAAQ,GAAGI,OAAO,GAAG,IAAIC,IAAJ,EAAb,GAA0B,CAAhD;AACA,QAAMG,SAAS,GAAGZ,UAAU,IAAII,QAAd,IAA0BO,KAAK,GAAG,CAAlC,IAAuCA,KAAK,GAAGd,iBAAjE;AACA,QAAMgB,OAAO,GAAG;AACdC,IAAAA,WAAW,EAAEV,QAAQ,IAAIA,QAAQ,CAACU,WADpB;AAEdN,IAAAA,OAAO,EAAEJ,QAAQ,IAAIA,QAAQ,CAACM,IAFhB;AAGdP,IAAAA;AAHc,GAAhB;AAMA,8BAASS,SAAT,EAAoB;AAClBG,IAAAA,IAAI,EAAE,sBADY;AAElBF,IAAAA,OAAO,EAAE,oBAAQ,MAAMA,OAAd,EAAuBG,MAAM,CAACC,MAAP,CAAcJ,OAAd,EAAuBK,IAAvB,EAAvB,CAFS;AAGlBC,IAAAA,KAAK,EAAE;AAHW,GAApB;AAMA,SAAO;AACLC,IAAAA,oBAAoB,EAAE1B;AADjB,GAAP;AAGD","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport React, { useMemo } from 'react';\nimport { useAlert } from '../../../../generic/user-messages';\nimport { useModel } from '../../../../generic/model-store';\n\nconst CourseEndAlert = React.lazy(() => import('./CourseEndAlert'));\n\n// period of time (in ms) before end of course during which we alert\nconst WARNING_PERIOD_MS = 14 * 24 * 60 * 60 * 1000; // 14 days\n\nexport function useCourseEndAlert(courseId) {\n  const {\n    isEnrolled,\n  } = useModel('courseHomeMeta', courseId);\n  const {\n    datesWidget: {\n      courseDateBlocks,\n    },\n    userTimezone,\n  } = useModel('outline', courseId);\n\n  const endBlock = courseDateBlocks.find(b => b.dateType === 'course-end-date');\n  const endDate = endBlock ? new Date(endBlock.date) : null;\n  const delta = endBlock ? endDate - new Date() : 0;\n  const isVisible = isEnrolled && endBlock && delta > 0 && delta < WARNING_PERIOD_MS;\n  const payload = {\n    description: endBlock && endBlock.description,\n    endDate: endBlock && endBlock.date,\n    userTimezone,\n  };\n\n  useAlert(isVisible, {\n    code: 'clientCourseEndAlert',\n    payload: useMemo(() => payload, Object.values(payload).sort()),\n    topic: 'outline-course-alerts',\n  });\n\n  return {\n    clientCourseEndAlert: CourseEndAlert,\n  };\n}\n"],"file":"hooks.js"}