{"version":3,"sources":["../../../../../src/course-home/outline-tab/alerts/course-end-alert/CourseEndAlert.jsx"],"names":["DAY_MS","CourseEndAlert","payload","description","endDate","userTimezone","timezoneFormatArgs","timeZone","timeRemaining","msg","delta","Date","courseEndTime","courseEndDate","Info","propTypes","PropTypes","shape","string","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAMA;;AACA;;;;;;;;;;;;AAEA,MAAMA,MAAM,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA9B,C,CAAoC;;AAEpC,SAASC,cAAT,OAAqC;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACnC,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA;AAHI,MAIFH,OAJJ;AAMA,QAAMI,kBAAkB,GAAGD,YAAY,GAAG;AAAEE,IAAAA,QAAQ,EAAEF;AAAZ,GAAH,GAAgC,EAAvE;AAEA,QAAMG,aAAa,gBACjB,qBAAC,2BAAD;AAEE,IAAA,KAAK,EAAEJ;AAFT,KAGME,kBAHN,GACM,eADN,CADF;AAQA,MAAIG,GAAJ;AACA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,CAASP,OAAT,IAAoB,IAAIO,IAAJ,EAAlC;;AACA,MAAID,KAAK,GAAGV,MAAZ,EAAoB;AAClB,UAAMY,aAAa,gBACjB,qBAAC,mBAAD;AAEE,MAAA,GAAG,EAAC,SAFN;AAGE,MAAA,KAAK,EAAC,OAHR;AAIE,MAAA,IAAI,EAAC,SAJP;AAKE,MAAA,YAAY,EAAC,OALf;AAME,MAAA,KAAK,EAAER;AANT,OAOME,kBAPN,GACM,eADN,CADF;AAWAG,IAAAA,GAAG,gBACD,qBAAC,sBAAD;AACE,MAAA,EAAE,EAAC,kCADL;AAEE,MAAA,cAAc,EAAC,2DAFjB;AAGE,MAAA,WAAW,EAAC,uDAHd;AAIE,MAAA,MAAM,EAAE;AACNG,QAAAA,aADM;AAENJ,QAAAA;AAFM;AAJV,MADF;AAWD,GAvBD,MAuBO;AACL,UAAMK,aAAa,gBACjB,qBAAC,mBAAD;AAEE,MAAA,GAAG,EAAC,SAFN;AAGE,MAAA,KAAK,EAAC,OAHR;AAIE,MAAA,IAAI,EAAC,SAJP;AAKE,MAAA,KAAK,EAAET;AALT,OAMME,kBANN,GACM,eADN,CADF;AAUAG,IAAAA,GAAG,gBACD,qBAAC,sBAAD;AACE,MAAA,EAAE,EAAC,iCADL;AAEE,MAAA,cAAc,EAAC,2DAFjB;AAGE,MAAA,WAAW,EAAC,uDAHd;AAIE,MAAA,MAAM,EAAE;AACNI,QAAAA,aADM;AAENL,QAAAA;AAFM;AAJV,MADF;AAWD;;AAED,sBACE,sBAAC,cAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAsB,IAAA,IAAI,EAAEM,WAA5B;AAAA,4BACE;AAAA,gBAASL;AAAT,MADF,eACwB,8BADxB,EAEGN,WAFH;AAAA,IADF;AAMD;;AAEDF,cAAc,CAACc,SAAf,GAA2B;AACzBb,EAAAA,OAAO,EAAEc,mBAAUC,KAAV,CAAgB;AACvBd,IAAAA,WAAW,EAAEa,mBAAUE,MADA;AAEvBd,IAAAA,OAAO,EAAEY,mBAAUE,MAFI;AAGvBb,IAAAA,YAAY,EAAEW,mBAAUE;AAHD,GAAhB,EAINC;AALsB,CAA3B;eAQelB,c","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FormattedDate,\n  FormattedMessage,\n  FormattedRelativeTime,\n  FormattedTime,\n} from '@edx/frontend-platform/i18n';\nimport { Alert } from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\n\nconst DAY_MS = 24 * 60 * 60 * 1000; // in ms\n\nfunction CourseEndAlert({ payload }) {\n  const {\n    description,\n    endDate,\n    userTimezone,\n  } = payload;\n\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  const timeRemaining = (\n    <FormattedRelativeTime\n      key=\"timeRemaining\"\n      value={endDate}\n      {...timezoneFormatArgs}\n    />\n  );\n\n  let msg;\n  const delta = new Date(endDate) - new Date();\n  if (delta < DAY_MS) {\n    const courseEndTime = (\n      <FormattedTime\n        key=\"courseEndTime\"\n        day=\"numeric\"\n        month=\"short\"\n        year=\"numeric\"\n        timeZoneName=\"short\"\n        value={endDate}\n        {...timezoneFormatArgs}\n      />\n    );\n    msg = (\n      <FormattedMessage\n        id=\"learning.outline.alert.end.short\"\n        defaultMessage=\"This course is ending {timeRemaining} at {courseEndTime}.\"\n        description=\"Used when the time remaining is less than a day away.\"\n        values={{\n          courseEndTime,\n          timeRemaining,\n        }}\n      />\n    );\n  } else {\n    const courseEndDate = (\n      <FormattedDate\n        key=\"courseEndDate\"\n        day=\"numeric\"\n        month=\"short\"\n        year=\"numeric\"\n        value={endDate}\n        {...timezoneFormatArgs}\n      />\n    );\n    msg = (\n      <FormattedMessage\n        id=\"learning.outline.alert.end.long\"\n        defaultMessage=\"This course is ending {timeRemaining} on {courseEndDate}.\"\n        description=\"Used when the time remaining is more than a day away.\"\n        values={{\n          courseEndDate,\n          timeRemaining,\n        }}\n      />\n    );\n  }\n\n  return (\n    <Alert variant=\"info\" icon={Info}>\n      <strong>{msg}</strong><br />\n      {description}\n    </Alert>\n  );\n}\n\nCourseEndAlert.propTypes = {\n  payload: PropTypes.shape({\n    description: PropTypes.string,\n    endDate: PropTypes.string,\n    userTimezone: PropTypes.string,\n  }).isRequired,\n};\n\nexport default CourseEndAlert;\n"],"file":"CourseEndAlert.js"}