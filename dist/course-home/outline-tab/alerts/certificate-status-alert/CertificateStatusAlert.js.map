{"version":3,"sources":["../../../../../src/course-home/outline-tab/alerts/certificate-status-alert/CertificateStatusAlert.jsx"],"names":["CERT_STATUS_TYPE","EARNED_NOT_AVAILABLE","DOWNLOADABLE","REQUESTING","UNVERIFIED","CertificateStatusAlert","intl","payload","dispatch","certificateAvailableDate","certStatus","courseEndDate","courseId","certURL","userTimezone","org","notPassingCourseEnded","tabs","AlertWrapper","props","children","sendAlertClickTracking","id","administrator","org_key","courserun_key","is_staff","renderCertAwardedStatus","alertProps","variant","icon","faCheckCircle","iconClassName","timezoneFormatArgs","timeZone","certificateAvailableDateFormatted","courseEndDateFormatted","header","formatMessage","certMessages","certStatusEarnedNotAvailableHeader","body","certStatusDownloadableHeader","buttonMessage","certStatusMessages","viewableButton","buttonVisible","buttonLink","buttonAction","requestableButton","renderNotIDVerifiedStatus","faExclamationTriangle","unverifiedHomeHeader","unverifiedHomeButton","unverifiedHomeBody","SUPPORT_URL_ID_VERIFICATION","renderNotPassingCourseEnded","progressTab","find","tab","slug","progressLink","url","certStatusNotPassingHeader","certStatusNotPassingButton","notPassingBody","propTypes","intlShape","isRequired","PropTypes","shape","string","bool","arrayOf","tab_id","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FormattedDate,\n  FormattedMessage,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Alert, Button } from '@edx/paragon';\nimport { useDispatch } from 'react-redux';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport certMessages from './messages';\nimport certStatusMessages from '../../../progress-tab/certificate-status/messages';\nimport { requestCert } from '../../../data/thunks';\n\nexport const CERT_STATUS_TYPE = {\n  EARNED_NOT_AVAILABLE: 'earned_but_not_available',\n  DOWNLOADABLE: 'downloadable',\n  REQUESTING: 'requesting',\n  UNVERIFIED: 'unverified',\n};\n\nfunction CertificateStatusAlert({ intl, payload }) {\n  const dispatch = useDispatch();\n  const {\n    certificateAvailableDate,\n    certStatus,\n    courseEndDate,\n    courseId,\n    certURL,\n    userTimezone,\n    org,\n    notPassingCourseEnded,\n    tabs,\n  } = payload;\n\n  // eslint-disable-next-line react/prop-types\n  const AlertWrapper = (props) => props.children(props);\n\n  const sendAlertClickTracking = (id) => {\n    const { administrator } = getAuthenticatedUser();\n    sendTrackEvent(id, {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n    });\n  };\n\n  const renderCertAwardedStatus = () => {\n    const alertProps = {\n      variant: 'success',\n      icon: faCheckCircle,\n      iconClassName: 'alert-icon text-success-500',\n    };\n    if (certStatus === CERT_STATUS_TYPE.EARNED_NOT_AVAILABLE) {\n      const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n      const certificateAvailableDateFormatted = <FormattedDate value={certificateAvailableDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      const courseEndDateFormatted = <FormattedDate value={courseEndDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n      alertProps.header = intl.formatMessage(certMessages.certStatusEarnedNotAvailableHeader);\n      alertProps.body = (\n        <p>\n          <FormattedMessage\n            id=\"learning.outline.alert.cert.earnedNotAvailable\"\n            defaultMessage=\"This course ends on {courseEndDateFormatted}. Final grades and any earned certificates are\n            scheduled to be available after {certificateAvailableDate}.\"\n            values={{\n              courseEndDateFormatted,\n              certificateAvailableDate: certificateAvailableDateFormatted,\n            }}\n            {...timezoneFormatArgs}\n          />\n        </p>\n      );\n    } else if (certStatus === CERT_STATUS_TYPE.DOWNLOADABLE) {\n      alertProps.header = intl.formatMessage(certMessages.certStatusDownloadableHeader);\n      alertProps.buttonMessage = intl.formatMessage(certStatusMessages.viewableButton);\n      alertProps.buttonVisible = true;\n      alertProps.buttonLink = certURL;\n      alertProps.buttonAction = () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_downloadable_button.clicked');\n      };\n    } else if (certStatus === CERT_STATUS_TYPE.REQUESTING) {\n      alertProps.header = intl.formatMessage(certMessages.certStatusDownloadableHeader);\n      alertProps.buttonMessage = intl.formatMessage(certStatusMessages.requestableButton);\n      alertProps.buttonVisible = true;\n      alertProps.buttonLink = '';\n      alertProps.buttonAction = () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_request_cert_button.clicked');\n        dispatch(requestCert(courseId));\n      };\n    }\n    return alertProps;\n  };\n\n  const renderNotIDVerifiedStatus = () => {\n    const alertProps = {\n      variant: 'warning',\n      icon: faExclamationTriangle,\n      iconClassName: 'alert-icon text-warning-500',\n      header: intl.formatMessage(certStatusMessages.unverifiedHomeHeader),\n      buttonMessage: intl.formatMessage(certStatusMessages.unverifiedHomeButton),\n      body: intl.formatMessage(certStatusMessages.unverifiedHomeBody),\n      buttonVisible: true,\n      buttonLink: getConfig().SUPPORT_URL_ID_VERIFICATION,\n      buttonAction: () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_unverified_button.clicked');\n      },\n    };\n\n    return alertProps;\n  };\n\n  const renderNotPassingCourseEnded = () => {\n    const progressTab = tabs.find(tab => tab.slug === 'progress');\n    const progressLink = progressTab && progressTab.url;\n\n    const alertProps = {\n      header: intl.formatMessage(certMessages.certStatusNotPassingHeader),\n      buttonMessage: intl.formatMessage(certMessages.certStatusNotPassingButton),\n      body: intl.formatMessage(certStatusMessages.notPassingBody),\n      buttonVisible: true,\n      buttonLink: progressLink,\n      buttonAction: () => {\n        sendAlertClickTracking('edx.ui.lms.course_outline.certificate_alert_view_grades_button.clicked');\n      },\n    };\n\n    return alertProps;\n  };\n\n  let alertProps = {};\n  switch (certStatus) {\n    case CERT_STATUS_TYPE.EARNED_NOT_AVAILABLE:\n    case CERT_STATUS_TYPE.DOWNLOADABLE:\n    case CERT_STATUS_TYPE.REQUESTING:\n      alertProps = renderCertAwardedStatus();\n      break;\n    case CERT_STATUS_TYPE.UNVERIFIED:\n      alertProps = renderNotIDVerifiedStatus();\n      break;\n    default:\n      if (notPassingCourseEnded) {\n        alertProps = renderNotPassingCourseEnded();\n      }\n      break;\n  }\n\n  return (\n    <AlertWrapper {...alertProps}>\n      {({\n        variant,\n        buttonVisible,\n        iconClassName,\n        icon,\n        header,\n        body,\n        buttonAction,\n        buttonLink,\n        buttonMessage,\n      }) => (\n        <Alert variant={variant}>\n          <div className=\"d-flex flex-column flex-lg-row justify-content-between align-items-center\">\n            <div className={buttonVisible ? 'col-lg-8' : 'col-auto'}>\n              <FontAwesomeIcon icon={icon} className={iconClassName} />\n              <Alert.Heading>{header}</Alert.Heading>\n              {body}\n            </div>\n            {buttonVisible && (\n              <div className=\"flex-grow-0 pt-3 pt-lg-0\">\n                <Button\n                  variant=\"primary\"\n                  href={buttonLink}\n                  onClick={() => {\n                    if (buttonAction) { buttonAction(); }\n                  }}\n                >\n                  {buttonMessage}\n                </Button>\n              </div>\n            )}\n          </div>\n        </Alert>\n\n      )}\n    </AlertWrapper>\n  );\n}\n\nCertificateStatusAlert.propTypes = {\n  intl: intlShape.isRequired,\n  payload: PropTypes.shape({\n    certificateAvailableDate: PropTypes.string,\n    certStatus: PropTypes.string,\n    courseEndDate: PropTypes.string,\n    courseId: PropTypes.string,\n    certURL: PropTypes.string,\n    userTimezone: PropTypes.string,\n    org: PropTypes.string,\n    notPassingCourseEnded: PropTypes.bool,\n    tabs: PropTypes.arrayOf(PropTypes.shape({\n      tab_id: PropTypes.string,\n      title: PropTypes.string,\n      url: PropTypes.string,\n    })),\n  }).isRequired,\n};\n\nexport default injectIntl(CertificateStatusAlert);\n"],"file":"CertificateStatusAlert.js"}