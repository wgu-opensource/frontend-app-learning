{"version":3,"sources":["../../../../../src/course-home/outline-tab/alerts/certificate-status-alert/hooks.js"],"names":["CertificateStatusAlert","React","lazy","verifyCertStatusType","status","CERT_STATUS_TYPE","DOWNLOADABLE","EARNED_NOT_AVAILABLE","REQUESTING","UNVERIFIED","useCertificateStatusAlert","courseId","VERIFIED_MODES","PROFESSIONAL","VERIFIED","NO_ID_PROFESSIONAL_MODE","CREDIT_MODE","MASTERS","EXECUTIVE_EDUCATION","isEnrolled","org","tabs","datesWidget","courseDateBlocks","certData","hasEnded","userHasPassingGrade","userTimezone","enrollmentMode","certStatus","certWebViewUrl","certificateAvailableDate","endBlock","find","b","dateType","isVerifiedEnrollmentMode","undefined","Object","values","mode","certURL","LMS_BASE_URL","hasAlertingCertStatus","isVisible","notPassingCourseEnded","payload","courseEndDate","date","code","sort","topic","clientCertificateStatusAlert"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,sBAAsB,gBAAGC,eAAMC,IAAN,CAAW,mEAAa,0BAAb,GAAX,CAA/B;;AAEA,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AACpC,UAAQA,MAAR;AACE,SAAKC,yCAAiBC,YAAtB;AACA,SAAKD,yCAAiBE,oBAAtB;AACA,SAAKF,yCAAiBG,UAAtB;AACA,SAAKH,yCAAiBI,UAAtB;AACE,aAAO,IAAP;;AACF;AACE,aAAO,KAAP;AAPJ;AASD;;AAED,SAASC,yBAAT,CAAmCC,QAAnC,EAA6C;AAC3C,QAAMC,cAAc,GAAG;AACrBC,IAAAA,YAAY,EAAE,cADO;AAErBC,IAAAA,QAAQ,EAAE,UAFW;AAGrBC,IAAAA,uBAAuB,EAAE,oBAHJ;AAIrBC,IAAAA,WAAW,EAAE,QAJQ;AAKrBC,IAAAA,OAAO,EAAE,SALY;AAMrBC,IAAAA,mBAAmB,EAAE;AANA,GAAvB;AASA,QAAM;AACJC,IAAAA,UADI;AAEJC,IAAAA,GAFI;AAGJC,IAAAA;AAHI,MAIF,0BAAS,gBAAT,EAA2BV,QAA3B,CAJJ;AAMA,QAAM;AACJW,IAAAA,WAAW,EAAE;AACXC,MAAAA;AADW,KADT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,mBANI;AAOJC,IAAAA,YAPI;AAQJC,IAAAA;AARI,MASF,0BAAS,SAAT,EAAoBjB,QAApB,CATJ;AAWA,QAAM;AACJkB,IAAAA,UADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA;AAHI,MAIFP,QAAQ,IAAI,EAJhB;AAKA,QAAMQ,QAAQ,GAAGT,gBAAgB,CAACU,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAe,iBAA1C,CAAjB;AACA,QAAMC,wBAAwB,GAC5BR,cAAc,KAAK,IAAnB,IACGA,cAAc,KAAKS,SADtB,IAEG,CAAC,CAACC,MAAM,CAACC,MAAP,CAAc3B,cAAd,EAA8BqB,IAA9B,CAAmCO,IAAI,IAAIA,IAAI,KAAKZ,cAApD,CAHP;AAKA,MAAIa,OAAO,GAAG,EAAd;;AACA,MAAIX,cAAJ,EAAoB;AAClBW,IAAAA,OAAO,GAAI,GAAE,mCAAYC,YAAa,GAAEZ,cAAe,EAAvD;AACD;;AACD,QAAMa,qBAAqB,GAAGxC,oBAAoB,CAAC0B,UAAD,CAAlD,CA1C2C,CA4C3C;AACA;AACA;;AACA,QAAMe,SAAS,GAAGzB,UAAU,IAAIwB,qBAAhC;AACA,QAAME,qBAAqB,GACzB1B,UAAU,IACPiB,wBADH,IAEG,CAACO,qBAFJ,IAGGlB,QAHH,IAIG,CAACC,mBALN;AAOA,QAAMoB,OAAO,GAAG;AACdf,IAAAA,wBADc;AAEdU,IAAAA,OAFc;AAGdZ,IAAAA,UAHc;AAIdlB,IAAAA,QAJc;AAKdoC,IAAAA,aAAa,EAAEf,QAAQ,IAAIA,QAAQ,CAACgB,IALtB;AAMdrB,IAAAA,YANc;AAOdP,IAAAA,GAPc;AAQdyB,IAAAA,qBARc;AASdxB,IAAAA;AATc,GAAhB;AAYA,8BAASuB,SAAS,IAAIC,qBAAtB,EAA6C;AAC3CI,IAAAA,IAAI,EAAE,8BADqC;AAE3CH,IAAAA,OAAO,EAAE,oBAAQ,MAAMA,OAAd,EAAuBR,MAAM,CAACC,MAAP,CAAcO,OAAd,EAAuBI,IAAvB,EAAvB,CAFkC;AAG3CC,IAAAA,KAAK,EAAE;AAHoC,GAA7C;AAMA,SAAO;AACLC,IAAAA,4BAA4B,EAAEpD;AADzB,GAAP;AAGD;;eAEcU,yB","sourcesContent":["import React, { useMemo } from 'react';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { useAlert } from '../../../../generic/user-messages';\nimport { useModel } from '../../../../generic/model-store';\n\nimport { CERT_STATUS_TYPE } from './CertificateStatusAlert';\n\nconst CertificateStatusAlert = React.lazy(() => import('./CertificateStatusAlert'));\n\nfunction verifyCertStatusType(status) {\n  switch (status) {\n    case CERT_STATUS_TYPE.DOWNLOADABLE:\n    case CERT_STATUS_TYPE.EARNED_NOT_AVAILABLE:\n    case CERT_STATUS_TYPE.REQUESTING:\n    case CERT_STATUS_TYPE.UNVERIFIED:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction useCertificateStatusAlert(courseId) {\n  const VERIFIED_MODES = {\n    PROFESSIONAL: 'professional',\n    VERIFIED: 'verified',\n    NO_ID_PROFESSIONAL_MODE: 'no-id-professional',\n    CREDIT_MODE: 'credit',\n    MASTERS: 'masters',\n    EXECUTIVE_EDUCATION: 'executive-education',\n  };\n\n  const {\n    isEnrolled,\n    org,\n    tabs,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    datesWidget: {\n      courseDateBlocks,\n    },\n    certData,\n    hasEnded,\n    userHasPassingGrade,\n    userTimezone,\n    enrollmentMode,\n  } = useModel('outline', courseId);\n\n  const {\n    certStatus,\n    certWebViewUrl,\n    certificateAvailableDate,\n  } = certData || {};\n  const endBlock = courseDateBlocks.find(b => b.dateType === 'course-end-date');\n  const isVerifiedEnrollmentMode = (\n    enrollmentMode !== null\n    && enrollmentMode !== undefined\n    && !!Object.values(VERIFIED_MODES).find(mode => mode === enrollmentMode)\n  );\n  let certURL = '';\n  if (certWebViewUrl) {\n    certURL = `${getConfig().LMS_BASE_URL}${certWebViewUrl}`;\n  }\n  const hasAlertingCertStatus = verifyCertStatusType(certStatus);\n\n  // Only show if:\n  // - there is a known cert status that we want provide status on.\n  // - Or the course has ended and the learner does not have a passing grade.\n  const isVisible = isEnrolled && hasAlertingCertStatus;\n  const notPassingCourseEnded = (\n    isEnrolled\n    && isVerifiedEnrollmentMode\n    && !hasAlertingCertStatus\n    && hasEnded\n    && !userHasPassingGrade\n  );\n  const payload = {\n    certificateAvailableDate,\n    certURL,\n    certStatus,\n    courseId,\n    courseEndDate: endBlock && endBlock.date,\n    userTimezone,\n    org,\n    notPassingCourseEnded,\n    tabs,\n  };\n\n  useAlert(isVisible || notPassingCourseEnded, {\n    code: 'clientCertificateStatusAlert',\n    payload: useMemo(() => payload, Object.values(payload).sort()),\n    topic: 'outline-course-alerts',\n  });\n\n  return {\n    clientCertificateStatusAlert: CertificateStatusAlert,\n  };\n}\n\nexport default useCertificateStatusAlert;\n"],"file":"hooks.js"}