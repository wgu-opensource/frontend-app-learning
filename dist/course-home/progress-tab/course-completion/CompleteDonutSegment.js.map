{"version":3,"sources":["../../../../src/course-home/progress-tab/course-completion/CompleteDonutSegment.jsx"],"names":["CompleteDonutSegment","completePercentage","intl","lockedPercentage","showCompletePopover","setShowCompletePopover","completeSegmentOffset","completeTooltipDegree","lockedSegmentOffset","formatMessage","messages","completeContentTooltip","transform","propTypes","PropTypes","number","isRequired","intlShape"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;;;AAEA,SAASA,oBAAT,OAA8E;AAAA,MAAhD;AAAEC,IAAAA,kBAAF;AAAsBC,IAAAA,IAAtB;AAA4BC,IAAAA;AAA5B,GAAgD;;AAC5E,MAAI,CAACF,kBAAL,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,QAAM,CAACG,mBAAD,EAAsBC,sBAAtB,IAAgD,qBAAS,KAAT,CAAtD;AAEA,QAAMC,qBAAqB,GAAI,MAAML,kBAAP,GAA6B,CAA3D;AACA,MAAIM,qBAAqB,GAAGN,kBAAkB,GAAG,GAArB,GAA2B,CAACK,qBAA5B,GAAoD,CAAhF;AAEA,QAAME,mBAAmB,GAAGL,gBAAgB,GAAG,EAA/C;;AACA,MAAIA,gBAAgB,GAAG,CAAvB,EAA0B;AACxBI,IAAAA,qBAAqB,GAAG,CAACC,mBAAmB,GAAGP,kBAAvB,IAA6C,CAAC,GAA9C,GAAoD,EAApD,GAAyDK,qBAAjF;AACD;;AAED,sBACE;AACE,IAAA,SAAS,EAAC,qBADZ;AAEE,IAAA,MAAM,EAAE,MAAMD,sBAAsB,CAAC,KAAD,CAFtC;AAGE,IAAA,OAAO,EAAE,MAAMA,sBAAsB,CAAC,IAAD,CAHvC;AAIE,IAAA,QAAQ,EAAC,IAJX;AAAA,4BAOE,qBAAC,uBAAD;AACE,MAAA,IAAI,EAAED,mBADR;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,OAAO,eACL,qBAAC,gBAAD;AAAS,uBAAY,MAArB;AAAA,+BACE,qBAAC,gBAAD,CAAS,OAAT;AAAA,oBACGF,IAAI,CAACO,aAAL,CAAmBC,kBAASC,sBAA5B;AADH;AADF,QAJJ;AAAA,6BAYE;AAAM,QAAA,CAAC,EAAC,IAAR;AAAa,QAAA,CAAC,EAAC,GAAf;AAAmB,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAG,UAASL,qBAAsB;AAA7C;AAA1B;AAZF,MAPF,eAuBE;AACE,MAAA,SAAS,EAAC,+BADZ;AAEE,MAAA,EAAE,EAAC,IAFL;AAGE,MAAA,EAAE,EAAC,IAHL;AAIE,MAAA,CAAC,EAAC,mBAJJ;AAKE,MAAA,eAAe,EAAG,GAAEN,kBAAmB,IAAG,MAAMA,kBAAmB,EALrE;AAME,MAAA,gBAAgB,EAAEO,mBAAmB,GAAGP;AAN1C,MAvBF,EAiCGE,gBAAgB,GAAG,CAAnB,IAAwBA,gBAAgB,GAAG,GAA3C,iBACC;AACE,MAAA,EAAE,EAAC,IADL;AAEE,MAAA,EAAE,EAAC,IAFL;AAGE,MAAA,CAAC,EAAC,mBAHJ;AAIE,MAAA,SAAS,EAAC,8BAJZ;AAKE,MAAA,eAAe,EAAC,UALlB;AAME,MAAA,gBAAgB,EAAE,OAAOK;AAN3B,MAlCJ,EA2CGP,kBAAkB,GAAG,GAArB,IAA4BE,gBAAgB,GAAG,CAA/C,IAAoDA,gBAAgB,GAAG,GAAvE,IACEA,gBAAgB,GAAGF,kBAAnB,KAA0C,GAD5C,iBAEC;AACE,MAAA,EAAE,EAAC,IADL;AAEE,MAAA,EAAE,EAAC,IAFL;AAGE,MAAA,CAAC,EAAC,mBAHJ;AAIE,MAAA,SAAS,EAAC,8BAJZ;AAKE,MAAA,eAAe,EAAC,UALlB;AAME,MAAA,gBAAgB,EAAC;AANnB,MA7CJ;AAAA,IADF;AAyDD;;AAEDD,oBAAoB,CAACa,SAArB,GAAiC;AAC/BZ,EAAAA,kBAAkB,EAAEa,mBAAUC,MAAV,CAAiBC,UADN;AAE/Bd,EAAAA,IAAI,EAAEe,gBAAUD,UAFe;AAG/Bb,EAAAA,gBAAgB,EAAEW,mBAAUC,MAAV,CAAiBC;AAHJ,CAAjC;;eAMe,sBAAWhB,oBAAX,C","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { OverlayTrigger, Popover } from '@edx/paragon';\n\nimport messages from './messages';\n\nfunction CompleteDonutSegment({ completePercentage, intl, lockedPercentage }) {\n  if (!completePercentage) {\n    return null;\n  }\n\n  const [showCompletePopover, setShowCompletePopover] = useState(false);\n\n  const completeSegmentOffset = (3.6 * completePercentage) / 8;\n  let completeTooltipDegree = completePercentage < 100 ? -completeSegmentOffset : 0;\n\n  const lockedSegmentOffset = lockedPercentage - 75;\n  if (lockedPercentage > 0) {\n    completeTooltipDegree = (lockedSegmentOffset + completePercentage) * -3.6 + 90 + completeSegmentOffset;\n  }\n\n  return (\n    <g\n      className=\"donut-segment-group\"\n      onBlur={() => setShowCompletePopover(false)}\n      onFocus={() => setShowCompletePopover(true)}\n      tabIndex=\"-1\"\n    >\n      {/* Tooltip */}\n      <OverlayTrigger\n        show={showCompletePopover}\n        placement=\"top\"\n        overlay={(\n          <Popover aria-hidden=\"true\">\n            <Popover.Content>\n              {intl.formatMessage(messages.completeContentTooltip)}\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        {/* Used to anchor the tooltip within the complete segment's stroke */}\n        <rect x=\"19\" y=\"3\" style={{ transform: `rotate(${completeTooltipDegree}deg)` }} />\n      </OverlayTrigger>\n\n      {/* Complete segment */}\n      <circle\n        className=\"donut-segment complete-stroke\"\n        cx=\"21\"\n        cy=\"21\"\n        r=\"15.91549430918954\"\n        strokeDasharray={`${completePercentage} ${100 - completePercentage}`}\n        strokeDashoffset={lockedSegmentOffset + completePercentage}\n      />\n\n      {/* Segment dividers */}\n      {lockedPercentage > 0 && lockedPercentage < 100 && (\n        <circle\n          cx=\"21\"\n          cy=\"21\"\n          r=\"15.91549430918954\"\n          className=\"donut-segment divider-stroke\"\n          strokeDasharray=\"0.3 99.7\"\n          strokeDashoffset={0.15 + lockedSegmentOffset}\n        />\n      )}\n      {completePercentage < 100 && lockedPercentage > 0 && lockedPercentage < 100\n      && lockedPercentage + completePercentage === 100 && (\n        <circle\n          cx=\"21\"\n          cy=\"21\"\n          r=\"15.91549430918954\"\n          className=\"donut-segment divider-stroke\"\n          strokeDasharray=\"0.3 99.7\"\n          strokeDashoffset=\"25.15\"\n        />\n      )}\n    </g>\n  );\n}\n\nCompleteDonutSegment.propTypes = {\n  completePercentage: PropTypes.number.isRequired,\n  intl: intlShape.isRequired,\n  lockedPercentage: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(CompleteDonutSegment);\n"],"file":"CompleteDonutSegment.js"}