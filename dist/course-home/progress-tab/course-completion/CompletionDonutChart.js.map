{"version":3,"sources":["../../../../src/course-home/progress-tab/course-completion/CompletionDonutChart.jsx"],"names":["CompletionDonutChart","intl","courseId","state","courseHome","completionSummary","completeCount","incompleteCount","lockedCount","numTotalUnits","completePercentage","Number","toFixed","lockedPercentage","incompletePercentage","isLocaleRtl","maxWidth","formatMessage","messages","donutLabel","percentComplete","percent","percentIncomplete","percentLocked","propTypes","intlShape","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGA;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEA,SAASA,oBAAT,OAAwC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AACtC,QAAM;AACJC,IAAAA;AADI,MAEF,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAA3B,CAFJ;AAIA,QAAM;AACJC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,aADiB;AAEjBC,MAAAA,eAFiB;AAGjBC,MAAAA;AAHiB;AADf,MAMF,0BAAS,UAAT,EAAqBN,QAArB,CANJ;AAQA,QAAMO,aAAa,GAAGH,aAAa,GAAGC,eAAhB,GAAkCC,WAAxD;AACA,QAAME,kBAAkB,GAAGJ,aAAa,GAAGK,MAAM,CAAC,CAAEL,aAAa,GAAGG,aAAjB,GAAkC,GAAnC,EAAwCG,OAAxC,CAAgD,CAAhD,CAAD,CAAT,GAAgE,CAAxG;AACA,QAAMC,gBAAgB,GAAGL,WAAW,GAAGG,MAAM,CAAC,CAAEH,WAAW,GAAGC,aAAf,GAAgC,GAAjC,EAAsCG,OAAtC,CAA8C,CAA9C,CAAD,CAAT,GAA8D,CAAlG;AACA,QAAME,oBAAoB,GAAG,MAAMJ,kBAAN,GAA2BG,gBAAxD;AAEA,QAAME,WAAW,GAAG,iBAAM,sBAAN,CAApB;AAEA,sBACE;AAAA,4BACE;AAAK,MAAA,IAAI,EAAC,KAAV;AAAgB,MAAA,KAAK,EAAC,KAAtB;AAA4B,MAAA,MAAM,EAAC,MAAnC;AAA0C,MAAA,OAAO,EAAC,WAAlD;AAA8D,MAAA,SAAS,EAAC,OAAxE;AAAgF,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAvF;AAA8G,qBAAY,MAA1H;AAAA,8BAIE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,IAAI,EAAC,MAApC;AAA2C,QAAA,EAAE,EAAC,IAA9C;AAAmD,QAAA,EAAE,EAAC,IAAtD;AAA2D,QAAA,CAAC,EAAC;AAA7D,QAJF,eAKE;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA,gCACE;AAAM,UAAA,CAAC,EAAC,KAAR;AAAc,UAAA,CAAC,EAAC,KAAhB;AAAsB,UAAA,SAAS,EAAC,oBAAhC;AAAA,qBACGN,kBADH,EACuBK,WAAW,IAAI,QADtC;AAAA,UADF,eAIE;AAAM,UAAA,CAAC,EAAC,KAAR;AAAc,UAAA,CAAC,EAAC,KAAhB;AAAsB,UAAA,SAAS,EAAC,mBAAhC;AAAA,oBACGd,IAAI,CAACgB,aAAL,CAAmBC,kBAASC,UAA5B;AADH,UAJF;AAAA,QALF,eAaE,qBAAC,+BAAD;AAAwB,QAAA,oBAAoB,EAAEL;AAA9C,QAbF,eAcE,qBAAC,2BAAD;AAAoB,QAAA,gBAAgB,EAAED;AAAtC,QAdF,eAeE,qBAAC,6BAAD;AAAsB,QAAA,kBAAkB,EAAEH,kBAA1C;AAA8D,QAAA,gBAAgB,EAAEG;AAAhF,QAfF;AAAA,MADF,eAkBE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,iBACGZ,IAAI,CAACgB,aAAL,CAAmBC,kBAASE,eAA5B,EAA6C;AAAEC,QAAAA,OAAO,EAAEX;AAAX,OAA7C,CADH,EAEGT,IAAI,CAACgB,aAAL,CAAmBC,kBAASI,iBAA5B,EAA+C;AAAED,QAAAA,OAAO,EAAEP;AAAX,OAA/C,CAFH,EAGGD,gBAAgB,GAAG,CAAnB,iBACC;AAAA,kBACGZ,IAAI,CAACgB,aAAL,CAAmBC,kBAASK,aAA5B,EAA2C;AAAEF,UAAAA,OAAO,EAAER;AAAX,SAA3C;AADH,QAJJ;AAAA,MAlBF;AAAA,IADF;AA8BD;;AAEDb,oBAAoB,CAACwB,SAArB,GAAiC;AAC/BvB,EAAAA,IAAI,EAAEwB,gBAAUC;AADe,CAAjC;;eAIe,sBAAW1B,oBAAX,C","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { useModel } from '../../../generic/model-store';\n\nimport CompleteDonutSegment from './CompleteDonutSegment';\nimport IncompleteDonutSegment from './IncompleteDonutSegment';\nimport LockedDonutSegment from './LockedDonutSegment';\nimport messages from './messages';\n\nfunction CompletionDonutChart({ intl }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    completionSummary: {\n      completeCount,\n      incompleteCount,\n      lockedCount,\n    },\n  } = useModel('progress', courseId);\n\n  const numTotalUnits = completeCount + incompleteCount + lockedCount;\n  const completePercentage = completeCount ? Number(((completeCount / numTotalUnits) * 100).toFixed(0)) : 0;\n  const lockedPercentage = lockedCount ? Number(((lockedCount / numTotalUnits) * 100).toFixed(0)) : 0;\n  const incompletePercentage = 100 - completePercentage - lockedPercentage;\n\n  const isLocaleRtl = isRtl(getLocale());\n\n  return (\n    <>\n      <svg role=\"img\" width=\"50%\" height=\"100%\" viewBox=\"0 0 42 42\" className=\"donut\" style={{ maxWidth: '178px' }} aria-hidden=\"true\">\n        {/* The radius (or \"r\" attribute) is based off of a circumference of 100 in order to simplify percentage\n            calculations. The subsequent stroke-dasharray values found in each segment should add up to equal 100\n            in order to wrap around the circle once. */}\n        <circle className=\"donut-hole\" fill=\"#fff\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" />\n        <g className=\"donut-chart-text\">\n          <text x=\"50%\" y=\"50%\" className=\"donut-chart-number\">\n            {completePercentage}{isLocaleRtl && '\\u200f'}%\n          </text>\n          <text x=\"50%\" y=\"50%\" className=\"donut-chart-label\">\n            {intl.formatMessage(messages.donutLabel)}\n          </text>\n        </g>\n        <IncompleteDonutSegment incompletePercentage={incompletePercentage} />\n        <LockedDonutSegment lockedPercentage={lockedPercentage} />\n        <CompleteDonutSegment completePercentage={completePercentage} lockedPercentage={lockedPercentage} />\n      </svg>\n      <div className=\"sr-only\">\n        {intl.formatMessage(messages.percentComplete, { percent: completePercentage })}\n        {intl.formatMessage(messages.percentIncomplete, { percent: incompletePercentage })}\n        {lockedPercentage > 0 && (\n          <>\n            {intl.formatMessage(messages.percentLocked, { percent: lockedPercentage })}\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nCompletionDonutChart.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CompletionDonutChart);\n"],"file":"CompletionDonutChart.js"}