{"version":3,"sources":["../../../../src/course-home/progress-tab/course-completion/IncompleteDonutSegment.jsx"],"names":["IncompleteDonutSegment","incompletePercentage","intl","showIncompletePopover","setShowIncompletePopover","incompleteSegmentOffset","incompleteTooltipDegree","formatMessage","messages","incompleteContentTooltip","transform","propTypes","PropTypes","number","isRequired","intlShape"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;;;AAEA,SAASA,sBAAT,OAAgE;AAAA,MAAhC;AAAEC,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,GAAgC;;AAC9D,MAAI,CAACD,oBAAL,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED,QAAM,CAACE,qBAAD,EAAwBC,wBAAxB,IAAoD,qBAAS,KAAT,CAA1D;AAEA,QAAMC,uBAAuB,GAAI,MAAMJ,oBAAP,GAA+B,EAA/D;AACA,QAAMK,uBAAuB,GAAGL,oBAAoB,GAAG,GAAvB,GAA6BI,uBAA7B,GAAuD,CAAvF;AAEA,sBACE;AACE,IAAA,SAAS,EAAC,qBADZ;AAEE,IAAA,MAAM,EAAE,MAAMD,wBAAwB,CAAC,KAAD,CAFxC;AAGE,IAAA,OAAO,EAAE,MAAMA,wBAAwB,CAAC,IAAD,CAHzC;AAIE,IAAA,QAAQ,EAAC,IAJX;AAAA,4BAME;AACE,MAAA,SAAS,EAAC,8BADZ;AAEE,MAAA,EAAE,EAAC,IAFL;AAGE,MAAA,EAAE,EAAC,IAHL;AAIE,MAAA,CAAC,EAAC,mBAJJ;AAKE,MAAA,eAAe,EAAG,GAAEH,oBAAqB,IAAG,MAAMA,oBAAqB,EALzE;AAME,MAAA,gBAAgB,EAAC;AANnB,MANF,eAgBE,qBAAC,uBAAD;AACE,MAAA,IAAI,EAAEE,qBADR;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,OAAO,eACL,qBAAC,gBAAD;AAAS,uBAAY,MAArB;AAAA,+BACE,qBAAC,gBAAD,CAAS,OAAT;AAAA,oBACGD,IAAI,CAACK,aAAL,CAAmBC,kBAASC,wBAA5B;AADH;AADF,QAJJ;AAAA,6BAYE;AAAM,QAAA,CAAC,EAAC,IAAR;AAAa,QAAA,CAAC,EAAC,GAAf;AAAmB,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAG,UAASJ,uBAAwB;AAA/C;AAA1B;AAZF,MAhBF;AAAA,IADF;AAiCD;;AAEDN,sBAAsB,CAACW,SAAvB,GAAmC;AACjCV,EAAAA,oBAAoB,EAAEW,mBAAUC,MAAV,CAAiBC,UADN;AAEjCZ,EAAAA,IAAI,EAAEa,gBAAUD;AAFiB,CAAnC;;eAKe,sBAAWd,sBAAX,C","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { OverlayTrigger, Popover } from '@edx/paragon';\n\nimport messages from './messages';\n\nfunction IncompleteDonutSegment({ incompletePercentage, intl }) {\n  if (!incompletePercentage) {\n    return null;\n  }\n\n  const [showIncompletePopover, setShowIncompletePopover] = useState(false);\n\n  const incompleteSegmentOffset = (3.6 * incompletePercentage) / 16;\n  const incompleteTooltipDegree = incompletePercentage < 100 ? incompleteSegmentOffset : 0;\n\n  return (\n    <g\n      className=\"donut-segment-group\"\n      onBlur={() => setShowIncompletePopover(false)}\n      onFocus={() => setShowIncompletePopover(true)}\n      tabIndex=\"-1\"\n    >\n      <circle\n        className=\"donut-ring incomplete-stroke\"\n        cx=\"21\"\n        cy=\"21\"\n        r=\"15.91549430918954\"\n        strokeDasharray={`${incompletePercentage} ${100 - incompletePercentage}`}\n        strokeDashoffset=\"25\"\n      />\n\n      {/* Tooltip */}\n      <OverlayTrigger\n        show={showIncompletePopover}\n        placement=\"top\"\n        overlay={(\n          <Popover aria-hidden=\"true\">\n            <Popover.Content>\n              {intl.formatMessage(messages.incompleteContentTooltip)}\n            </Popover.Content>\n          </Popover>\n        )}\n      >\n        {/* Used to anchor the tooltip within the incomplete segment's stroke */}\n        <rect x=\"19\" y=\"3\" style={{ transform: `rotate(${incompleteTooltipDegree}deg)` }} />\n      </OverlayTrigger>\n    </g>\n  );\n}\n\nIncompleteDonutSegment.propTypes = {\n  incompletePercentage: PropTypes.number.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(IncompleteDonutSegment);\n"],"file":"IncompleteDonutSegment.js"}