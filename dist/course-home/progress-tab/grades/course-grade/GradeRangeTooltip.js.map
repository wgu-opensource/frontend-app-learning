{"version":3,"sources":["../../../../../src/course-home/progress-tab/grades/course-grade/GradeRangeTooltip.jsx"],"names":["GradeRangeTooltip","intl","iconButtonClassName","passingGrade","courseId","state","courseHome","gradesFeatureIsFullyLocked","gradingPolicy","gradeRange","showTooltip","setShowTooltip","orderedGradeRange","Object","entries","sort","a","b","formatMessage","messages","courseGradeRangeTooltip","map","range","index","toFixed","previousGrade","gradeRangeTooltipAlt","InfoOutline","Icon","defaultProps","propTypes","PropTypes","string","intlShape","isRequired","number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { InfoOutline } from '@edx/paragon/icons';\nimport {\n  Icon, IconButton, OverlayTrigger, Popover,\n} from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\n\nimport messages from '../messages';\n\nfunction GradeRangeTooltip({ intl, iconButtonClassName, passingGrade }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    gradesFeatureIsFullyLocked,\n    gradingPolicy: {\n      gradeRange,\n    },\n  } = useModel('progress', courseId);\n\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const orderedGradeRange = Object.entries(gradeRange).sort((a, b) => (\n    gradeRange[b[0]] - gradeRange[a[0]]\n  ));\n\n  return (\n    <OverlayTrigger\n      placement=\"top\"\n      trigger=\"click\"\n      show={showTooltip}\n      overlay={(\n        <Popover>\n          <Popover.Content className=\"px-3\">\n            {intl.formatMessage(messages.courseGradeRangeTooltip)}\n            <ul className=\"list-unstyled m-0\">\n              {orderedGradeRange.map((range, index) => {\n                if (index === 0) {\n                  return (\n                    <li key={range[0]}>\n                      {range[0]}: {(range[1] * 100).toFixed(0)}%-100%\n                    </li>\n                  );\n                }\n                const previousGrade = orderedGradeRange[index - 1];\n                return (\n                  <li key={range[0]}>\n                    {range[0]}: {(range[1] * 100).toFixed(0)}%-{(previousGrade[1] * 100).toFixed(0)}%\n                  </li>\n                );\n              })}\n              <li>F: {'<'}{passingGrade}%</li>\n            </ul>\n          </Popover.Content>\n        </Popover>\n      )}\n    >\n      <IconButton\n        onClick={() => setShowTooltip(!showTooltip)}\n        onBlur={() => setShowTooltip(false)}\n        alt={intl.formatMessage(messages.gradeRangeTooltipAlt)}\n        className={`mb-0 mt-n1 ${iconButtonClassName}`}\n        src={InfoOutline}\n        iconAs={Icon}\n        size=\"inline\"\n        disabled={gradesFeatureIsFullyLocked}\n      />\n    </OverlayTrigger>\n  );\n}\n\nGradeRangeTooltip.defaultProps = {\n  iconButtonClassName: '',\n};\n\nGradeRangeTooltip.propTypes = {\n  iconButtonClassName: PropTypes.string,\n  intl: intlShape.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(GradeRangeTooltip);\n"],"file":"GradeRangeTooltip.js"}