{"version":3,"sources":["../../../../../src/course-home/progress-tab/grades/course-grade/CourseGradeFooter.jsx"],"names":["CourseGradeFooter","intl","passingGrade","courseId","state","courseHome","courseGrade","isPassing","letterGrade","gradingPolicy","gradeRange","wideScreen","width","breakpoints","medium","minWidth","hasLetterGrades","Object","keys","length","footerText","formatMessage","messages","courseGradeFooterNonPassing","minGradeRangeCutoff","possibleMaxGradeRangeValues","values","filter","grade","maxGradeRangeCutoff","Math","min","courseGradeFooterPassingWithGrade","minGrade","toFixed","maxGrade","courseGradeFooterGenericPassing","icon","CheckCircle","WarningFilled","whiteSpace","propTypes","intlShape","isRequired","PropTypes","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { CheckCircle, WarningFilled } from '@edx/paragon/icons';\nimport { breakpoints, Icon, useWindowSize } from '@edx/paragon';\nimport { useModel } from '../../../../generic/model-store';\n\nimport GradeRangeTooltip from './GradeRangeTooltip';\nimport messages from '../messages';\n\nfunction CourseGradeFooter({ intl, passingGrade }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseGrade: {\n      isPassing,\n      letterGrade,\n    },\n    gradingPolicy: {\n      gradeRange,\n    },\n  } = useModel('progress', courseId);\n\n  const wideScreen = useWindowSize().width >= breakpoints.medium.minWidth;\n\n  const hasLetterGrades = Object.keys(gradeRange).length > 1; // A pass/fail course will only have one key\n  let footerText = intl.formatMessage(messages.courseGradeFooterNonPassing, { passingGrade });\n\n  if (isPassing) {\n    if (hasLetterGrades) {\n      const minGradeRangeCutoff = gradeRange[letterGrade] * 100;\n      const possibleMaxGradeRangeValues = [...Object.values(gradeRange).filter(\n        (grade) => (grade * 100 > minGradeRangeCutoff),\n      )];\n      const maxGradeRangeCutoff = possibleMaxGradeRangeValues.length ? Math.min(...possibleMaxGradeRangeValues) * 100\n        : 100;\n\n      footerText = intl.formatMessage(messages.courseGradeFooterPassingWithGrade, {\n        letterGrade,\n        minGrade: minGradeRangeCutoff.toFixed(0),\n        maxGrade: maxGradeRangeCutoff.toFixed(0),\n      });\n    } else {\n      footerText = intl.formatMessage(messages.courseGradeFooterGenericPassing);\n    }\n  }\n\n  const icon = isPassing ? <Icon src={CheckCircle} className=\"text-success-300 d-inline-flex align-bottom\" />\n    : <Icon src={WarningFilled} className=\"d-inline-flex align-bottom\" />;\n\n  return (\n    <div className={`row w-100 m-0 px-4 py-3 py-md-4 rounded-bottom ${isPassing ? 'bg-success-100' : 'bg-warning-100'}`}>\n      <div className=\"col-auto p-0\">\n        {icon}\n      </div>\n      <div className=\"col-11 pl-2 px-0\">\n        {!wideScreen && (\n          <span className=\"h5 align-bottom\">\n            {footerText}\n            {hasLetterGrades && (\n              <span style={{ whiteSpace: 'nowrap' }}>\n                &nbsp;\n                <GradeRangeTooltip iconButtonClassName=\"h4\" passingGrade={passingGrade} />\n              </span>\n            )}\n          </span>\n        )}\n        {wideScreen && (\n          <span className=\"h4 m-0 align-bottom\">\n            {footerText}\n            {hasLetterGrades && (\n              <span style={{ whiteSpace: 'nowrap' }}>\n                &nbsp;\n                <GradeRangeTooltip iconButtonClassName=\"h3\" passingGrade={passingGrade} />\n              </span>\n            )}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n\nCourseGradeFooter.propTypes = {\n  intl: intlShape.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(CourseGradeFooter);\n"],"file":"CourseGradeFooter.js"}