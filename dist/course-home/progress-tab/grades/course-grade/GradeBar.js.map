{"version":3,"sources":["../../../../../src/course-home/progress-tab/grades/course-grade/GradeBar.jsx"],"names":["GradeBar","intl","passingGrade","courseId","state","courseHome","courseGrade","isPassing","percent","gradesFeatureIsFullyLocked","currentGrade","Number","toFixed","lockedTooltipClassName","adjustedRtlStyle","percentOffest","transform","formatMessage","messages","courseGradeBarAltText","propTypes","intlShape","isRequired","PropTypes","number"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAGA;;AACA;;AACA;;AAEA;;;;;;AAEA,SAASA,QAAT,OAA0C;AAAA,MAAxB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAwB;AACxC,QAAM;AACJC,IAAAA;AADI,MAEF,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAA3B,CAFJ;AAIA,QAAM;AACJC,IAAAA,WAAW,EAAE;AACXC,MAAAA,SADW;AAEXC,MAAAA;AAFW,KADT;AAKJC,IAAAA;AALI,MAMF,0BAAS,UAAT,EAAqBN,QAArB,CANJ;AAQA,QAAMO,YAAY,GAAGC,MAAM,CAAC,CAACH,OAAO,GAAG,GAAX,EAAgBI,OAAhB,CAAwB,CAAxB,CAAD,CAA3B;AAEA,QAAMC,sBAAsB,GAAGJ,0BAA0B,GAAG,gBAAH,GAAsB,EAA/E;;AAEA,QAAMK,gBAAgB,GAAIC,aAAD,IAAoB,iBAAM,sBAAN,IAAqB;AAAEC,IAAAA,SAAS,EAAG,cAAa,MAAMD,aAAc;AAA/C,GAArB,GAA4E,EAAzH;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,uCAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAA0Bd,IAAI,CAACgB,aAAL,CAAmBC,kBAASC,qBAA5B,EAAmD;AAAET,QAAAA,YAAF;AAAgBR,QAAAA;AAAhB,OAAnD;AAA1B,MADF,eAEE;AAAK,MAAA,KAAK,EAAC,MAAX;AAAkB,MAAA,MAAM,EAAC,OAAzB;AAAiC,MAAA,SAAS,EAAC,WAA3C;AAAuD,qBAAY,MAAnE;AAAA,8BACE;AAAG,QAAA,KAAK,EAAE;AAAEc,UAAAA,SAAS,EAAE;AAAb,SAAV;AAAA,gCACE;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAkC,UAAA,KAAK,EAAC;AAAxC,UADF,eAEE;AAAM,UAAA,SAAS,EAAC,oBAAhB;AAAqC,UAAA,KAAK,EAAG,GAAEd,YAAa,GAA5D;AAAgE,UAAA,KAAK,EAAEY,gBAAgB,CAACZ,YAAD;AAAvF,UAFF,eAGE;AAAM,UAAA,SAAS,EAAG,sBAAqBK,SAAS,GAAG,SAAH,GAAe,aAAc,EAA7E;AAAgF,UAAA,KAAK,EAAG,GAAEG,YAAa,GAAvG;AAA2G,UAAA,KAAK,EAAEI,gBAAgB,CAACJ,YAAD;AAAlI,UAHF,eAME;AAAM,UAAA,SAAS,EAAC;AAAhB,UANF,eAQE;AAAM,UAAA,SAAS,EAAC,oBAAhB;AAAqC,UAAA,CAAC,EAAC;AAAvC,UARF;AAAA,QADF,eAWE,qBAAC,4BAAD;AAAqB,QAAA,YAAY,EAAER,YAAnC;AAAiD,QAAA,gBAAgB,EAAEW;AAAnE,QAXF,eAYE,qBAAC,4BAAD;AAAqB,QAAA,gBAAgB,EAAEA;AAAvC,QAZF;AAAA,MAFF;AAAA,IADF;AAmBD;;AAEDb,QAAQ,CAACoB,SAAT,GAAqB;AACnBnB,EAAAA,IAAI,EAAEoB,gBAAUC,UADG;AAEnBpB,EAAAA,YAAY,EAAEqB,mBAAUC,MAAV,CAAiBF;AAFZ,CAArB;;eAKe,sBAAWtB,QAAX,C","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\nimport { useModel } from '../../../../generic/model-store';\nimport CurrentGradeTooltip from './CurrentGradeTooltip';\nimport PassingGradeTooltip from './PassingGradeTooltip';\n\nimport messages from '../messages';\n\nfunction GradeBar({ intl, passingGrade }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseGrade: {\n      isPassing,\n      percent,\n    },\n    gradesFeatureIsFullyLocked,\n  } = useModel('progress', courseId);\n\n  const currentGrade = Number((percent * 100).toFixed(0));\n\n  const lockedTooltipClassName = gradesFeatureIsFullyLocked ? 'locked-overlay' : '';\n\n  const adjustedRtlStyle = (percentOffest) => (isRtl(getLocale()) ? { transform: `translateX(${100 - percentOffest}%)` } : {});\n\n  return (\n    <div className=\"col-12 col-sm-6 align-self-center p-0\">\n      <div className=\"sr-only\">{intl.formatMessage(messages.courseGradeBarAltText, { currentGrade, passingGrade })}</div>\n      <svg width=\"100%\" height=\"100px\" className=\"grade-bar\" aria-hidden=\"true\">\n        <g style={{ transform: 'translateY(2.61em)' }}>\n          <rect className=\"grade-bar__base\" width=\"100%\" />\n          <rect className=\"grade-bar--passing\" width={`${passingGrade}%`} style={adjustedRtlStyle(passingGrade)} />\n          <rect className={`grade-bar--current-${isPassing ? 'passing' : 'non-passing'}`} width={`${currentGrade}%`} style={adjustedRtlStyle(currentGrade)} />\n\n          {/* Start divider */}\n          <rect className=\"grade-bar__divider\" />\n          {/* End divider */}\n          <rect className=\"grade-bar__divider\" x=\"99.7%\" />\n        </g>\n        <PassingGradeTooltip passingGrade={passingGrade} tooltipClassName={lockedTooltipClassName} />\n        <CurrentGradeTooltip tooltipClassName={lockedTooltipClassName} />\n      </svg>\n    </div>\n  );\n}\n\nGradeBar.propTypes = {\n  intl: intlShape.isRequired,\n  passingGrade: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(GradeBar);\n"],"file":"GradeBar.js"}