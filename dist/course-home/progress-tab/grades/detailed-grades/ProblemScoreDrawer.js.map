{"version":3,"file":"ProblemScoreDrawer.js","names":["_react","_interopRequireDefault","require","_propTypes","_classnames","_i18n","_messages","_jsxRuntime","obj","__esModule","default","ProblemScoreDrawer","_ref","intl","problemScores","subsection","isLocaleRtl","isRtl","getLocale","jsxs","className","children","jsx","id","formatMessage","messages","problemScoreLabel","classNames","learnerHasAccess","map","problemScore","earned","possible","propTypes","intlShape","isRequired","PropTypes","arrayOf","shape","number","bool","_default","injectIntl","exports"],"sources":["../../../../../src/course-home/progress-tab/grades/detailed-grades/ProblemScoreDrawer.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport {\n  getLocale, injectIntl, intlShape, isRtl,\n} from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\n\nconst ProblemScoreDrawer = ({ intl, problemScores, subsection }) => {\n  const isLocaleRtl = isRtl(getLocale());\n  return (\n    <span className=\"row w-100 m-0 x-small ml-4 pt-2 pl-1 text-gray-700 flex-nowrap\">\n      <span id=\"problem-score-label\" className=\"col-auto p-0\">{intl.formatMessage(messages.problemScoreLabel)}</span>\n      <div className={classNames('col', 'p-0', { 'greyed-out': !subsection.learnerHasAccess })}>\n        <ul className=\"list-unstyled row w-100 m-0\" aria-labelledby=\"problem-score-label\">\n          {problemScores.map(problemScore => (\n            <li className=\"ml-3\">{problemScore.earned}{isLocaleRtl ? '\\\\' : '/'}{problemScore.possible}</li>\n          ))}\n        </ul>\n      </div>\n    </span>\n  );\n};\n\nProblemScoreDrawer.propTypes = {\n  intl: intlShape.isRequired,\n  problemScores: PropTypes.arrayOf(PropTypes.shape({\n    earned: PropTypes.number.isRequired,\n    possible: PropTypes.number.isRequired,\n  })).isRequired,\n  subsection: PropTypes.shape({ learnerHasAccess: PropTypes.bool }).isRequired,\n};\n\nexport default injectIntl(ProblemScoreDrawer);\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,WAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEA,IAAAG,KAAA,GAAAH,OAAA;AAIA,IAAAI,SAAA,GAAAL,sBAAA,CAAAC,OAAA;AAAmC,IAAAK,WAAA,GAAAL,OAAA;AAAA,SAAAD,uBAAAO,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEnC,MAAMG,kBAAkB,GAAGC,IAAA,IAAyC;EAAA,IAAxC;IAAEC,IAAI;IAAEC,aAAa;IAAEC;EAAW,CAAC,GAAAH,IAAA;EAC7D,MAAMI,WAAW,GAAG,IAAAC,WAAK,EAAC,IAAAC,eAAS,EAAC,CAAC,CAAC;EACtC,oBACE,IAAAX,WAAA,CAAAY,IAAA;IAAMC,SAAS,EAAC,gEAAgE;IAAAC,QAAA,gBAC9E,IAAAd,WAAA,CAAAe,GAAA;MAAMC,EAAE,EAAC,qBAAqB;MAACH,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAER,IAAI,CAACW,aAAa,CAACC,iBAAQ,CAACC,iBAAiB;IAAC,CAAO,CAAC,eAC/G,IAAAnB,WAAA,CAAAe,GAAA;MAAKF,SAAS,EAAE,IAAAO,mBAAU,EAAC,KAAK,EAAE,KAAK,EAAE;QAAE,YAAY,EAAE,CAACZ,UAAU,CAACa;MAAiB,CAAC,CAAE;MAAAP,QAAA,eACvF,IAAAd,WAAA,CAAAe,GAAA;QAAIF,SAAS,EAAC,6BAA6B;QAAC,mBAAgB,qBAAqB;QAAAC,QAAA,EAC9EP,aAAa,CAACe,GAAG,CAACC,YAAY,iBAC7B,IAAAvB,WAAA,CAAAY,IAAA;UAAIC,SAAS,EAAC,MAAM;UAAAC,QAAA,GAAES,YAAY,CAACC,MAAM,EAAEf,WAAW,GAAG,IAAI,GAAG,GAAG,EAAEc,YAAY,CAACE,QAAQ;QAAA,CAAK,CAChG;MAAC,CACA;IAAC,CACF,CAAC;EAAA,CACF,CAAC;AAEX,CAAC;AAEDrB,kBAAkB,CAACsB,SAAS,GAAG;EAC7BpB,IAAI,EAAEqB,eAAS,CAACC,UAAU;EAC1BrB,aAAa,EAAEsB,kBAAS,CAACC,OAAO,CAACD,kBAAS,CAACE,KAAK,CAAC;IAC/CP,MAAM,EAAEK,kBAAS,CAACG,MAAM,CAACJ,UAAU;IACnCH,QAAQ,EAAEI,kBAAS,CAACG,MAAM,CAACJ;EAC7B,CAAC,CAAC,CAAC,CAACA,UAAU;EACdpB,UAAU,EAAEqB,kBAAS,CAACE,KAAK,CAAC;IAAEV,gBAAgB,EAAEQ,kBAAS,CAACI;EAAK,CAAC,CAAC,CAACL;AACpE,CAAC;AAAC,IAAAM,QAAA,GAEa,IAAAC,gBAAU,EAAC/B,kBAAkB,CAAC;AAAAgC,OAAA,CAAAjC,OAAA,GAAA+B,QAAA"}