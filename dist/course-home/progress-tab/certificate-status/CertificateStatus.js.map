{"version":3,"sources":["../../../../src/course-home/progress-tab/certificate-status/CertificateStatus.jsx"],"names":["CertificateStatus","intl","courseId","state","courseHome","isEnrolled","org","canViewCertificate","userTimezone","certificateData","end","enrollmentMode","gradingPolicy","gradeRange","hasScheduledContent","userHasPassingGrade","verificationData","verifiedMode","certificateAvailableDate","mode","eventProperties","org_key","courserun_key","dispatch","administrator","certStatus","certWebViewUrl","timezoneFormatArgs","timeZone","certCase","certEventName","body","buttonAction","buttonLocation","buttonText","endDate","certAvailabilityDate","gradeEventName","Object","entries","length","dashboardLink","idVerificationSupportLink","profileLink","certIsDownloadable","COURSE_EXIT_MODES","disabled","nonPassing","formatMessage","messages","inProgress","celebration","status","unverifiedPendingBody","link","LMS_BASE_URL","viewableButton","upgradeUrl","formatDate","year","month","day","notAvailableEndDateBody","is_staff","track_variant","grade_variant","certificate_status_variant","header","logCertificateStatusButtonClicked","linkCategory","linkName","linkType","pageName","propTypes","intlShape","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  FormattedDate, FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\n\nimport { Button, Card } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\nimport { useModel } from '../../../generic/model-store';\nimport { COURSE_EXIT_MODES, getCourseExitMode } from '../../../courseware/course/course-exit/utils';\nimport { DashboardLink, IdVerificationSupportLink, ProfileLink } from '../../../shared/links';\nimport { requestCert } from '../../data/thunks';\nimport messages from './messages';\n\nfunction CertificateStatus({ intl }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isEnrolled,\n    org,\n    canViewCertificate,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    certificateData,\n    end,\n    enrollmentMode,\n    gradingPolicy: {\n      gradeRange,\n    },\n    hasScheduledContent,\n    userHasPassingGrade,\n    verificationData,\n    verifiedMode,\n  } = useModel('progress', courseId);\n  const {\n    certificateAvailableDate,\n  } = certificateData || {};\n\n  const mode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    null, // CourseExitPageIsActive\n    canViewCertificate,\n  );\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const dispatch = useDispatch();\n  const { administrator } = getAuthenticatedUser();\n\n  let certStatus;\n  let certWebViewUrl;\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  if (certificateData) {\n    certStatus = certificateData.certStatus;\n    certWebViewUrl = certificateData.certWebViewUrl;\n  }\n\n  let certCase;\n  let certEventName = certStatus;\n  let body;\n  let buttonAction;\n  let buttonLocation;\n  let buttonText;\n  let endDate;\n  let certAvailabilityDate;\n\n  let gradeEventName = 'not_passing';\n  if (userHasPassingGrade) {\n    gradeEventName = Object.entries(gradeRange).length > 1 ? 'passing_grades' : 'passing';\n  }\n\n  const dashboardLink = <DashboardLink />;\n  const idVerificationSupportLink = <IdVerificationSupportLink />;\n  const profileLink = <ProfileLink />;\n\n  // Some learners have a valid (\"downloadable\") certificate without being in a passing\n  // state (e.g. learners who have been added to a course's allowlist), so we need to\n  // skip grade validation for these learners\n  const certIsDownloadable = certStatus === 'downloadable';\n  if (mode === COURSE_EXIT_MODES.disabled) {\n    certEventName = 'certificate_status_disabled';\n  } else if (mode === COURSE_EXIT_MODES.nonPassing && !certIsDownloadable) {\n    certCase = 'notPassing';\n    certEventName = 'not_passing';\n    body = intl.formatMessage(messages[`${certCase}Body`]);\n  } else if (mode === COURSE_EXIT_MODES.inProgress && !certIsDownloadable) {\n    certCase = 'inProgress';\n    certEventName = 'has_scheduled_content';\n    body = intl.formatMessage(messages[`${certCase}Body`]);\n  } else if (mode === COURSE_EXIT_MODES.celebration || certIsDownloadable) {\n    switch (certStatus) {\n      case 'requesting':\n        certCase = 'requestable';\n        buttonAction = () => { dispatch(requestCert(courseId)); };\n        body = intl.formatMessage(messages[`${certCase}Body`]);\n        buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        break;\n\n      case 'unverified':\n        certCase = 'unverified';\n        if (verificationData.status === 'pending') {\n          body = (<p>{intl.formatMessage(messages.unverifiedPendingBody)}</p>);\n        } else {\n          body = (\n            <FormattedMessage\n              id=\"progress.certificateStatus.unverifiedBody\"\n              defaultMessage=\"In order to generate a certificate, you must complete ID verification. {idVerificationSupportLink}.\"\n              description=\"Its shown when learner are not verified thus it recommends going over the verification process\"\n              values={{ idVerificationSupportLink }}\n            />\n          );\n          buttonLocation = verificationData.link;\n          buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        }\n        break;\n\n      case 'downloadable':\n        // Certificate available, download/viewable\n        certCase = 'downloadable';\n        body = (\n          <FormattedMessage\n            id=\"progress.certificateStatus.downloadableBody\"\n            defaultMessage=\"\n              Showcase your accomplishment on LinkedIn or your resumé today.\n              You can download your certificate now and access it any time from your\n              {dashboardLink} and {profileLink}.\"\n            description=\"Recommending an action for learner when course certificate is available\"\n            values={{ dashboardLink, profileLink }}\n          />\n        );\n        if (certWebViewUrl) {\n          certEventName = 'earned_viewable';\n          buttonLocation = `${getConfig().LMS_BASE_URL}${certWebViewUrl}`;\n          buttonText = intl.formatMessage(messages.viewableButton);\n        }\n        break;\n\n      case 'earned_but_not_available':\n        certCase = 'notAvailable';\n        endDate = <FormattedDate value={end} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n        certAvailabilityDate = <FormattedDate value={certificateAvailableDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n        body = (\n          <FormattedMessage\n            id=\"courseCelebration.certificateBody.notAvailable.endDate\"\n            defaultMessage=\"This course ends on {endDate}. Final grades and any earned certificates are\n            scheduled to be available after {certAvailabilityDate}.\"\n            description=\"This shown for leaner when they are eligible for certifcate but it't not available yet, it could because leaners just finished the course quickly!\"\n            values={{ endDate, certAvailabilityDate }}\n          />\n        );\n        break;\n\n      case 'audit_passing':\n      case 'honor_passing':\n        if (verifiedMode) {\n          certCase = 'upgrade';\n          body = intl.formatMessage(messages[`${certCase}Body`]);\n          buttonLocation = verifiedMode.upgradeUrl;\n          buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        } else {\n          certCase = null; // Do not render the certificate component if the upgrade deadline has passed\n          certEventName = 'audit_passing_missed_upgrade_deadline';\n        }\n        break;\n\n      default:\n        // if user completes a course before certificates are available, treat it as notAvailable\n        // regardless of passing or nonpassing status\n        if (!canViewCertificate) {\n          certCase = 'notAvailable';\n          endDate = intl.formatDate(end, {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            ...timezoneFormatArgs,\n          });\n          body = intl.formatMessage(messages.notAvailableEndDateBody, { endDate });\n        } else {\n          certCase = null;\n          certEventName = 'no_certificate_status';\n        }\n        break;\n    }\n  }\n\n  // Log visit to progress tab\n  useEffect(() => {\n    sendTrackEvent('edx.ui.lms.course_progress.visited', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      track_variant: enrollmentMode,\n      grade_variant: gradeEventName,\n      certificate_status_variant: certEventName,\n    });\n  }, []);\n\n  if (!certCase) {\n    return null;\n  }\n\n  const header = intl.formatMessage(messages[`${certCase}Header`]);\n\n  const logCertificateStatusButtonClicked = () => {\n    sendTrackEvent('edx.ui.lms.course_progress.certificate_status.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      certificate_status_variant: certEventName,\n    });\n    if (certCase === 'upgrade') {\n      sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n        ...eventProperties,\n        linkCategory: '(none)',\n        linkName: 'progress_certificate',\n        linkType: 'button',\n        pageName: 'progress',\n      });\n    }\n  };\n\n  return (\n    <section data-testid=\"certificate-status-component\" className=\"text-dark-700 mb-4\">\n      <Card className=\"bg-light-200 raised-card\">\n        <Card.Header title={header} />\n        <Card.Section className=\"small text-gray-700\">\n          {body}\n        </Card.Section>\n        <Card.Footer>\n          {buttonText && (buttonLocation || buttonAction) && (\n            <Button\n              variant=\"outline-brand\"\n              onClick={() => {\n                logCertificateStatusButtonClicked(certStatus);\n                if (buttonAction) { buttonAction(); }\n              }}\n              href={buttonLocation}\n              block\n            >\n              {buttonText}\n            </Button>\n          )}\n        </Card.Footer>\n      </Card>\n    </section>\n  );\n}\n\nCertificateStatus.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CertificateStatus);\n"],"file":"CertificateStatus.js"}