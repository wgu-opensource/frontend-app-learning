{"version":3,"file":"CertificateStatus.js","names":["_react","_interopRequireWildcard","require","_reactRedux","_analytics","_auth","_i18n","_paragon","_frontendPlatform","_modelStore","_utils","_links","_thunks","_messages","_interopRequireDefault","_jsxRuntime","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","CertificateStatus","_ref","intl","courseId","useSelector","state","courseHome","isEnrolled","org","canViewCertificate","userTimezone","useModel","certificateData","end","enrollmentMode","gradingPolicy","gradeRange","hasScheduledContent","userHasPassingGrade","verificationData","verifiedMode","certificateAvailableDate","mode","getCourseExitMode","eventProperties","org_key","courserun_key","dispatch","useDispatch","administrator","getAuthenticatedUser","certStatus","certWebViewUrl","timezoneFormatArgs","timeZone","certCase","certEventName","body","buttonAction","buttonLocation","buttonText","endDate","certAvailabilityDate","gradeEventName","entries","dashboardLink","jsx","DashboardLink","idVerificationSupportLink","IdVerificationSupportLink","profileLink","ProfileLink","certIsDownloadable","COURSE_EXIT_MODES","disabled","nonPassing","formatMessage","messages","inProgress","celebration","requestCert","status","children","unverifiedPendingBody","FormattedMessage","id","defaultMessage","description","values","link","getConfig","LMS_BASE_URL","viewableButton","FormattedDate","day","month","year","upgradeUrl","formatDate","notAvailableEndDateBody","useEffect","sendTrackEvent","is_staff","track_variant","grade_variant","certificate_status_variant","header","logCertificateStatusButtonClicked","linkCategory","linkName","linkType","pageName","className","jsxs","Card","Header","title","Section","Footer","Button","variant","onClick","href","block","propTypes","intlShape","isRequired","_default","injectIntl","exports"],"sources":["../../../../src/course-home/progress-tab/certificate-status/CertificateStatus.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  FormattedDate, FormattedMessage, injectIntl, intlShape,\n} from '@edx/frontend-platform/i18n';\n\nimport { Button, Card } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\nimport { useModel } from '../../../generic/model-store';\nimport { COURSE_EXIT_MODES, getCourseExitMode } from '../../../courseware/course/course-exit/utils';\nimport { DashboardLink, IdVerificationSupportLink, ProfileLink } from '../../../shared/links';\nimport { requestCert } from '../../data/thunks';\nimport messages from './messages';\n\nconst CertificateStatus = ({ intl }) => {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    isEnrolled,\n    org,\n    canViewCertificate,\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const {\n    certificateData,\n    end,\n    enrollmentMode,\n    gradingPolicy: {\n      gradeRange,\n    },\n    hasScheduledContent,\n    userHasPassingGrade,\n    verificationData,\n    verifiedMode,\n  } = useModel('progress', courseId);\n  const {\n    certificateAvailableDate,\n  } = certificateData || {};\n\n  const mode = getCourseExitMode(\n    certificateData,\n    hasScheduledContent,\n    isEnrolled,\n    userHasPassingGrade,\n    null, // CourseExitPageIsActive\n    canViewCertificate,\n  );\n\n  const eventProperties = {\n    org_key: org,\n    courserun_key: courseId,\n  };\n\n  const dispatch = useDispatch();\n  const { administrator } = getAuthenticatedUser();\n\n  let certStatus;\n  let certWebViewUrl;\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  if (certificateData) {\n    certStatus = certificateData.certStatus;\n    certWebViewUrl = certificateData.certWebViewUrl;\n  }\n\n  let certCase;\n  let certEventName = certStatus;\n  let body;\n  let buttonAction;\n  let buttonLocation;\n  let buttonText;\n  let endDate;\n  let certAvailabilityDate;\n\n  let gradeEventName = 'not_passing';\n  if (userHasPassingGrade) {\n    gradeEventName = Object.entries(gradeRange).length > 1 ? 'passing_grades' : 'passing';\n  }\n\n  const dashboardLink = <DashboardLink />;\n  const idVerificationSupportLink = <IdVerificationSupportLink />;\n  const profileLink = <ProfileLink />;\n\n  // Some learners have a valid (\"downloadable\") certificate without being in a passing\n  // state (e.g. learners who have been added to a course's allowlist), so we need to\n  // skip grade validation for these learners\n  const certIsDownloadable = certStatus === 'downloadable';\n  if (mode === COURSE_EXIT_MODES.disabled) {\n    certEventName = 'certificate_status_disabled';\n  } else if (mode === COURSE_EXIT_MODES.nonPassing && !certIsDownloadable) {\n    certCase = 'notPassing';\n    certEventName = 'not_passing';\n    body = intl.formatMessage(messages[`${certCase}Body`]);\n  } else if (mode === COURSE_EXIT_MODES.inProgress && !certIsDownloadable) {\n    certCase = 'inProgress';\n    certEventName = 'has_scheduled_content';\n    body = intl.formatMessage(messages[`${certCase}Body`]);\n  } else if (mode === COURSE_EXIT_MODES.celebration || certIsDownloadable) {\n    switch (certStatus) {\n      case 'requesting':\n        certCase = 'requestable';\n        buttonAction = () => { dispatch(requestCert(courseId)); };\n        body = intl.formatMessage(messages[`${certCase}Body`]);\n        buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        break;\n\n      case 'unverified':\n        certCase = 'unverified';\n        if (verificationData.status === 'pending') {\n          body = (<p>{intl.formatMessage(messages.unverifiedPendingBody)}</p>);\n        } else {\n          body = (\n            <FormattedMessage\n              id=\"progress.certificateStatus.unverifiedBody\"\n              defaultMessage=\"In order to generate a certificate, you must complete ID verification. {idVerificationSupportLink}.\"\n              description=\"Its shown when learner are not verified thus it recommends going over the verification process\"\n              values={{ idVerificationSupportLink }}\n            />\n          );\n          buttonLocation = verificationData.link;\n          buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        }\n        break;\n\n      case 'downloadable':\n        // Certificate available, download/viewable\n        certCase = 'downloadable';\n        body = (\n          <FormattedMessage\n            id=\"progress.certificateStatus.downloadableBody\"\n            defaultMessage=\"\n              Showcase your accomplishment on LinkedIn or your resumÃ© today.\n              You can download your certificate now and access it any time from your\n              {dashboardLink} and {profileLink}.\"\n            description=\"Recommending an action for learner when course certificate is available\"\n            values={{ dashboardLink, profileLink }}\n          />\n        );\n        if (certWebViewUrl) {\n          certEventName = 'earned_viewable';\n          buttonLocation = `${getConfig().LMS_BASE_URL}${certWebViewUrl}`;\n          buttonText = intl.formatMessage(messages.viewableButton);\n        }\n        break;\n\n      case 'earned_but_not_available':\n        certCase = 'notAvailable';\n        endDate = <FormattedDate value={end} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n        certAvailabilityDate = <FormattedDate value={certificateAvailableDate} day=\"numeric\" month=\"long\" year=\"numeric\" />;\n        body = (\n          <FormattedMessage\n            id=\"courseCelebration.certificateBody.notAvailable.endDate\"\n            defaultMessage=\"This course ends on {endDate}. Final grades and any earned certificates are\n            scheduled to be available after {certAvailabilityDate}.\"\n            description=\"This shown for leaner when they are eligible for certifcate but it't not available yet, it could because leaners just finished the course quickly!\"\n            values={{ endDate, certAvailabilityDate }}\n          />\n        );\n        break;\n\n      case 'audit_passing':\n      case 'honor_passing':\n        if (verifiedMode) {\n          certCase = 'upgrade';\n          body = intl.formatMessage(messages[`${certCase}Body`]);\n          buttonLocation = verifiedMode.upgradeUrl;\n          buttonText = intl.formatMessage(messages[`${certCase}Button`]);\n        } else {\n          certCase = null; // Do not render the certificate component if the upgrade deadline has passed\n          certEventName = 'audit_passing_missed_upgrade_deadline';\n        }\n        break;\n\n      default:\n        // if user completes a course before certificates are available, treat it as notAvailable\n        // regardless of passing or nonpassing status\n        if (!canViewCertificate) {\n          certCase = 'notAvailable';\n          endDate = intl.formatDate(end, {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            ...timezoneFormatArgs,\n          });\n          body = intl.formatMessage(messages.notAvailableEndDateBody, { endDate });\n        } else {\n          certCase = null;\n          certEventName = 'no_certificate_status';\n        }\n        break;\n    }\n  }\n\n  // Log visit to progress tab\n  useEffect(() => {\n    sendTrackEvent('edx.ui.lms.course_progress.visited', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      track_variant: enrollmentMode,\n      grade_variant: gradeEventName,\n      certificate_status_variant: certEventName,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!certCase) {\n    return null;\n  }\n\n  const header = intl.formatMessage(messages[`${certCase}Header`]);\n\n  const logCertificateStatusButtonClicked = () => {\n    sendTrackEvent('edx.ui.lms.course_progress.certificate_status.clicked', {\n      org_key: org,\n      courserun_key: courseId,\n      is_staff: administrator,\n      certificate_status_variant: certEventName,\n    });\n    if (certCase === 'upgrade') {\n      sendTrackEvent('edx.bi.ecommerce.upsell_links_clicked', {\n        ...eventProperties,\n        linkCategory: '(none)',\n        linkName: 'progress_certificate',\n        linkType: 'button',\n        pageName: 'progress',\n      });\n    }\n  };\n\n  return (\n    <section data-testid=\"certificate-status-component\" className=\"text-dark-700 mb-4\">\n      <Card className=\"bg-light-200 raised-card\">\n        <Card.Header title={header} />\n        <Card.Section className=\"small text-gray-700\">\n          {body}\n        </Card.Section>\n        <Card.Footer>\n          {buttonText && (buttonLocation || buttonAction) && (\n            <Button\n              variant=\"outline-brand\"\n              onClick={() => {\n                logCertificateStatusButtonClicked(certStatus);\n                if (buttonAction) { buttonAction(); }\n              }}\n              href={buttonLocation}\n              block\n            >\n              {buttonText}\n            </Button>\n          )}\n        </Card.Footer>\n      </Card>\n    </section>\n  );\n};\n\nCertificateStatus.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CertificateStatus);\n"],"mappings":"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"}