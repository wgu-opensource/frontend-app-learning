{"version":3,"sources":["../../../../src/course-home/dates-tab/timeline/badgelist.jsx"],"names":["hasAccess","item","learnerHasAccess","isComplete","assignment","complete","isPastDue","Date","date","isUnreleased","link","getBadgeListAndColor","intl","items","now","assignments","filter","isLearnerAssignment","isToday","isInFuture","badgesInfo","message","messages","today","shownForDay","bg","className","completed","length","every","shownForItem","x","pastDue","dueNext","some","unreleased","verifiedOnly","icon","faLock","color","badges","map","b","shown","formatMessage","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\nimport { Badge } from '@edx/paragon';\n\nimport messages from '../messages';\nimport { daycmp, isLearnerAssignment } from '../utils';\n\nfunction hasAccess(item) {\n  return item.learnerHasAccess;\n}\n\nfunction isComplete(assignment) {\n  return assignment.complete;\n}\n\nfunction isPastDue(assignment) {\n  return !isComplete(assignment) && (new Date(assignment.date) < new Date());\n}\n\nfunction isUnreleased(assignment) {\n  return !assignment.link;\n}\n\n// Pass a null item if you want to get a whole day's badge list, not just one item's list.\n// Returns an object with 'color' and 'badges' properties.\nfunction getBadgeListAndColor(date, intl, item, items) {\n  const now = new Date();\n  const assignments = items.filter(isLearnerAssignment);\n  const isToday = daycmp(date, now) === 0;\n  const isInFuture = daycmp(date, now) > 0;\n\n  // This badge info list is in order of priority (they will appear left to right in this order and the first badge\n  // sets the color of the dot in the timeline).\n  const badgesInfo = [\n    {\n      message: messages.today,\n      shownForDay: isToday,\n      bg: 'bg-warning-300',\n      className: 'text-black',\n    },\n    {\n      message: messages.completed,\n      shownForDay: assignments.length && assignments.every(isComplete),\n      shownForItem: x => isLearnerAssignment(x) && isComplete(x),\n      bg: 'bg-light-500',\n      className: 'text-black',\n    },\n    {\n      message: messages.pastDue,\n      shownForDay: assignments.length && assignments.every(isPastDue),\n      shownForItem: x => isLearnerAssignment(x) && isPastDue(x),\n      bg: 'bg-dark-200',\n      className: 'text-white',\n    },\n    {\n      message: messages.dueNext,\n      shownForDay: !isToday && assignments.some(x => x.dueNext),\n      shownForItem: x => x.dueNext,\n      bg: 'bg-gray-500',\n      className: 'text-white',\n    },\n    {\n      message: messages.unreleased,\n      shownForDay: assignments.length && assignments.every(isUnreleased),\n      shownForItem: x => isLearnerAssignment(x) && isUnreleased(x),\n      className: 'border border-gray-500 text-gray-500',\n    },\n    {\n      message: messages.verifiedOnly,\n      shownForDay: items.length && items.every(x => !hasAccess(x)),\n      shownForItem: x => !hasAccess(x),\n      icon: faLock,\n      bg: 'bg-dark-700',\n      className: 'text-white',\n    },\n  ];\n  let color = null; // first color of any badge\n  const badges = (\n    <>\n      {badgesInfo.map(b => {\n        let shown = b.shownForDay;\n        if (item) {\n          if (b.shownForDay) {\n            shown = false; // don't double up, if the day already has this badge\n          } else {\n            shown = b.shownForItem && b.shownForItem(item);\n          }\n        }\n        if (!shown) {\n          return null;\n        }\n\n        if (!color && !isInFuture) {\n          color = b.bg;\n        }\n        return (\n          <Badge key={b.message.id} className={classNames('ml-2', b.bg, b.className)} data-testid=\"dates-badge\">\n            {b.icon && <FontAwesomeIcon icon={b.icon} className=\"mr-1\" />}\n            {intl.formatMessage(b.message)}\n          </Badge>\n        );\n      })}\n    </>\n  );\n  if (!color && isInFuture) {\n    color = 'bg-gray-900';\n  }\n\n  return {\n    color,\n    badges,\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport { getBadgeListAndColor };\n"],"file":"badgelist.js"}