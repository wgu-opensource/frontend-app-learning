{"version":3,"sources":["../../../../src/course-home/dates-tab/timeline/Day.jsx"],"names":["Day","date","first","intl","items","last","mmp2p","courseId","state","courseHome","userTimezone","timezoneFormatArgs","timeZone","color","badges","mmp2pOverride","isEnabled","some","item","dateType","upgradeDeadline","map","itemBadges","Date","showDueDateTime","showLink","link","title","available","learnerHasAccess","textColor","assignmentType","extraInfo","faInfoCircle","description","propTypes","PropTypes","objectOf","isRequired","bool","intlShape","arrayOf","shape","string","dueNext","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport {\n  FormattedDate,\n  FormattedTime,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Tooltip, OverlayTrigger } from '@edx/paragon';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport { getBadgeListAndColor } from './badgelist';\nimport { isLearnerAssignment } from '../utils';\n\nfunction Day({\n  date,\n  first,\n  intl,\n  items,\n  last,\n  /** [MM-P2P] Example */\n  mmp2p,\n}) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n  const {\n    userTimezone,\n  } = useModel('courseHomeMeta', courseId);\n\n  const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};\n\n  const { color, badges } = getBadgeListAndColor(date, intl, null, items);\n\n  /** [MM-P2P] Experiment */\n  const mmp2pOverride = (\n    mmp2p.state.isEnabled\n    && items.some((item) => item.dateType === 'verified-upgrade-deadline')\n  );\n  return (\n    <li className=\"dates-day pb-4\" data-testid=\"dates-day\">\n      {/* Top Line */}\n      {!first && <div className=\"dates-line-top border-1 border-left border-gray-900 bg-gray-900\" />}\n\n      {/* Dot */}\n      <div className={classNames(color, 'dates-dot border border-gray-900')} />\n\n      {/* Bottom Line */}\n      {!last && <div className=\"dates-line-bottom border-1 border-left border-gray-900 bg-gray-900\" />}\n\n      {/* Content */}\n      <div className=\"d-inline-block ml-3 pl-2\">\n        <div className=\"row w-100 m-0 mb-1 align-items-center text-primary-700\" data-testid=\"dates-header\">\n          <FormattedDate\n            /** [MM-P2P] Experiment */\n            value={mmp2pOverride ? mmp2p.state.upgradeDeadline : date}\n            day=\"numeric\"\n            month=\"short\"\n            weekday=\"short\"\n            year=\"numeric\"\n            {...timezoneFormatArgs}\n          />\n          {badges}\n        </div>\n        {items.map((item) => {\n          /** [MM-P2P] Experiment (conditional) */\n          const { badges: itemBadges } = mmp2pOverride\n            ? getBadgeListAndColor(new Date(mmp2p.state.upgradeDeadline), intl, item, items)\n            : getBadgeListAndColor(date, intl, item, items);\n\n          const showDueDateTime = item.dateType === 'assignment-due-date';\n          const showLink = item.link && isLearnerAssignment(item);\n          const title = showLink ? (<u><a href={item.link} className=\"text-reset\">{item.title}</a></u>) : item.title;\n          const available = item.learnerHasAccess && (item.link || !isLearnerAssignment(item));\n          const textColor = available ? 'text-primary-700' : 'text-gray-500';\n\n          return (\n            <div key={item.title + item.date} className={classNames(textColor, 'small pb-1')} data-testid=\"dates-item\">\n              <div>\n                <span className=\"small\">\n                  <span className=\"font-weight-bold\">{item.assignmentType && `${item.assignmentType}: `}{title}</span>\n                  {showDueDateTime && (\n                    <span>\n                      <span className=\"mx-1\">due</span>\n                      <FormattedTime\n                        value={date}\n                        timeZoneName=\"short\"\n                        {...timezoneFormatArgs}\n                      />\n                    </span>\n                  )}\n                </span>\n                {itemBadges}\n                {item.extraInfo && (\n                  <OverlayTrigger\n                    placement=\"bottom\"\n                    overlay={\n                      <Tooltip>{item.extraInfo}</Tooltip>\n                    }\n                  >\n                    <FontAwesomeIcon icon={faInfoCircle} className=\"fa-xs ml-1 text-gray-700\" data-testid=\"dates-extra-info\" />\n                  </OverlayTrigger>\n                )}\n              </div>\n              { /** [MM-P2P] Experiment (conditional) */ }\n              { mmp2pOverride\n                ? (\n                  <div className=\"small mb-2\">\n                    You are still eligible to upgrade to a Verified Certificate!\n                    &nbsp; Unlock full course access and highlight the knowledge you&apos;ll gain.\n                  </div>\n                )\n                : (item.description && <div className=\"small mb-2\">{item.description}</div>)}\n            </div>\n          );\n        })}\n      </div>\n    </li>\n  );\n}\n\nDay.propTypes = {\n  date: PropTypes.objectOf(Date).isRequired,\n  first: PropTypes.bool,\n  intl: intlShape.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string,\n    dateType: PropTypes.string,\n    description: PropTypes.string,\n    dueNext: PropTypes.bool,\n    learnerHasAccess: PropTypes.bool,\n    link: PropTypes.string,\n    title: PropTypes.string,\n  })).isRequired,\n  last: PropTypes.bool,\n  /** [MM-P2P] Experiment */\n  mmp2p: PropTypes.shape({\n    state: PropTypes.shape({\n      isEnabled: PropTypes.bool.isRequired,\n      upgradeDeadline: PropTypes.string,\n    }),\n  }),\n};\n\nDay.defaultProps = {\n  first: false,\n  last: false,\n  /** [MM-P2P] Experiment */\n  mmp2p: {\n    state: {\n      isEnabled: false,\n      upgradeDeadline: '',\n    },\n  },\n};\n\nexport default injectIntl(Day);\n"],"file":"Day.js"}