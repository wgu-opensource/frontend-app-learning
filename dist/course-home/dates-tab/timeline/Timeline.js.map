{"version":3,"sources":["../../../../src/course-home/dates-tab/timeline/Timeline.jsx"],"names":["Timeline","mmp2p","courseId","state","courseHome","courseDateBlocks","groupedDates","now","Date","foundNextDue","foundToday","forEach","courseDateBlock","dateInfo","parsedDate","date","complete","dueNext","compared","push","items","length","first","last","map","groupedDate","propTypes","PropTypes","shape","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\n/** [MM-P2P] Experiment (import) */\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { useModel } from '../../../generic/model-store';\n\nimport Day from './Day';\nimport { daycmp, isLearnerAssignment } from '../utils';\n\n/** [MM-P2P] Experiment (argument) */\nexport default function Timeline({ mmp2p }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    courseDateBlocks,\n  } = useModel('dates', courseId);\n\n  // Group date items by day (assuming they are sorted in first place) and add some metadata\n  const groupedDates = [];\n  const now = new Date();\n  let foundNextDue = false;\n  let foundToday = false;\n  courseDateBlocks.forEach(courseDateBlock => {\n    const dateInfo = { ...courseDateBlock };\n    const parsedDate = new Date(dateInfo.date);\n\n    if (!foundNextDue && parsedDate >= now && isLearnerAssignment(dateInfo) && !dateInfo.complete) {\n      foundNextDue = true;\n      dateInfo.dueNext = true;\n    }\n\n    if (!foundToday) {\n      const compared = daycmp(parsedDate, now);\n      if (compared === 0) {\n        foundToday = true;\n      } else if (compared > 0) {\n        foundToday = true;\n        groupedDates.push({\n          date: now,\n          items: [],\n        });\n      }\n    }\n\n    if (groupedDates.length === 0 || daycmp(groupedDates[groupedDates.length - 1].date, parsedDate) !== 0) {\n      // Add new grouped date\n      groupedDates.push({\n        date: parsedDate,\n        items: [dateInfo],\n        first: groupedDates.length === 0,\n      });\n    } else {\n      groupedDates[groupedDates.length - 1].items.push(dateInfo);\n    }\n  });\n  if (!foundToday) {\n    groupedDates.push({ date: now, items: [] });\n  }\n  if (groupedDates.length) {\n    groupedDates[groupedDates.length - 1].last = true;\n  }\n\n  return (\n    <ul className=\"list-unstyled m-0 mt-4 pt-2\">\n      {groupedDates.map((groupedDate) => (\n        <Day key={groupedDate.date} {...groupedDate} mmp2p={mmp2p} />\n      ))}\n    </ul>\n  );\n}\n\n/** [MM-P2P] Experiment */\nTimeline.propTypes = {\n  mmp2p: PropTypes.shape({}),\n};\n\nTimeline.defaultProps = {\n  mmp2p: {},\n};\n"],"file":"Timeline.js"}