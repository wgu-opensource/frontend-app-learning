{"version":3,"sources":["../../../src/course-home/suggested-schedule-messaging/ShiftDatesAlert.jsx"],"names":["ShiftDatesAlert","fetch","intl","model","courseId","state","courseHome","datesBannerInfo","hasEnded","missedDeadlines","missedGatedContent","dispatch","formatMessage","messages","shiftDatesBody","shiftDatesButton","propTypes","PropTypes","func","isRequired","intlShape","string"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAOA;;AACA;;AACA;;;;;;AAEA,SAASA,eAAT,OAAiD;AAAA,MAAxB;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,GAAwB;AAC/C,QAAM;AACJC,IAAAA;AADI,MAEF,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAA3B,CAFJ;AAIA,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA;AAFI,MAGF,0BAASL,KAAT,EAAgBC,QAAhB,CAHJ;AAKA,QAAM;AACJK,IAAAA,eADI;AAEJC,IAAAA;AAFI,MAGFH,eAHJ;;AAKA,MAAI,CAACE,eAAD,IAAoBC,kBAApB,IAA0CF,QAA9C,EAAwD;AACtD,WAAO,IAAP;AACD;;AAED,QAAMG,QAAQ,GAAG,8BAAjB;AAEA,sBACE,qBAAC,cAAD;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA,2BACE,sBAAC,YAAD;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,sBAAC,YAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,EAAE,EAAE,CAAjB;AAAoB,QAAA,SAAS,EAAC,mBAA9B;AAAA,gCACE;AAAA,oBAAST,IAAI,CAACU,aAAL,CAAmBC,kBAASJ,eAA5B;AAAT,UADF,EAEG,GAFH,EAEQP,IAAI,CAACU,aAAL,CAAmBC,kBAASC,cAA5B,CAFR;AAAA,QADF,eAKE,qBAAC,YAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,EAAE,EAAE,CAAjB;AAAoB,QAAA,SAAS,EAAC,+CAA9B;AAAA,+BACE,qBAAC,eAAD;AACE,UAAA,OAAO,EAAC,SADV;AAEE,UAAA,IAAI,EAAC,IAFP;AAGE,UAAA,SAAS,EAAC,oBAHZ;AAIE,UAAA,OAAO,EAAE,MAAMH,QAAQ,CAAC,0BAAeP,QAAf,EAAyBD,KAAzB,EAAgCF,KAAhC,CAAD,CAJzB;AAAA,oBAMGC,IAAI,CAACU,aAAL,CAAmBC,kBAASE,gBAA5B;AANH;AADF,QALF;AAAA;AADF,IADF;AAoBD;;AAEDf,eAAe,CAACgB,SAAhB,GAA4B;AAC1Bf,EAAAA,KAAK,EAAEgB,mBAAUC,IAAV,CAAeC,UADI;AAE1BjB,EAAAA,IAAI,EAAEkB,gBAAUD,UAFU;AAG1BhB,EAAAA,KAAK,EAAEc,mBAAUI,MAAV,CAAiBF;AAHE,CAA5B;;eAMe,sBAAWnB,eAAX,C","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Alert,\n  Button,\n  Row,\n  Col,\n} from '@edx/paragon';\n\nimport { resetDeadlines } from '../data';\nimport { useModel } from '../../generic/model-store';\nimport messages from './messages';\n\nfunction ShiftDatesAlert({ fetch, intl, model }) {\n  const {\n    courseId,\n  } = useSelector(state => state.courseHome);\n\n  const {\n    datesBannerInfo,\n    hasEnded,\n  } = useModel(model, courseId);\n\n  const {\n    missedDeadlines,\n    missedGatedContent,\n  } = datesBannerInfo;\n\n  if (!missedDeadlines || missedGatedContent || hasEnded) {\n    return null;\n  }\n\n  const dispatch = useDispatch();\n\n  return (\n    <Alert variant=\"warning\">\n      <Row className=\"w-100 m-0\">\n        <Col xs={12} md={9} className=\"small p-0 pr-md-2\">\n          <strong>{intl.formatMessage(messages.missedDeadlines)}</strong>\n          {' '}{intl.formatMessage(messages.shiftDatesBody)}\n        </Col>\n        <Col xs={12} md={3} className=\"align-self-center text-right mt-3 mt-md-0 p-0\">\n          <Button\n            variant=\"primary\"\n            size=\"sm\"\n            className=\"w-xs-100 w-md-auto\"\n            onClick={() => dispatch(resetDeadlines(courseId, model, fetch))}\n          >\n            {intl.formatMessage(messages.shiftDatesButton)}\n          </Button>\n        </Col>\n      </Row>\n    </Alert>\n  );\n}\n\nShiftDatesAlert.propTypes = {\n  fetch: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n  model: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ShiftDatesAlert);\n"],"file":"ShiftDatesAlert.js"}