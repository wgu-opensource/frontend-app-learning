{"version":3,"sources":["../../../src/course-home/goal-unsubscribe/GoalUnsubscribe.jsx"],"names":["GoalUnsubscribe","intl","token","error","setError","isLoading","setIsLoading","data","setData","then","result","formatMessage","messages","loading","courseTitle","propTypes","intlShape","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAEA,SAASA,eAAT,OAAmC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAY,gCAAlB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAAS,KAAT,CAA1B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAAS,IAAT,CAAlC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB,qBAAS,EAAT,CAAxB,CAJiC,CAMjC;;AACA,wBAAU,MAAM;AACd,wCAA0BN,KAA1B,EACGO,IADH,CAEKC,MAAD,IAAY;AACVJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,OAAO,CAACE,MAAM,CAACH,IAAR,CAAP;AACD,KALL,EAMI,MAAM;AACJD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KATL,EADc,CAYd;AACA;AACA;;AACA,mCAAe,6BAAf,EAA8C;AAAEF,MAAAA;AAAF,KAA9C;AACD,GAhBD,EAgBG,EAhBH,EAPiC,CAuBzB;;AAER,sBACE;AAAA,4BACE,qBAAC,uCAAD;AAAQ,MAAA,gBAAgB,EAAE;AAA1B,MADF,eAEE;AAAM,MAAA,EAAE,EAAC,cAAT;AAAwB,MAAA,SAAS,EAAC,4BAAlC;AAAA,iBACGG,SAAS,iBACR,qBAAC,oBAAD;AAAa,QAAA,SAAS,EAAG,GAAEJ,IAAI,CAACU,aAAL,CAAmBC,kBAASC,OAA5B,CAAqC;AAAhE,QAFJ,EAIG,CAACR,SAAD,iBACC,qBAAC,mBAAD;AAAY,QAAA,KAAK,EAAEF,KAAnB;AAA0B,QAAA,WAAW,EAAEI,IAAI,CAACO;AAA5C,QALJ;AAAA,MAFF;AAAA,IADF;AAaD;;AAEDd,eAAe,CAACe,SAAhB,GAA4B;AAC1Bd,EAAAA,IAAI,EAAEe,gBAAUC;AADU,CAA5B;;eAIe,sBAAWjB,eAAX,C","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { LearningHeader as Header } from '@edx/frontend-component-header';\nimport PageLoading from '../../generic/PageLoading';\nimport { unsubscribeFromCourseGoal } from '../data/api';\n\nimport messages from './messages';\nimport ResultPage from './ResultPage';\n\nfunction GoalUnsubscribe({ intl }) {\n  const { token } = useParams();\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState({});\n\n  // We don't need to bother with redux for this simple page. We're not sharing state with other pages at all.\n  useEffect(() => {\n    unsubscribeFromCourseGoal(token)\n      .then(\n        (result) => {\n          setIsLoading(false);\n          setData(result.data);\n        },\n        () => {\n          setIsLoading(false);\n          setError(true);\n        },\n      );\n    // We unfortunately have no information about the user, course, org, or really anything\n    // as visiting this page is allowed to be done anonymously and without the context of the course.\n    // The token can be used to connect a user and course, it will just require some post-processing\n    sendTrackEvent('edx.ui.lms.goal.unsubscribe', { token });\n  }, []); // deps=[] to only run once\n\n  return (\n    <>\n      <Header showUserDropdown={false} />\n      <main id=\"main-content\" className=\"container my-5 text-center\">\n        {isLoading && (\n          <PageLoading srMessage={`${intl.formatMessage(messages.loading)}`} />\n        )}\n        {!isLoading && (\n          <ResultPage error={error} courseTitle={data.courseTitle} />\n        )}\n      </main>\n    </>\n  );\n}\n\nGoalUnsubscribe.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(GoalUnsubscribe);\n"],"file":"GoalUnsubscribe.js"}