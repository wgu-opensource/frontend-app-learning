{"version":3,"sources":["../../../src/generic/user-messages/hooks.js"],"names":["useAlert","isVisible","code","text","topic","type","payload","dismissible","add","remove","UserMessagesContext","undefined","cleanupId"],"mappings":";;;;;;;AACA;;AACA;;;;AAFA;AAIO,SAASA,QAAT,CAAkBC,SAAlB,QAEJ;AAAA,MAFiC;AAClCC,IAAAA,IADkC;AAC5BC,IAAAA,IAD4B;AACtBC,IAAAA,KADsB;AACfC,IAAAA,IADe;AACTC,IAAAA,OADS;AACAC,IAAAA;AADA,GAEjC;AACD,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAkB,uBAAWC,4BAAX,CAAxB,CADC,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,wBAAU,MAAM;AACd,QAAI,CAACT,SAAL,EAAgB;AACd,aAAOU,SAAP;AACD;;AAED,UAAMC,SAAS,GAAGJ,GAAG,CAAC;AACpBN,MAAAA,IADoB;AACdC,MAAAA,IADc;AACRC,MAAAA,KADQ;AACDC,MAAAA,IADC;AACKC,MAAAA,OADL;AACcC,MAAAA;AADd,KAAD,CAArB;AAIA,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACG,SAAD,CAAN;AACD,KAFD;AAGD,GAZD,EAYG,CAACX,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,OAArC,EAA8CC,WAA9C,CAZH;AAaD","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { useContext, useEffect } from 'react';\nimport UserMessagesContext from './UserMessagesContext';\n\nexport function useAlert(isVisible, {\n  code, text, topic, type, payload, dismissible,\n}) {\n  const { add, remove } = useContext(UserMessagesContext);\n\n  // Please note:\n  // The deps list [isVisible, code, ... etc.] in this `useEffect` call prevents the\n  // effect from running if none of deps have changed. However, \"changed\" for objects is\n  // defined in terms of identity; thus, if you provide a payload that is *seemingly* equal\n  // to the previous one but *actually* a different object, then this effect will run.\n  // If you are particularly unlucky, this will cause an infinite re-render loop.\n  // This manifested itself in TNL-7400.\n  // We hope to address the underlying issue in TNL-7418.\n  // In the mean time, you may follow the pattern that `useAccessExpirationAlert`\n  // establishes: memoize the payload so that the exact same object is used if the\n  // payload has not changed. And don't put values based off of now() in your payload, as\n  // that breaks memoization.\n  useEffect(() => {\n    if (!isVisible) {\n      return undefined;\n    }\n\n    const cleanupId = add({\n      code, text, topic, type, payload, dismissible,\n    });\n\n    return () => {\n      remove(cleanupId);\n    };\n  }, [isVisible, code, text, topic, type, payload, dismissible]);\n}\n"],"file":"hooks.js"}