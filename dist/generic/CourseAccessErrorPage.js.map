{"version":3,"sources":["../../src/generic/CourseAccessErrorPage.jsx"],"names":["CourseAccessErrorPage","intl","courseId","dispatch","activeEnterpriseAlert","courseStatus","state","courseHome","LOADING","formatMessage","messages","loading","LOADED","propTypes","intlShape","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,SAASA,qBAAT,OAAyC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAe,gCAArB;AAEA,QAAMC,QAAQ,GAAG,8BAAjB;AACA,QAAMC,qBAAqB,GAAG,mCAAyBF,QAAzB,CAA9B;AACA,wBAAU,MAAM;AACdC,IAAAA,QAAQ,CAAC,gCAAmBD,QAAnB,CAAD,CAAR;AACD,GAFD,EAEG,CAACA,QAAD,CAFH;AAIA,QAAM;AACJG,IAAAA;AADI,MAEF,6BAAYC,KAAK,IAAIA,KAAK,CAACC,UAA3B,CAFJ;;AAIA,MAAIF,YAAY,KAAKG,cAArB,EAA8B;AAC5B,wBACE;AAAA,8BACE,qBAAC,uCAAD,KADF,eAEE,qBAAC,oBAAD;AACE,QAAA,SAAS,EAAEP,IAAI,CAACQ,aAAL,CAAmBC,kBAASC,OAA5B;AADb,QAFF,eAKE,qBAAC,gCAAD,KALF;AAAA,MADF;AASD;;AACD,MAAIN,YAAY,KAAKO,aAArB,EAA6B;AAC3B,wBAAQ,qBAAC,qBAAD;AAAU,MAAA,EAAE,EAAG,kBAAiBV,QAAS;AAAzC,MAAR;AACD;;AACD,sBACE;AAAA,4BACE,qBAAC,uCAAD,KADF,eAEE;AAAM,MAAA,EAAE,EAAC,cAAT;AAAwB,MAAA,SAAS,EAAC,4BAAlC;AAA+D,qBAAY,oBAA3E;AAAA,6BACE,qBAAC,uBAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,SAAS,EAAC,WAFZ;AAGE,QAAA,YAAY,oBACPE,qBADO;AAHd;AADF,MAFF,eAWE,qBAAC,gCAAD,KAXF;AAAA,IADF;AAeD;;AAEDJ,qBAAqB,CAACa,SAAtB,GAAkC;AAChCZ,EAAAA,IAAI,EAAEa,gBAAUC;AADgB,CAAlC;;eAIe,sBAAWf,qBAAX,C","sourcesContent":["import React, { useEffect } from 'react';\nimport { LearningHeader as Header } from '@edx/frontend-component-header';\nimport Footer from '@edx/frontend-component-footer';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport useActiveEnterpriseAlert from '../alerts/active-enteprise-alert';\nimport { AlertList } from './user-messages';\nimport { fetchDiscussionTab } from '../course-home/data/thunks';\nimport { LOADED, LOADING } from '../course-home/data/slice';\nimport PageLoading from './PageLoading';\nimport messages from '../tab-page/messages';\n\nfunction CourseAccessErrorPage({ intl }) {\n  const { courseId } = useParams();\n\n  const dispatch = useDispatch();\n  const activeEnterpriseAlert = useActiveEnterpriseAlert(courseId);\n  useEffect(() => {\n    dispatch(fetchDiscussionTab(courseId));\n  }, [courseId]);\n\n  const {\n    courseStatus,\n  } = useSelector(state => state.courseHome);\n\n  if (courseStatus === LOADING) {\n    return (\n      <>\n        <Header />\n        <PageLoading\n          srMessage={intl.formatMessage(messages.loading)}\n        />\n        <Footer />\n      </>\n    );\n  }\n  if (courseStatus === LOADED) {\n    return (<Redirect to={`/redirect/home/${courseId}`} />);\n  }\n  return (\n    <>\n      <Header />\n      <main id=\"main-content\" className=\"container my-5 text-center\" data-testid=\"access-denied-main\">\n        <AlertList\n          topic=\"outline\"\n          className=\"mx-5 mt-3\"\n          customAlerts={{\n            ...activeEnterpriseAlert,\n          }}\n        />\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nCourseAccessErrorPage.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CourseAccessErrorPage);\n"],"file":"CourseAccessErrorPage.js"}