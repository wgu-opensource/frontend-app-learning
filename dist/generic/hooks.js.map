{"version":3,"sources":["../../src/generic/hooks.js"],"names":["useEventListener","type","handler","eventListenerRef","current","global","removeEventListener","addEventListener","useIFramePluginEvents","events","receiveMessage","data","payload","useIFrameHeight","onIframeLoaded","iframeHeight","setIframeHeight","hasLoaded","setHasLoaded","receiveResizeMessage","height"],"mappings":";;;;;;;;;AAEA;;AAFA;AAMO,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AAC9C;AACA,QAAMC,gBAAgB,GAAG,mBAAO,IAAP,CAAzB;AACA,wBAAU,MAAM;AACd;AACA,QAAIA,gBAAgB,CAACC,OAAjB,KAA6B,IAAjC,EAAuC;AACrCC,MAAAA,MAAM,CAACC,mBAAP,CAA2BL,IAA3B,EAAiCE,gBAAgB,CAACC,OAAlD;AACAD,MAAAA,gBAAgB,CAACC,OAAjB,GAA2B,IAA3B;AACD,KALa,CAMd;;;AACAC,IAAAA,MAAM,CAACE,gBAAP,CAAwBN,IAAxB,EAA8BC,OAA9B,EAPc,CAQd;;AACAC,IAAAA,gBAAgB,CAACC,OAAjB,GAA2BF,OAA3B,CATc,CAUd;;AACA,WAAO,MAAMG,MAAM,CAACC,mBAAP,CAA2BL,IAA3B,EAAiCE,gBAAgB,CAACC,OAAlD,CAAb;AACD,GAZD,EAYG,CAACH,IAAD,EAAOC,OAAP,CAZH;AAaD;AAED;AACA;AACA;AACA;;;AACO,SAASM,qBAAT,CAA+BC,MAA/B,EAAuC;AAC5C,QAAMC,cAAc,GAAG,wBAAY,QAAc;AAAA,QAAb;AAAEC,MAAAA;AAAF,KAAa;AAC/C,UAAM;AACJV,MAAAA,IADI;AAEJW,MAAAA;AAFI,QAGFD,IAHJ;;AAIA,QAAIF,MAAM,CAACR,IAAD,CAAV,EAAkB;AAChBQ,MAAAA,MAAM,CAACR,IAAD,CAAN,CAAaW,OAAb;AACD;AACF,GARsB,EAQpB,CAACH,MAAD,CARoB,CAAvB;AASAT,EAAAA,gBAAgB,CAAC,SAAD,EAAYU,cAAZ,CAAhB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASG,eAAT,GAAgD;AAAA,MAAvBC,cAAuB,uEAAN,IAAM;AACrD,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC,qBAAS,IAAT,CAAxC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAAS,KAAT,CAAlC;AACA,QAAMC,oBAAoB,GAAG,wBAAY,SAAgB;AAAA,QAAf;AAAEC,MAAAA;AAAF,KAAe;AACvDJ,IAAAA,eAAe,CAACI,MAAD,CAAf;;AACA,QAAI,CAACH,SAAD,IAAc,CAACF,YAAf,IAA+BK,MAAM,GAAG,CAA5C,EAA+C;AAC7CF,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAIJ,cAAJ,EAAoB;AAClBA,QAAAA,cAAc;AACf;AACF;AACF,GAR4B,EAQ1B,CAACE,eAAD,EAAkBC,SAAlB,EAA6BF,YAA7B,EAA2CG,YAA3C,EAAyDJ,cAAzD,CAR0B,CAA7B;AASAN,EAAAA,qBAAqB,CAAC;AAAE,qBAAiBW;AAAnB,GAAD,CAArB;AACA,SAAO,CAACF,SAAD,EAAYF,YAAZ,CAAP;AACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nimport {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\n\nexport function useEventListener(type, handler) {\n  // We use this ref so that we can hold a reference to the currently active event listener.\n  const eventListenerRef = useRef(null);\n  useEffect(() => {\n    // If we currently have an event listener, remove it.\n    if (eventListenerRef.current !== null) {\n      global.removeEventListener(type, eventListenerRef.current);\n      eventListenerRef.current = null;\n    }\n    // Now add our new handler as the event listener.\n    global.addEventListener(type, handler);\n    // And then save it to our ref for next time.\n    eventListenerRef.current = handler;\n    // When the component finally unmounts, use the ref to remove the correct handler.\n    return () => global.removeEventListener(type, eventListenerRef.current);\n  }, [type, handler]);\n}\n\n/**\n * Hooks up post messages to callbacks\n * @param {Object.<string, function>} events A mapping of message type to callback\n */\nexport function useIFramePluginEvents(events) {\n  const receiveMessage = useCallback(({ data }) => {\n    const {\n      type,\n      payload,\n    } = data;\n    if (events[type]) {\n      events[type](payload);\n    }\n  }, [events]);\n  useEventListener('message', receiveMessage);\n}\n\n/**\n * A hook to monitor message about changes in iframe content height\n * @param onIframeLoaded A callback for when the frame is loaded\n * @returns {[boolean, number]}\n */\nexport function useIFrameHeight(onIframeLoaded = null) {\n  const [iframeHeight, setIframeHeight] = useState(null);\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const receiveResizeMessage = useCallback(({ height }) => {\n    setIframeHeight(height);\n    if (!hasLoaded && !iframeHeight && height > 0) {\n      setHasLoaded(true);\n      if (onIframeLoaded) {\n        onIframeLoaded();\n      }\n    }\n  }, [setIframeHeight, hasLoaded, iframeHeight, setHasLoaded, onIframeLoaded]);\n  useIFramePluginEvents({ 'plugin.resize': receiveResizeMessage });\n  return [hasLoaded, iframeHeight];\n}\n"],"file":"hooks.js"}